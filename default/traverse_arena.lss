
traverse_arena.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800200  00002d2c  00002dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080030a  0080030a  00002eca  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000575  00000000  00000000  00002eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036ab  00000000  00000000  0000345f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000345  00000000  00000000  00006b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000029bc  00000000  00000000  00006e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  0000980c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ca  00000000  00000000  00009c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001786  00000000  00000000  0000a216  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000648  00000000  00000000  0000b99c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__vector_5>
      18:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <line_follow+0x106>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ec e2       	ldi	r30, 0x2C	; 44
     17e:	fd e2       	ldi	r31, 0x2D	; 45
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	aa 30       	cpi	r26, 0x0A	; 10
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	aa e0       	ldi	r26, 0x0A	; 10
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a5 32       	cpi	r26, 0x25	; 37
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <main>
     1a4:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	fc 01       	movw	r30, r24
     1b2:	31 97       	sbiw	r30, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	40 e3       	ldi	r20, 0x30	; 48
     1bc:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	38 e4       	ldi	r19, 0x48	; 72
     1c4:	f9 01       	movw	r30, r18
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ca:	42 98       	cbi	0x08, 2	; 8
     1cc:	fc 01       	movw	r30, r24
     1ce:	31 97       	sbiw	r30, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1d4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1d6:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1d8:	42 9a       	sbi	0x08, 2	; 8
     1da:	f9 01       	movw	r30, r18
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1e0:	42 98       	cbi	0x08, 2	; 8
     1e2:	fc 01       	movw	r30, r24
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1e8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1ea:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ec:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1ee:	42 9a       	sbi	0x08, 2	; 8
     1f0:	f9 01       	movw	r30, r18
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1f6:	42 98       	cbi	0x08, 2	; 8
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1fc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fe:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     200:	80 e2       	ldi	r24, 0x20	; 32
     202:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     204:	42 9a       	sbi	0x08, 2	; 8
     206:	c9 01       	movw	r24, r18
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8

	
}
     20e:	08 95       	ret

00000210 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     210:	98 b1       	in	r25, 0x08	; 8
     212:	9f 70       	andi	r25, 0x0F	; 15
     214:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     216:	28 b1       	in	r18, 0x08	; 8
     218:	98 2f       	mov	r25, r24
     21a:	90 7f       	andi	r25, 0xF0	; 240
     21c:	92 2b       	or	r25, r18
     21e:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     220:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     222:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     224:	42 9a       	sbi	0x08, 2	; 8
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	38 e4       	ldi	r19, 0x48	; 72
     22a:	f9 01       	movw	r30, r18
     22c:	31 97       	sbiw	r30, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     230:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     238:	98 b1       	in	r25, 0x08	; 8
     23a:	82 95       	swap	r24
     23c:	80 7f       	andi	r24, 0xF0	; 240
     23e:	98 2b       	or	r25, r24
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	c9 01       	movw	r24, r18
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     24e:	42 98       	cbi	0x08, 2	; 8
}
     250:	08 95       	ret

00000252 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     252:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
     256:	86 e6       	ldi	r24, 0x66	; 102
     258:	9e e0       	ldi	r25, 0x0E	; 14
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x8>
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     25e:	88 e2       	ldi	r24, 0x28	; 40
     260:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x01);
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x06);
     26a:	86 e0       	ldi	r24, 0x06	; 6
     26c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x0E);
     270:	8e e0       	ldi	r24, 0x0E	; 14
     272:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x80);
     276:	80 e8       	ldi	r24, 0x80	; 128
     278:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
		
}
     27c:	08 95       	ret

0000027e <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     27e:	98 b1       	in	r25, 0x08	; 8
     280:	9f 70       	andi	r25, 0x0F	; 15
     282:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     284:	28 b1       	in	r18, 0x08	; 8
     286:	98 2f       	mov	r25, r24
     288:	90 7f       	andi	r25, 0xF0	; 240
     28a:	92 2b       	or	r25, r18
     28c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     28e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     290:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     292:	42 9a       	sbi	0x08, 2	; 8
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	38 e4       	ldi	r19, 0x48	; 72
     298:	f9 01       	movw	r30, r18
     29a:	31 97       	sbiw	r30, 0x01	; 1
     29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     29e:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2a0:	98 b1       	in	r25, 0x08	; 8
     2a2:	9f 70       	andi	r25, 0x0F	; 15
     2a4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2a6:	98 b1       	in	r25, 0x08	; 8
     2a8:	82 95       	swap	r24
     2aa:	80 7f       	andi	r24, 0xF0	; 240
     2ac:	98 2b       	or	r25, r24
     2ae:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2b0:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2b2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2b4:	42 9a       	sbi	0x08, 2	; 8
     2b6:	c9 01       	movw	r24, r18
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     2bc:	42 98       	cbi	0x08, 2	; 8
}
     2be:	08 95       	ret

000002c0 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     2c0:	80 e8       	ldi	r24, 0x80	; 128
     2c2:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
}
     2c6:	08 95       	ret

000002c8 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	ec 01       	movw	r28, r24
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     2d0:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_char>
		str++;
     2d4:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     2d6:	88 81       	ld	r24, Y
     2d8:	88 23       	and	r24, r24
     2da:	d1 f7       	brne	.-12     	; 0x2d0 <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     2e2:	82 30       	cpi	r24, 0x02	; 2
     2e4:	69 f0       	breq	.+26     	; 0x300 <lcd_cursor+0x1e>
     2e6:	83 30       	cpi	r24, 0x03	; 3
     2e8:	18 f4       	brcc	.+6      	; 0x2f0 <lcd_cursor+0xe>
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	a9 f4       	brne	.+42     	; 0x318 <lcd_cursor+0x36>
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <lcd_cursor+0x18>
     2f0:	83 30       	cpi	r24, 0x03	; 3
     2f2:	49 f0       	breq	.+18     	; 0x306 <lcd_cursor+0x24>
     2f4:	84 30       	cpi	r24, 0x04	; 4
     2f6:	81 f4       	brne	.+32     	; 0x318 <lcd_cursor+0x36>
     2f8:	0b c0       	rjmp	.+22     	; 0x310 <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2fa:	86 2f       	mov	r24, r22
     2fc:	81 58       	subi	r24, 0x81	; 129
     2fe:	05 c0       	rjmp	.+10     	; 0x30a <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     300:	86 2f       	mov	r24, r22
     302:	81 54       	subi	r24, 0x41	; 65
     304:	02 c0       	rjmp	.+4      	; 0x30a <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     306:	86 2f       	mov	r24, r22
     308:	8d 56       	subi	r24, 0x6D	; 109
     30a:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
     30e:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     310:	86 2f       	mov	r24, r22
     312:	8d 52       	subi	r24, 0x2D	; 45
     314:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
     318:	08 95       	ret

0000031a <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	8a 01       	movw	r16, r20
     324:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     326:	88 23       	and	r24, r24
     328:	11 f0       	breq	.+4      	; 0x32e <lcd_print+0x14>
     32a:	66 23       	and	r22, r22
     32c:	19 f4       	brne	.+6      	; 0x334 <lcd_print+0x1a>
	{
		lcd_home();
     32e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_home>
     332:	02 c0       	rjmp	.+4      	; 0x338 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     334:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     338:	c5 30       	cpi	r28, 0x05	; 5
     33a:	d1 05       	cpc	r29, r1
     33c:	71 f4       	brne	.+28     	; 0x35a <lcd_print+0x40>
	{
		million=value/10000+48;
     33e:	c8 01       	movw	r24, r16
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	77 e2       	ldi	r23, 0x27	; 39
     344:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodhi4>
     348:	cb 01       	movw	r24, r22
     34a:	c0 96       	adiw	r24, 0x30	; 48
     34c:	90 93 19 03 	sts	0x0319, r25
     350:	80 93 18 03 	sts	0x0318, r24
		lcd_wr_char(million);
     354:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_char>
     358:	05 c0       	rjmp	.+10     	; 0x364 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     35a:	c4 30       	cpi	r28, 0x04	; 4
     35c:	d1 05       	cpc	r29, r1
     35e:	11 f0       	breq	.+4      	; 0x364 <lcd_print+0x4a>
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	16 c0       	rjmp	.+44     	; 0x390 <lcd_print+0x76>
	{
		temp = value/1000;
     364:	c8 01       	movw	r24, r16
     366:	68 ee       	ldi	r22, 0xE8	; 232
     368:	73 e0       	ldi	r23, 0x03	; 3
     36a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodhi4>
     36e:	cb 01       	movw	r24, r22
     370:	60 93 1a 03 	sts	0x031A, r22
     374:	90 93 1b 03 	sts	0x031B, r25
		thousand = temp%10 + 48;
     378:	6a e0       	ldi	r22, 0x0A	; 10
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodhi4>
     380:	c0 96       	adiw	r24, 0x30	; 48
     382:	90 93 24 03 	sts	0x0324, r25
     386:	80 93 23 03 	sts	0x0323, r24
		lcd_wr_char(thousand);
     38a:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_char>
     38e:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     390:	c3 30       	cpi	r28, 0x03	; 3
     392:	d1 05       	cpc	r29, r1
     394:	21 f0       	breq	.+8      	; 0x39e <lcd_print+0x84>
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	11 f0       	breq	.+4      	; 0x39e <lcd_print+0x84>
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	16 c0       	rjmp	.+44     	; 0x3ca <lcd_print+0xb0>
	{
		temp = value/100;
     39e:	c8 01       	movw	r24, r16
     3a0:	64 e6       	ldi	r22, 0x64	; 100
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodhi4>
     3a8:	cb 01       	movw	r24, r22
     3aa:	60 93 1a 03 	sts	0x031A, r22
     3ae:	90 93 1b 03 	sts	0x031B, r25
		hundred = temp%10 + 48;
     3b2:	6a e0       	ldi	r22, 0x0A	; 10
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodhi4>
     3ba:	c0 96       	adiw	r24, 0x30	; 48
     3bc:	90 93 20 03 	sts	0x0320, r25
     3c0:	80 93 1f 03 	sts	0x031F, r24
		lcd_wr_char(hundred);
     3c4:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_char>
     3c8:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     3ca:	c2 30       	cpi	r28, 0x02	; 2
     3cc:	d1 05       	cpc	r29, r1
     3ce:	21 f0       	breq	.+8      	; 0x3d8 <lcd_print+0xbe>
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	11 f0       	breq	.+4      	; 0x3d8 <lcd_print+0xbe>
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	16 c0       	rjmp	.+44     	; 0x404 <lcd_print+0xea>
	{
		temp = value/10;
     3d8:	c8 01       	movw	r24, r16
     3da:	6a e0       	ldi	r22, 0x0A	; 10
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodhi4>
     3e2:	cb 01       	movw	r24, r22
     3e4:	60 93 1a 03 	sts	0x031A, r22
     3e8:	90 93 1b 03 	sts	0x031B, r25
		tens = temp%10 + 48;
     3ec:	6a e0       	ldi	r22, 0x0A	; 10
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodhi4>
     3f4:	c0 96       	adiw	r24, 0x30	; 48
     3f6:	90 93 1e 03 	sts	0x031E, r25
     3fa:	80 93 1d 03 	sts	0x031D, r24
		lcd_wr_char(tens);
     3fe:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_char>
     402:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     404:	c1 30       	cpi	r28, 0x01	; 1
     406:	d1 05       	cpc	r29, r1
     408:	11 f0       	breq	.+4      	; 0x40e <lcd_print+0xf4>
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	61 f4       	brne	.+24     	; 0x426 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     40e:	c8 01       	movw	r24, r16
     410:	6a e0       	ldi	r22, 0x0A	; 10
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodhi4>
     418:	c0 96       	adiw	r24, 0x30	; 48
     41a:	90 93 22 03 	sts	0x0322, r25
     41e:	80 93 21 03 	sts	0x0321, r24
		lcd_wr_char(unit);
     422:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_char>
	}
	if(digits>5)
     426:	26 97       	sbiw	r28, 0x06	; 6
     428:	1c f0       	brlt	.+6      	; 0x430 <lcd_print+0x116>
	{
		lcd_wr_char('E');
     42a:	85 e4       	ldi	r24, 0x45	; 69
     42c:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_char>
	}
	
}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <USART_init>:
}

//XBee*********************************************
void USART_init(void)
{
    UBRR0 = BRC;
     43a:	8f e5       	ldi	r24, 0x5F	; 95
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	90 93 c5 00 	sts	0x00C5, r25
     442:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0C = ((0<<USBS0)|(1 << UCSZ01)|(1<<UCSZ00));
     446:	86 e0       	ldi	r24, 0x06	; 6
     448:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = ((1<<RXEN0)|(1<<TXEN0));
     44c:	88 e1       	ldi	r24, 0x18	; 24
     44e:	80 93 c1 00 	sts	0x00C1, r24
}
     452:	08 95       	ret

00000454 <USART_send>:

void USART_send( unsigned char data)
{
     454:	98 2f       	mov	r25, r24
    //while the transmit buffer is not empty loop
    while(!(UCSR0A & (1<<UDRE0)));
     456:	80 91 c0 00 	lds	r24, 0x00C0
     45a:	85 ff       	sbrs	r24, 5
     45c:	fc cf       	rjmp	.-8      	; 0x456 <USART_send+0x2>

    //when the buffer is empty write data to the transmitted
    UDR0 = data;
     45e:	90 93 c6 00 	sts	0x00C6, r25
}
     462:	08 95       	ret

00000464 <lcd_port_config>:
//*******************************xbee

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     464:	87 b1       	in	r24, 0x07	; 7
     466:	87 6f       	ori	r24, 0xF7	; 247
     468:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     46a:	88 b1       	in	r24, 0x08	; 8
     46c:	80 78       	andi	r24, 0x80	; 128
     46e:	88 b9       	out	0x08, r24	; 8
}
     470:	08 95       	ret

00000472 <buzzer_pin_config>:

//
//Function to initialize Buzzer
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;        //Setting PORTC 3 as output
     472:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;      //Setting PORTC 3 logic low to turnoff buzzer
     474:	43 98       	cbi	0x08, 3	; 8
}
     476:	08 95       	ret

00000478 <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     478:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     47a:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     47c:	88 b9       	out	0x08, r24	; 8
}
     47e:	08 95       	ret

00000480 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     480:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     482:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     484:	88 b9       	out	0x08, r24	; 8
}
     486:	08 95       	ret

00000488 <adc_pin_config>:
//

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00;
     488:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     48a:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     48c:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     490:	10 92 08 01 	sts	0x0108, r1
}
     494:	08 95       	ret

00000496 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     496:	81 b1       	in	r24, 0x01	; 1
     498:	8f 60       	ori	r24, 0x0F	; 15
     49a:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     49c:	82 b1       	in	r24, 0x02	; 2
     49e:	80 7f       	andi	r24, 0xF0	; 240
     4a0:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     4a2:	ea e0       	ldi	r30, 0x0A	; 10
     4a4:	f1 e0       	ldi	r31, 0x01	; 1
     4a6:	80 81       	ld	r24, Z
     4a8:	88 61       	ori	r24, 0x18	; 24
     4aa:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     4ac:	eb e0       	ldi	r30, 0x0B	; 11
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	80 81       	ld	r24, Z
     4b2:	88 61       	ori	r24, 0x18	; 24
     4b4:	80 83       	st	Z, r24
}
     4b6:	08 95       	ret

000004b8 <left_encoder_pin_config>:

//posenc
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     4b8:	6c 98       	cbi	0x0d, 4	; 13
    PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     4ba:	74 9a       	sbi	0x0e, 4	; 14
}
     4bc:	08 95       	ret

000004be <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     4be:	6d 98       	cbi	0x0d, 5	; 13
    PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     4c0:	75 9a       	sbi	0x0e, 5	; 14
}
     4c2:	08 95       	ret

000004c4 <port_init>:
//

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00;
     4c4:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     4c6:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     4c8:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     4cc:	10 92 08 01 	sts	0x0108, r1
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     4d0:	81 b1       	in	r24, 0x01	; 1
     4d2:	8f 60       	ori	r24, 0x0F	; 15
     4d4:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     4d6:	82 b1       	in	r24, 0x02	; 2
     4d8:	80 7f       	andi	r24, 0xF0	; 240
     4da:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     4dc:	ea e0       	ldi	r30, 0x0A	; 10
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	80 81       	ld	r24, Z
     4e2:	88 61       	ori	r24, 0x18	; 24
     4e4:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     4e6:	eb e0       	ldi	r30, 0x0B	; 11
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	80 81       	ld	r24, Z
     4ec:	88 61       	ori	r24, 0x18	; 24
     4ee:	80 83       	st	Z, r24

//posenc
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     4f0:	6c 98       	cbi	0x0d, 4	; 13
    PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     4f2:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     4f4:	6d 98       	cbi	0x0d, 5	; 13
    PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     4f6:	75 9a       	sbi	0x0e, 5	; 14

//
//Function to initialize Buzzer
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;        //Setting PORTC 3 as output
     4f8:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;      //Setting PORTC 3 logic low to turnoff buzzer
     4fa:	43 98       	cbi	0x08, 3	; 8
	adc_pin_config();
	motion_pin_config();
    left_encoder_pin_config(); //left encoder pin config
    right_encoder_pin_config(); //right encoder pin config
    buzzer_pin_config();
}
     4fc:	08 95       	ret

000004fe <left_position_encoder_interrupt_init>:


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    cli(); //Clears the global interrupt
     4fe:	f8 94       	cli
    EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     500:	ea e6       	ldi	r30, 0x6A	; 106
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	82 60       	ori	r24, 0x02	; 2
     508:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     50a:	ec 9a       	sbi	0x1d, 4	; 29
    sei();   // Enables the global interrupt
     50c:	78 94       	sei
}
     50e:	08 95       	ret

00000510 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    cli(); //Clears the global interrupt
     510:	f8 94       	cli
    EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     512:	ea e6       	ldi	r30, 0x6A	; 106
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	88 60       	ori	r24, 0x08	; 8
     51a:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     51c:	ed 9a       	sbi	0x1d, 5	; 29
    sei();   // Enables the global interrupt
     51e:	78 94       	sei
}
     520:	08 95       	ret

00000522 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	8f 93       	push	r24
     52e:	9f 93       	push	r25
     530:	af 93       	push	r26
     532:	bf 93       	push	r27
    ShaftCountRight++;  //increment right shaft position count
     534:	80 91 12 03 	lds	r24, 0x0312
     538:	90 91 13 03 	lds	r25, 0x0313
     53c:	a0 91 14 03 	lds	r26, 0x0314
     540:	b0 91 15 03 	lds	r27, 0x0315
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	a1 1d       	adc	r26, r1
     548:	b1 1d       	adc	r27, r1
     54a:	80 93 12 03 	sts	0x0312, r24
     54e:	90 93 13 03 	sts	0x0313, r25
     552:	a0 93 14 03 	sts	0x0314, r26
     556:	b0 93 15 03 	sts	0x0315, r27
}
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     56c:	1f 92       	push	r1
     56e:	0f 92       	push	r0
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	0f 92       	push	r0
     574:	11 24       	eor	r1, r1
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
    ShaftCountLeft++;  //increment left shaft position count
     57e:	80 91 0e 03 	lds	r24, 0x030E
     582:	90 91 0f 03 	lds	r25, 0x030F
     586:	a0 91 10 03 	lds	r26, 0x0310
     58a:	b0 91 11 03 	lds	r27, 0x0311
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	a1 1d       	adc	r26, r1
     592:	b1 1d       	adc	r27, r1
     594:	80 93 0e 03 	sts	0x030E, r24
     598:	90 93 0f 03 	sts	0x030F, r25
     59c:	a0 93 10 03 	sts	0x0310, r26
     5a0:	b0 93 11 03 	sts	0x0311, r27
}
     5a4:	bf 91       	pop	r27
     5a6:	af 91       	pop	r26
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	0f 90       	pop	r0
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	0f 90       	pop	r0
     5b2:	1f 90       	pop	r1
     5b4:	18 95       	reti

000005b6 <drop>:
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     5b6:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     5b8:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     5ba:	88 b9       	out	0x08, r24	; 8
     5bc:	88 e8       	ldi	r24, 0x88	; 136
     5be:	93 e1       	ldi	r25, 0x13	; 19
     5c0:	20 e7       	ldi	r18, 0x70	; 112
     5c2:	31 e0       	ldi	r19, 0x01	; 1
     5c4:	f9 01       	movw	r30, r18
     5c6:	31 97       	sbiw	r30, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <drop+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5cc:	d9 f7       	brne	.-10     	; 0x5c4 <drop+0xe>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     5ce:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     5d0:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     5d2:	88 b9       	out	0x08, r24	; 8
     5d4:	88 e8       	ldi	r24, 0x88	; 136
     5d6:	93 e1       	ldi	r25, 0x13	; 19
     5d8:	20 e7       	ldi	r18, 0x70	; 112
     5da:	31 e0       	ldi	r19, 0x01	; 1
     5dc:	f9 01       	movw	r30, r18
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <drop+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5e4:	d9 f7       	brne	.-10     	; 0x5dc <drop+0x26>
void drop() {
    buzzer_on();
    _delay_ms(500);
    buzzer_off();
    _delay_ms(500);
}
     5e6:	08 95       	ret

000005e8 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     5e8:	e1 e2       	ldi	r30, 0x21	; 33
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
     5ec:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     5ee:	9f ef       	ldi	r25, 0xFF	; 255
     5f0:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     5fa:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     5fe:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     602:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     606:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     60a:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     60e:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     612:	89 ea       	ldi	r24, 0xA9	; 169
     614:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     618:	8b e0       	ldi	r24, 0x0B	; 11
     61a:	80 83       	st	Z, r24
}
     61c:	08 95       	ret

0000061e <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     61e:	ea e7       	ldi	r30, 0x7A	; 122
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     624:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     628:	80 e2       	ldi	r24, 0x20	; 32
     62a:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     62e:	80 e8       	ldi	r24, 0x80	; 128
     630:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     632:	86 e8       	ldi	r24, 0x86	; 134
     634:	80 83       	st	Z, r24
}
     636:	08 95       	ret

00000638 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
     638:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     63a:	88 30       	cpi	r24, 0x08	; 8
     63c:	18 f0       	brcs	.+6      	; 0x644 <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     63e:	88 e0       	ldi	r24, 0x08	; 8
     640:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;
	ADMUX= 0x20| Ch;
     644:	97 70       	andi	r25, 0x07	; 7
     646:	90 62       	ori	r25, 0x20	; 32
     648:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     64c:	80 91 7a 00 	lds	r24, 0x007A
     650:	80 64       	ori	r24, 0x40	; 64
     652:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     656:	80 91 7a 00 	lds	r24, 0x007A
     65a:	84 ff       	sbrs	r24, 4
     65c:	fc cf       	rjmp	.-8      	; 0x656 <ADC_Conversion+0x1e>
	a=ADCH;
     65e:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     662:	90 91 7a 00 	lds	r25, 0x007A
     666:	90 61       	ori	r25, 0x10	; 16
     668:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     66c:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     670:	08 95       	ret

00000672 <velocity>:
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     672:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     676:	60 93 2a 01 	sts	0x012A, r22
}
     67a:	08 95       	ret

0000067c <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	18 2f       	mov	r17, r24
     682:	06 2f       	mov	r16, r22
     684:	84 2f       	mov	r24, r20

    ADC_Value = ADC_Conversion(channel);
     686:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     68a:	48 2f       	mov	r20, r24
     68c:	80 93 1c 03 	sts	0x031C, r24
    lcd_print(row, coloumn, ADC_Value, 3);
     690:	81 2f       	mov	r24, r17
     692:	60 2f       	mov	r22, r16
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	23 e0       	ldi	r18, 0x03	; 3
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	0e 94 8d 01 	call	0x31a	; 0x31a <lcd_print>
}
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	08 95       	ret

000006a4 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6a4:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6a6:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6a8:	8f 70       	andi	r24, 0x0F	; 15
     6aa:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     6ac:	82 b9       	out	0x02, r24	; 2
}
     6ae:	08 95       	ret

000006b0 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6b0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6b2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6b4:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     6b6:	82 b9       	out	0x02, r24	; 2
}

void forward (void)
{
  motion_set (0x06);
}
     6b8:	08 95       	ret

000006ba <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6ba:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6bc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6be:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     6c0:	82 b9       	out	0x02, r24	; 2
}

void back(void)
{
    motion_set(0x09);
}
     6c2:	08 95       	ret

000006c4 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6c4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6c6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6c8:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     6ca:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     6cc:	08 95       	ret

000006ce <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6ce:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6d0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6d2:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     6d4:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     6d6:	08 95       	ret

000006d8 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6d8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6da:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6dc:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     6de:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    motion_set(0x04);
}
     6e0:	08 95       	ret

000006e2 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6e2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6e4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6e6:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     6e8:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    motion_set(0x02);
}
     6ea:	08 95       	ret

000006ec <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6ec:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6ee:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6f0:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     6f2:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    motion_set(0x01);
}
     6f4:	08 95       	ret

000006f6 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6f6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6f8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6fa:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     6fc:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    motion_set(0x08);
}
     6fe:	08 95       	ret

00000700 <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     700:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     702:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     704:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
    motion_set(0x00);
}
     706:	08 95       	ret

00000708 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
    float ReqdShaftCount = 0;
    unsigned long int ReqdShaftCountInt = 0;

    ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     710:	a0 e0       	ldi	r26, 0x00	; 0
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	bc 01       	movw	r22, r24
     716:	cd 01       	movw	r24, r26
     718:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__floatunsisf>
     71c:	28 e4       	ldi	r18, 0x48	; 72
     71e:	31 ee       	ldi	r19, 0xE1	; 225
     720:	42 e8       	ldi	r20, 0x82	; 130
     722:	50 e4       	ldi	r21, 0x40	; 64
     724:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__divsf3>
     728:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__fixunssfsi>
     72c:	7b 01       	movw	r14, r22
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	10 e0       	ldi	r17, 0x00	; 0
    ShaftCountRight = 0;
     732:	10 92 12 03 	sts	0x0312, r1
     736:	10 92 13 03 	sts	0x0313, r1
     73a:	10 92 14 03 	sts	0x0314, r1
     73e:	10 92 15 03 	sts	0x0315, r1
    ShaftCountLeft = 0;
     742:	10 92 0e 03 	sts	0x030E, r1
     746:	10 92 0f 03 	sts	0x030F, r1
     74a:	10 92 10 03 	sts	0x0310, r1
     74e:	10 92 11 03 	sts	0x0311, r1

    while (1)
    {
        if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     752:	80 91 12 03 	lds	r24, 0x0312
     756:	90 91 13 03 	lds	r25, 0x0313
     75a:	a0 91 14 03 	lds	r26, 0x0314
     75e:	b0 91 15 03 	lds	r27, 0x0315
     762:	20 91 0e 03 	lds	r18, 0x030E
     766:	30 91 0f 03 	lds	r19, 0x030F
     76a:	40 91 10 03 	lds	r20, 0x0310
     76e:	50 91 11 03 	lds	r21, 0x0311
     772:	8e 15       	cp	r24, r14
     774:	9f 05       	cpc	r25, r15
     776:	a0 07       	cpc	r26, r16
     778:	b1 07       	cpc	r27, r17
     77a:	28 f4       	brcc	.+10     	; 0x786 <angle_rotate+0x7e>
     77c:	2e 15       	cp	r18, r14
     77e:	3f 05       	cpc	r19, r15
     780:	40 07       	cpc	r20, r16
     782:	51 07       	cpc	r21, r17
     784:	30 f3       	brcs	.-52     	; 0x752 <angle_rotate+0x4a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     786:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     788:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     78a:	82 b9       	out	0x02, r24	; 2
    {
        if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
        break;
    }
    stop(); //Stop robot
}
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	08 95       	ret

00000796 <linear_distance_mm>:
{
    float ReqdShaftCount = 0;
    unsigned long int ReqdShaftCountInt = 0;

    ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     796:	a0 e0       	ldi	r26, 0x00	; 0
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__floatunsisf>
     7a2:	25 ee       	ldi	r18, 0xE5	; 229
     7a4:	30 ed       	ldi	r19, 0xD0	; 208
     7a6:	4a ea       	ldi	r20, 0xAA	; 170
     7a8:	50 e4       	ldi	r21, 0x40	; 64
     7aa:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__divsf3>
     7ae:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__fixunssfsi>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24

    ShaftCountRight = 0;
     7b6:	10 92 12 03 	sts	0x0312, r1
     7ba:	10 92 13 03 	sts	0x0313, r1
     7be:	10 92 14 03 	sts	0x0314, r1
     7c2:	10 92 15 03 	sts	0x0315, r1
    while(1)
    {
        if(ShaftCountRight > ReqdShaftCountInt)
     7c6:	80 91 12 03 	lds	r24, 0x0312
     7ca:	90 91 13 03 	lds	r25, 0x0313
     7ce:	a0 91 14 03 	lds	r26, 0x0314
     7d2:	b0 91 15 03 	lds	r27, 0x0315
     7d6:	28 17       	cp	r18, r24
     7d8:	39 07       	cpc	r19, r25
     7da:	4a 07       	cpc	r20, r26
     7dc:	5b 07       	cpc	r21, r27
     7de:	98 f7       	brcc	.-26     	; 0x7c6 <linear_distance_mm+0x30>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7e0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7e2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     7e4:	82 b9       	out	0x02, r24	; 2
        {
            break;
        }
    }
    stop(); //Stop robot
}
     7e6:	08 95       	ret

000007e8 <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7e8:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7ea:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7ec:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     7ee:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
    forward();
    linear_distance_mm(DistanceInMM);
     7f0:	0e 94 cb 03 	call	0x796	; 0x796 <linear_distance_mm>
}
     7f4:	08 95       	ret

000007f6 <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7f6:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7f8:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7fa:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     7fc:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees)
{
    // 88 pulses for 360 degrees rotation 4.090 degrees per count
    left(); //Turn left
    angle_rotate(Degrees);
     7fe:	0e 94 84 03 	call	0x708	; 0x708 <angle_rotate>
}
     802:	08 95       	ret

00000804 <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     804:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     806:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     808:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     80a:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
    // 88 pulses for 360 degrees rotation 4.090 degrees per count
    right(); //Turn right
    angle_rotate(Degrees);
     80c:	0e 94 84 03 	call	0x708	; 0x708 <angle_rotate>
}
     810:	08 95       	ret

00000812 <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     812:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     814:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     816:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     818:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_left(); //Turn soft left
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	0e 94 84 03 	call	0x708	; 0x708 <angle_rotate>
}
     822:	08 95       	ret

00000824 <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     824:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     826:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     828:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     82a:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_right();  //Turn soft right
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	0e 94 84 03 	call	0x708	; 0x708 <angle_rotate>
}
     834:	08 95       	ret

00000836 <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     836:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     838:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     83a:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     83c:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_left_2(); //Turn reverse soft left
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	0e 94 84 03 	call	0x708	; 0x708 <angle_rotate>
}
     846:	08 95       	ret

00000848 <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     848:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     84a:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     84c:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     84e:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
    // 176 pulses for 360 degrees rotation 2.045 degrees per count
    soft_right_2();  //Turn reverse soft right
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	0e 94 84 03 	call	0x708	; 0x708 <angle_rotate>
}
     858:	08 95       	ret

0000085a <line_follow>:

void line_follow() {
        Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     860:	80 93 0b 03 	sts	0x030B, r24
        Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     86a:	80 93 0c 03 	sts	0x030C, r24
        Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     874:	80 93 0d 03 	sts	0x030D, r24

       // flag=0;

        print_sensor(1,1,3);    //Prints value of White Line Sensor1
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	43 e0       	ldi	r20, 0x03	; 3
     87e:	0e 94 3e 03 	call	0x67c	; 0x67c <print_sensor>
        print_sensor(1,5,2);    //Prints Value of White Line Sensor2
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	65 e0       	ldi	r22, 0x05	; 5
     886:	42 e0       	ldi	r20, 0x02	; 2
     888:	0e 94 3e 03 	call	0x67c	; 0x67c <print_sensor>
        print_sensor(1,9,1);    //Prints Value of White Line Sensor3
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	69 e0       	ldi	r22, 0x09	; 9
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	0e 94 3e 03 	call	0x67c	; 0x67c <print_sensor>



        if(Center_white_line>=thr)
     896:	30 91 0c 03 	lds	r19, 0x030C
     89a:	90 91 00 02 	lds	r25, 0x0200
     89e:	39 17       	cp	r19, r25
     8a0:	60 f0       	brcs	.+24     	; 0x8ba <line_follow+0x60>
        {
            flag=1;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     8a8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     8aa:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     8ac:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     8ae:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     8b0:	8a ef       	ldi	r24, 0xFA	; 250
     8b2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     8b6:	80 93 2a 01 	sts	0x012A, r24
            flag=1;
            forward();
            velocity(250,250);
        }

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
     8ba:	20 91 0b 03 	lds	r18, 0x030B
     8be:	29 17       	cp	r18, r25
     8c0:	98 f4       	brcc	.+38     	; 0x8e8 <line_follow+0x8e>
     8c2:	80 91 0d 03 	lds	r24, 0x030D
     8c6:	89 17       	cp	r24, r25
     8c8:	78 f0       	brcs	.+30     	; 0x8e8 <line_follow+0x8e>
     8ca:	39 17       	cp	r19, r25
     8cc:	68 f4       	brcc	.+26     	; 0x8e8 <line_follow+0x8e>
        {
            flag=1;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     8d4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     8d6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     8d8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     8da:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     8dc:	86 e9       	ldi	r24, 0x96	; 150
     8de:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     8e2:	88 e7       	ldi	r24, 0x78	; 120
     8e4:	80 93 2a 01 	sts	0x012A, r24
            flag=1;
            forward();
            velocity(150,120);
        }

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
     8e8:	80 91 0d 03 	lds	r24, 0x030D
     8ec:	89 17       	cp	r24, r25
     8ee:	90 f4       	brcc	.+36     	; 0x914 <line_follow+0xba>
     8f0:	29 17       	cp	r18, r25
     8f2:	80 f0       	brcs	.+32     	; 0x914 <line_follow+0xba>
     8f4:	39 17       	cp	r19, r25
     8f6:	b0 f5       	brcc	.+108    	; 0x964 <line_follow+0x10a>
        {
            flag=1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     8fe:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     900:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     902:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     904:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     906:	88 e7       	ldi	r24, 0x78	; 120
     908:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     90c:	86 e9       	ldi	r24, 0x96	; 150
     90e:	80 93 2a 01 	sts	0x012A, r24
     912:	08 95       	ret
            flag=1;
            forward();
            velocity(120,150);
        }

        if(Center_white_line<thr && Left_white_line<thr && Right_white_line<thr)
     914:	39 17       	cp	r19, r25
     916:	30 f5       	brcc	.+76     	; 0x964 <line_follow+0x10a>
     918:	29 17       	cp	r18, r25
     91a:	20 f5       	brcc	.+72     	; 0x964 <line_follow+0x10a>
     91c:	89 17       	cp	r24, r25
     91e:	10 f5       	brcc	.+68     	; 0x964 <line_follow+0x10a>
        {
            //forward();
            if(flag<3){
     920:	90 91 0a 03 	lds	r25, 0x030A
     924:	93 30       	cpi	r25, 0x03	; 3
     926:	40 f0       	brcs	.+16     	; 0x938 <line_follow+0xde>
            right();
            velocity(min_vel,min_vel);
            flag++;
            }
            else if(flag<12){
     928:	9c 30       	cpi	r25, 0x0C	; 12
     92a:	20 f4       	brcc	.+8      	; 0x934 <line_follow+0xda>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     92c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     92e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     930:	85 60       	ori	r24, 0x05	; 5
     932:	05 c0       	rjmp	.+10     	; 0x93e <line_follow+0xe4>
            else if(flag<12){
            left();
            velocity(min_vel,min_vel);
            flag++;
            }
            else if(flag<15) {
     934:	9f 30       	cpi	r25, 0x0F	; 15
     936:	70 f4       	brcc	.+28     	; 0x954 <line_follow+0xfa>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     938:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     93a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     93c:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     93e:	82 b9       	out	0x02, r24	; 2
            velocity(min_vel,min_vel);
            flag++;
            }
            else if(flag<15) {
            right();
            velocity(min_vel,min_vel);
     940:	80 91 01 02 	lds	r24, 0x0201
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     944:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     948:	80 93 2a 01 	sts	0x012A, r24
            flag++;
            }
            else if(flag<15) {
            right();
            velocity(min_vel,min_vel);
            flag++;
     94c:	9f 5f       	subi	r25, 0xFF	; 255
     94e:	90 93 0a 03 	sts	0x030A, r25
     952:	08 95       	ret
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     954:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     956:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     958:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     95a:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     95c:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
     960:	10 92 2a 01 	sts	0x012A, r1
     964:	08 95       	ret

00000966 <line_follow_1>:
            velocity(0,0);
            }
        }
}

void line_follow_1(unsigned char wheel_speed) {
     966:	1f 93       	push	r17
     968:	18 2f       	mov	r17, r24
        Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     970:	80 93 0b 03 	sts	0x030B, r24
        Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     97a:	80 93 0c 03 	sts	0x030C, r24
        Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     984:	80 93 0d 03 	sts	0x030D, r24

       // flag=0;

        print_sensor(1,1,3);    //Prints value of White Line Sensor1
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	43 e0       	ldi	r20, 0x03	; 3
     98e:	0e 94 3e 03 	call	0x67c	; 0x67c <print_sensor>
        print_sensor(1,5,2);    //Prints Value of White Line Sensor2
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	65 e0       	ldi	r22, 0x05	; 5
     996:	42 e0       	ldi	r20, 0x02	; 2
     998:	0e 94 3e 03 	call	0x67c	; 0x67c <print_sensor>
        print_sensor(1,9,1);    //Prints Value of White Line Sensor3
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	69 e0       	ldi	r22, 0x09	; 9
     9a0:	41 e0       	ldi	r20, 0x01	; 1
     9a2:	0e 94 3e 03 	call	0x67c	; 0x67c <print_sensor>



        if(Center_white_line>=thr)
     9a6:	30 91 0c 03 	lds	r19, 0x030C
     9aa:	90 91 00 02 	lds	r25, 0x0200
     9ae:	39 17       	cp	r19, r25
     9b0:	58 f0       	brcs	.+22     	; 0x9c8 <line_follow_1+0x62>
        {
            flag=1;
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9b8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ba:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9bc:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     9be:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9c0:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
     9c4:	10 93 2a 01 	sts	0x012A, r17
            flag=1;
            forward();
            velocity(wheel_speed,wheel_speed);
        }

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
     9c8:	20 91 0b 03 	lds	r18, 0x030B
     9cc:	29 17       	cp	r18, r25
     9ce:	98 f4       	brcc	.+38     	; 0x9f6 <line_follow_1+0x90>
     9d0:	80 91 0d 03 	lds	r24, 0x030D
     9d4:	89 17       	cp	r24, r25
     9d6:	78 f0       	brcs	.+30     	; 0x9f6 <line_follow_1+0x90>
     9d8:	39 17       	cp	r19, r25
     9da:	68 f4       	brcc	.+26     	; 0x9f6 <line_follow_1+0x90>
        {
            flag=1;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9e2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9e4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9e6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     9e8:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9ea:	10 93 28 01 	sts	0x0128, r17

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
        {
            flag=1;
            forward();
            velocity(wheel_speed,wheel_speed-30);
     9ee:	1e 51       	subi	r17, 0x1E	; 30
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
	OCR5BL = (unsigned char)right_motor;
     9f0:	10 93 2a 01 	sts	0x012A, r17
     9f4:	12 5e       	subi	r17, 0xE2	; 226
            flag=1;
            forward();
            velocity(wheel_speed,wheel_speed-30);
        }

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
     9f6:	80 91 0d 03 	lds	r24, 0x030D
     9fa:	89 17       	cp	r24, r25
     9fc:	90 f4       	brcc	.+36     	; 0xa22 <line_follow_1+0xbc>
     9fe:	29 17       	cp	r18, r25
     a00:	80 f0       	brcs	.+32     	; 0xa22 <line_follow_1+0xbc>
     a02:	39 17       	cp	r19, r25
     a04:	b0 f5       	brcc	.+108    	; 0xa72 <line_follow_1+0x10c>
        {
            flag=1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a0c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a0e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a10:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     a12:	82 b9       	out	0x02, r24	; 2

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
        {
            flag=1;
            forward();
            velocity(wheel_speed-30,wheel_speed);
     a14:	1e 51       	subi	r17, 0x1E	; 30
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a16:	10 93 28 01 	sts	0x0128, r17
     a1a:	12 5e       	subi	r17, 0xE2	; 226
	OCR5BL = (unsigned char)right_motor;
     a1c:	10 93 2a 01 	sts	0x012A, r17
     a20:	28 c0       	rjmp	.+80     	; 0xa72 <line_follow_1+0x10c>
            flag=1;
            forward();
            velocity(wheel_speed-30,wheel_speed);
        }

        if(Center_white_line<thr && Left_white_line<thr && Right_white_line<thr)
     a22:	39 17       	cp	r19, r25
     a24:	30 f5       	brcc	.+76     	; 0xa72 <line_follow_1+0x10c>
     a26:	29 17       	cp	r18, r25
     a28:	20 f5       	brcc	.+72     	; 0xa72 <line_follow_1+0x10c>
     a2a:	89 17       	cp	r24, r25
     a2c:	10 f5       	brcc	.+68     	; 0xa72 <line_follow_1+0x10c>
        {
            //forward();
            if(flag<5){
     a2e:	90 91 0a 03 	lds	r25, 0x030A
     a32:	95 30       	cpi	r25, 0x05	; 5
     a34:	40 f0       	brcs	.+16     	; 0xa46 <line_follow_1+0xe0>
            right();
            velocity(min_vel,min_vel);
            flag++;
            }
            else if(flag<15){
     a36:	9f 30       	cpi	r25, 0x0F	; 15
     a38:	20 f4       	brcc	.+8      	; 0xa42 <line_follow_1+0xdc>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a3a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a3c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a3e:	85 60       	ori	r24, 0x05	; 5
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <line_follow_1+0xe6>
            else if(flag<15){
            left();
            velocity(min_vel,min_vel);
            flag++;
            }
            else if(flag<20) {
     a42:	94 31       	cpi	r25, 0x14	; 20
     a44:	70 f4       	brcc	.+28     	; 0xa62 <line_follow_1+0xfc>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a46:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a48:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a4a:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     a4c:	82 b9       	out	0x02, r24	; 2
            velocity(min_vel,min_vel);
            flag++;
            }
            else if(flag<20) {
            right();
            velocity(min_vel,min_vel);
     a4e:	80 91 01 02 	lds	r24, 0x0201
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a52:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     a56:	80 93 2a 01 	sts	0x012A, r24
            flag++;
            }
            else if(flag<20) {
            right();
            velocity(min_vel,min_vel);
            flag++;
     a5a:	9f 5f       	subi	r25, 0xFF	; 255
     a5c:	90 93 0a 03 	sts	0x030A, r25
     a60:	08 c0       	rjmp	.+16     	; 0xa72 <line_follow_1+0x10c>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a62:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a64:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a66:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     a68:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a6a:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
     a6e:	10 92 2a 01 	sts	0x012A, r1
            else{
            forward();
            velocity(0,0);
            }
        }
}
     a72:	1f 91       	pop	r17
     a74:	08 95       	ret

00000a76 <line_follow_back>:

void line_follow_back(unsigned char wheel_speed) {
     a76:	1f 93       	push	r17
     a78:	18 2f       	mov	r17, r24
        Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     a80:	80 93 0b 03 	sts	0x030B, r24
        Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     a8a:	80 93 0c 03 	sts	0x030C, r24
        Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     a94:	80 93 0d 03 	sts	0x030D, r24

       // flag=0;

        print_sensor(1,1,3);    //Prints value of White Line Sensor1
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	43 e0       	ldi	r20, 0x03	; 3
     a9e:	0e 94 3e 03 	call	0x67c	; 0x67c <print_sensor>
        print_sensor(1,5,2);    //Prints Value of White Line Sensor2
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	65 e0       	ldi	r22, 0x05	; 5
     aa6:	42 e0       	ldi	r20, 0x02	; 2
     aa8:	0e 94 3e 03 	call	0x67c	; 0x67c <print_sensor>
        print_sensor(1,9,1);    //Prints Value of White Line Sensor3
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	69 e0       	ldi	r22, 0x09	; 9
     ab0:	41 e0       	ldi	r20, 0x01	; 1
     ab2:	0e 94 3e 03 	call	0x67c	; 0x67c <print_sensor>



        if(Center_white_line>=thr)
     ab6:	30 91 0c 03 	lds	r19, 0x030C
     aba:	90 91 00 02 	lds	r25, 0x0200
     abe:	39 17       	cp	r19, r25
     ac0:	58 f0       	brcs	.+22     	; 0xad8 <line_follow_back+0x62>
        {
            flag=1;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ac8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     aca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     acc:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     ace:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ad0:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
     ad4:	10 93 2a 01 	sts	0x012A, r17
            flag=1;
            back();
            velocity(wheel_speed,wheel_speed);
        }

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
     ad8:	20 91 0b 03 	lds	r18, 0x030B
     adc:	29 17       	cp	r18, r25
     ade:	98 f4       	brcc	.+38     	; 0xb06 <line_follow_back+0x90>
     ae0:	80 91 0d 03 	lds	r24, 0x030D
     ae4:	89 17       	cp	r24, r25
     ae6:	78 f0       	brcs	.+30     	; 0xb06 <line_follow_back+0x90>
     ae8:	39 17       	cp	r19, r25
     aea:	68 f4       	brcc	.+26     	; 0xb06 <line_follow_back+0x90>
        {
            flag=1;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     af2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     af4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     af6:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     af8:	82 b9       	out	0x02, r24	; 2

        if((Left_white_line<thr)&&(Right_white_line>=thr) && (Center_white_line<thr))
        {
            flag=1;
            back();
            velocity(wheel_speed-30,wheel_speed);
     afa:	1e 51       	subi	r17, 0x1E	; 30
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     afc:	10 93 28 01 	sts	0x0128, r17
     b00:	12 5e       	subi	r17, 0xE2	; 226
	OCR5BL = (unsigned char)right_motor;
     b02:	10 93 2a 01 	sts	0x012A, r17
            flag=1;
            back();
            velocity(wheel_speed-30,wheel_speed);
        }

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
     b06:	80 91 0d 03 	lds	r24, 0x030D
     b0a:	89 17       	cp	r24, r25
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <line_follow_back+0xba>
     b0e:	29 17       	cp	r18, r25
     b10:	78 f0       	brcs	.+30     	; 0xb30 <line_follow_back+0xba>
     b12:	39 17       	cp	r19, r25
     b14:	a0 f5       	brcc	.+104    	; 0xb7e <line_follow_back+0x108>
        {
            flag=1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 0a 03 	sts	0x030A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b1c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b1e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b20:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     b22:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b24:	10 93 28 01 	sts	0x0128, r17

        if((Right_white_line<thr) && (Left_white_line>=thr)&&(Center_white_line<thr))
        {
            flag=1;
            back();
            velocity(wheel_speed,wheel_speed-30);
     b28:	1e 51       	subi	r17, 0x1E	; 30
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
	OCR5BL = (unsigned char)right_motor;
     b2a:	10 93 2a 01 	sts	0x012A, r17
     b2e:	27 c0       	rjmp	.+78     	; 0xb7e <line_follow_back+0x108>
            flag=1;
            back();
            velocity(wheel_speed,wheel_speed-30);
        }

        if(Center_white_line<thr && Left_white_line<thr && Right_white_line<thr)
     b30:	39 17       	cp	r19, r25
     b32:	28 f5       	brcc	.+74     	; 0xb7e <line_follow_back+0x108>
     b34:	29 17       	cp	r18, r25
     b36:	18 f5       	brcc	.+70     	; 0xb7e <line_follow_back+0x108>
     b38:	89 17       	cp	r24, r25
     b3a:	08 f5       	brcc	.+66     	; 0xb7e <line_follow_back+0x108>
        {
            //forward();
            if(flag<5){
     b3c:	90 91 0a 03 	lds	r25, 0x030A
     b40:	95 30       	cpi	r25, 0x05	; 5
     b42:	40 f0       	brcs	.+16     	; 0xb54 <line_follow_back+0xde>
            right();
            velocity(80,80);
            flag++;
            }
            else if(flag<15){
     b44:	9f 30       	cpi	r25, 0x0F	; 15
     b46:	20 f4       	brcc	.+8      	; 0xb50 <line_follow_back+0xda>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b48:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b4a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b4c:	85 60       	ori	r24, 0x05	; 5
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <line_follow_back+0xe4>
            else if(flag<15){
            left();
            velocity(80,80);
            flag++;
            }
            else if(flag<20) {
     b50:	94 31       	cpi	r25, 0x14	; 20
     b52:	68 f4       	brcc	.+26     	; 0xb6e <line_follow_back+0xf8>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b54:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b56:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b58:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     b5a:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b5c:	80 e5       	ldi	r24, 0x50	; 80
     b5e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     b62:	80 93 2a 01 	sts	0x012A, r24
            flag++;
            }
            else if(flag<20) {
            right();
            velocity(80,80);
            flag++;
     b66:	9f 5f       	subi	r25, 0xFF	; 255
     b68:	90 93 0a 03 	sts	0x030A, r25
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <line_follow_back+0x108>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b6e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b70:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b72:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     b74:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b76:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
     b7a:	10 92 2a 01 	sts	0x012A, r1
            else{
            forward();
            velocity(0,0);
            }
        }
}
     b7e:	1f 91       	pop	r17
     b80:	08 95       	ret

00000b82 <right_adjust>:

void right_adjust() {
    Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     b88:	80 93 0b 03 	sts	0x030B, r24
    Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     b92:	80 93 0c 03 	sts	0x030C, r24
    Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     b9c:	28 2f       	mov	r18, r24
     b9e:	80 93 0d 03 	sts	0x030D, r24

    while(1) {

        forward();
        velocity(250,220);
        if(Center_white_line>=thr && Left_white_line<thr && Right_white_line<thr)
     ba2:	40 91 0c 03 	lds	r20, 0x030C
     ba6:	90 91 00 02 	lds	r25, 0x0200
     baa:	30 91 0b 03 	lds	r19, 0x030B
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     bae:	6a ef       	ldi	r22, 0xFA	; 250
	OCR5BL = (unsigned char)right_motor;
     bb0:	5c ed       	ldi	r21, 0xDC	; 220
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     bb2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     bb4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     bb6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     bb8:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     bba:	60 93 28 01 	sts	0x0128, r22
	OCR5BL = (unsigned char)right_motor;
     bbe:	50 93 2a 01 	sts	0x012A, r21

    while(1) {

        forward();
        velocity(250,220);
        if(Center_white_line>=thr && Left_white_line<thr && Right_white_line<thr)
     bc2:	49 17       	cp	r20, r25
     bc4:	b0 f3       	brcs	.-20     	; 0xbb2 <right_adjust+0x30>
     bc6:	39 17       	cp	r19, r25
     bc8:	a0 f7       	brcc	.-24     	; 0xbb2 <right_adjust+0x30>
     bca:	29 17       	cp	r18, r25
     bcc:	90 f7       	brcc	.-28     	; 0xbb2 <right_adjust+0x30>
            break;
    }
}
     bce:	08 95       	ret

00000bd0 <left_adjust>:

void left_adjust() {
    Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     bd6:	80 93 0b 03 	sts	0x030B, r24
    Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     be0:	80 93 0c 03 	sts	0x030C, r24
    Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     bea:	28 2f       	mov	r18, r24
     bec:	80 93 0d 03 	sts	0x030D, r24

    while(1) {
        forward();
        velocity(220,250);
        if(Center_white_line>=thr && Left_white_line<thr && Right_white_line<thr)
     bf0:	40 91 0c 03 	lds	r20, 0x030C
     bf4:	90 91 00 02 	lds	r25, 0x0200
     bf8:	30 91 0b 03 	lds	r19, 0x030B
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     bfc:	6c ed       	ldi	r22, 0xDC	; 220
	OCR5BL = (unsigned char)right_motor;
     bfe:	5a ef       	ldi	r21, 0xFA	; 250
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c00:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c02:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c04:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c06:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c08:	60 93 28 01 	sts	0x0128, r22
	OCR5BL = (unsigned char)right_motor;
     c0c:	50 93 2a 01 	sts	0x012A, r21
    Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor

    while(1) {
        forward();
        velocity(220,250);
        if(Center_white_line>=thr && Left_white_line<thr && Right_white_line<thr)
     c10:	49 17       	cp	r20, r25
     c12:	b0 f3       	brcs	.-20     	; 0xc00 <left_adjust+0x30>
     c14:	39 17       	cp	r19, r25
     c16:	a0 f7       	brcc	.-24     	; 0xc00 <left_adjust+0x30>
     c18:	29 17       	cp	r18, r25
     c1a:	90 f7       	brcc	.-28     	; 0xc00 <left_adjust+0x30>
            break;
    }
}
     c1c:	08 95       	ret

00000c1e <servo1_pin_config>:


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     c1e:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     c20:	2d 9a       	sbi	0x05, 5	; 5
}
     c22:	08 95       	ret

00000c24 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     c24:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     c26:	2e 9a       	sbi	0x05, 6	; 5
}
     c28:	08 95       	ret

00000c2a <port_init1>:


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     c2a:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     c2c:	2d 9a       	sbi	0x05, 5	; 5
}

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     c2e:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     c30:	2e 9a       	sbi	0x05, 6	; 5
//Initialize the ports
void port_init1(void)
{
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
}
     c32:	08 95       	ret

00000c34 <timer1_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     c34:	e1 e8       	ldi	r30, 0x81	; 129
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     c3a:	8c ef       	ldi	r24, 0xFC	; 252
     c3c:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     c52:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     c56:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     c5a:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     c5e:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;
     c62:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     c66:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     c6a:	8b ea       	ldi	r24, 0xAB	; 171
     c6c:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     c70:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     c74:	8c e0       	ldi	r24, 0x0C	; 12
     c76:	80 83       	st	Z, r24
}
     c78:	08 95       	ret

00000c7a <init_devices>:
    }
}

void init_devices (void)
{
 	cli(); //Clears the global interrupts
     c7a:	f8 94       	cli
	port_init();
     c7c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <port_init>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
     c80:	ea e7       	ldi	r30, 0x7A	; 122
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     c86:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     c8a:	80 e2       	ldi	r24, 0x20	; 32
     c8c:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     c90:	80 e8       	ldi	r24, 0x80	; 128
     c92:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     c94:	86 e8       	ldi	r24, 0x86	; 134
     c96:	80 83       	st	Z, r24
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     c98:	e1 e2       	ldi	r30, 0x21	; 33
     c9a:	f1 e0       	ldi	r31, 0x01	; 1
     c9c:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     c9e:	9f ef       	ldi	r25, 0xFF	; 255
     ca0:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     caa:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     cae:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     cb2:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     cb6:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     cba:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     cbe:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     cc2:	89 ea       	ldi	r24, 0xA9	; 169
     cc4:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     cc8:	8b e0       	ldi	r24, 0x0B	; 11
     cca:	80 83       	st	Z, r24
}


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    cli(); //Clears the global interrupt
     ccc:	f8 94       	cli
    EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     cce:	ea e6       	ldi	r30, 0x6A	; 106
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	82 60       	ori	r24, 0x02	; 2
     cd6:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     cd8:	ec 9a       	sbi	0x1d, 4	; 29
    sei();   // Enables the global interrupt
     cda:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    cli(); //Clears the global interrupt
     cdc:	f8 94       	cli
    EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     cde:	ea e6       	ldi	r30, 0x6A	; 106
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	88 60       	ori	r24, 0x08	; 8
     ce6:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     ce8:	ed 9a       	sbi	0x1d, 5	; 29
    sei();   // Enables the global interrupt
     cea:	78 94       	sei


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     cec:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     cee:	2d 9a       	sbi	0x05, 5	; 5
}

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     cf0:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     cf2:	2e 9a       	sbi	0x05, 6	; 5
	adc_init();
	timer5_init();
    left_position_encoder_interrupt_init();
    right_position_encoder_interrupt_init();
	port_init1();
    timer1_init();
     cf4:	0e 94 1a 06 	call	0xc34	; 0xc34 <timer1_init>
}

//XBee*********************************************
void USART_init(void)
{
    UBRR0 = BRC;
     cf8:	8f e5       	ldi	r24, 0x5F	; 95
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	90 93 c5 00 	sts	0x00C5, r25
     d00:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0C = ((0<<USBS0)|(1 << UCSZ01)|(1<<UCSZ00));
     d04:	86 e0       	ldi	r24, 0x06	; 6
     d06:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = ((1<<RXEN0)|(1<<TXEN0));
     d0a:	88 e1       	ldi	r24, 0x18	; 24
     d0c:	80 93 c1 00 	sts	0x00C1, r24
    left_position_encoder_interrupt_init();
    right_position_encoder_interrupt_init();
	port_init1();
    timer1_init();
    USART_init();
	sei();   //Enables the global interrupts
     d10:	78 94       	sei
}
     d12:	08 95       	ret

00000d14 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
     d14:	10 92 89 00 	sts	0x0089, r1
 OCR1AL = (unsigned char) PositionPanServo;
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	bc 01       	movw	r22, r24
     d20:	cd 01       	movw	r24, r26
     d22:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__floatunsisf>
     d26:	2b e7       	ldi	r18, 0x7B	; 123
     d28:	34 e1       	ldi	r19, 0x14	; 20
     d2a:	4e ee       	ldi	r20, 0xEE	; 238
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__divsf3>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4c e0       	ldi	r20, 0x0C	; 12
     d38:	52 e4       	ldi	r21, 0x42	; 66
     d3a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__addsf3>
     d3e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__fixunssfsi>
     d42:	60 93 88 00 	sts	0x0088, r22
}
     d46:	08 95       	ret

00000d48 <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     d48:	10 92 8b 00 	sts	0x008B, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__floatunsisf>
     d5a:	2b e7       	ldi	r18, 0x7B	; 123
     d5c:	34 e1       	ldi	r19, 0x14	; 20
     d5e:	4e ee       	ldi	r20, 0xEE	; 238
     d60:	5f e3       	ldi	r21, 0x3F	; 63
     d62:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__divsf3>
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	4c e0       	ldi	r20, 0x0C	; 12
     d6c:	52 e4       	ldi	r21, 0x42	; 66
     d6e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__addsf3>
     d72:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__fixunssfsi>
     d76:	60 93 8a 00 	sts	0x008A, r22
}
     d7a:	08 95       	ret

00000d7c <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03;
     d7c:	83 e0       	ldi	r24, 0x03	; 3
     d7e:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	80 93 88 00 	sts	0x0088, r24
}
     d88:	08 95       	ret

00000d8a <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     d8a:	83 e0       	ldi	r24, 0x03	; 3
     d8c:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	80 93 8a 00 	sts	0x008A, r24
}
     d96:	08 95       	ret

00000d98 <pickup_1>:

    temp_fn();
	//traverse(1);
}

void pickup_1() {
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d9e:	8a ef       	ldi	r24, 0xFA	; 250
     da0:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     da4:	80 93 2a 01 	sts	0x012A, r24
	//traverse(1);
}

void pickup_1() {
	velocity(250,250);
    left_degrees(90);
     da8:	8a e5       	ldi	r24, 0x5A	; 90
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <left_degrees>
     db0:	88 ee       	ldi	r24, 0xE8	; 232
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	20 e7       	ldi	r18, 0x70	; 112
     db6:	31 e0       	ldi	r19, 0x01	; 1
     db8:	f9 01       	movw	r30, r18
     dba:	31 97       	sbiw	r30, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <pickup_1+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc0:	d9 f7       	brne	.-10     	; 0xdb8 <pickup_1+0x20>
     dc2:	93 e0       	ldi	r25, 0x03	; 3
{
    //while the transmit buffer is not empty loop
    while(!(UCSR0A & (1<<UDRE0)));

    //when the buffer is empty write data to the transmitted
    UDR0 = data;
     dc4:	32 e3       	ldi	r19, 0x32	; 50
}

void USART_send( unsigned char data)
{
    //while the transmit buffer is not empty loop
    while(!(UCSR0A & (1<<UDRE0)));
     dc6:	22 e7       	ldi	r18, 0x72	; 114
     dc8:	0c c0       	rjmp	.+24     	; 0xde2 <pickup_1+0x4a>
     dca:	80 91 c0 00 	lds	r24, 0x00C0
     dce:	85 ff       	sbrs	r24, 5
     dd0:	fc cf       	rjmp	.-8      	; 0xdca <pickup_1+0x32>

    //when the buffer is empty write data to the transmitted
    UDR0 = data;
     dd2:	30 93 c6 00 	sts	0x00C6, r19
}

void USART_send( unsigned char data)
{
    //while the transmit buffer is not empty loop
    while(!(UCSR0A & (1<<UDRE0)));
     dd6:	80 91 c0 00 	lds	r24, 0x00C0
     dda:	85 ff       	sbrs	r24, 5
     ddc:	fc cf       	rjmp	.-8      	; 0xdd6 <pickup_1+0x3e>

    //when the buffer is empty write data to the transmitted
    UDR0 = data;
     dde:	20 93 c6 00 	sts	0x00C6, r18
    left_degrees(90);
    _delay_ms(100);


    uint8_t x=3;//no. of repetitions
    while(x--) {
     de2:	91 50       	subi	r25, 0x01	; 1
     de4:	90 f7       	brcc	.-28     	; 0xdca <pickup_1+0x32>
        USART_send('r');
    }
    //ServoCode

 unsigned char i = 0;
 init_devices();
     de6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <init_devices>
     dea:	10 e0       	ldi	r17, 0x00	; 0
     dec:	c0 e7       	ldi	r28, 0x70	; 112
     dee:	d1 e0       	ldi	r29, 0x01	; 1

 for (i = 0; i <90; i++)
 {
  servo_1(i);
     df0:	81 2f       	mov	r24, r17
     df2:	0e 94 8a 06 	call	0xd14	; 0xd14 <servo_1>
     df6:	8c e2       	ldi	r24, 0x2C	; 44
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	fe 01       	movw	r30, r28
     dfc:	31 97       	sbiw	r30, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <pickup_1+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	d9 f7       	brne	.-10     	; 0xdfa <pickup_1+0x62>
    //ServoCode

 unsigned char i = 0;
 init_devices();

 for (i = 0; i <90; i++)
     e04:	1f 5f       	subi	r17, 0xFF	; 255
     e06:	1a 35       	cpi	r17, 0x5A	; 90
     e08:	99 f7       	brne	.-26     	; 0xdf0 <pickup_1+0x58>
     e0a:	80 e1       	ldi	r24, 0x10	; 16
     e0c:	97 e2       	ldi	r25, 0x27	; 39
     e0e:	20 e7       	ldi	r18, 0x70	; 112
     e10:	31 e0       	ldi	r19, 0x01	; 1
     e12:	f9 01       	movw	r30, r18
     e14:	31 97       	sbiw	r30, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <pickup_1+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e18:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1a:	d9 f7       	brne	.-10     	; 0xe12 <pickup_1+0x7a>
     e1c:	10 e0       	ldi	r17, 0x00	; 0
     e1e:	c0 e7       	ldi	r28, 0x70	; 112
     e20:	d1 e0       	ldi	r29, 0x01	; 1
  _delay_ms(30);
 }
_delay_ms(1000);
for (i = 0; i <90; i++)
 {
  servo_2(i);
     e22:	81 2f       	mov	r24, r17
     e24:	0e 94 a4 06 	call	0xd48	; 0xd48 <servo_2>
     e28:	8c e2       	ldi	r24, 0x2C	; 44
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	fe 01       	movw	r30, r28
     e2e:	31 97       	sbiw	r30, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <pickup_1+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e34:	d9 f7       	brne	.-10     	; 0xe2c <pickup_1+0x94>
 {
  servo_1(i);
  _delay_ms(30);
 }
_delay_ms(1000);
for (i = 0; i <90; i++)
     e36:	1f 5f       	subi	r17, 0xFF	; 255
     e38:	1a 35       	cpi	r17, 0x5A	; 90
     e3a:	99 f7       	brne	.-26     	; 0xe22 <pickup_1+0x8a>
     e3c:	80 ed       	ldi	r24, 0xD0	; 208
     e3e:	97 e0       	ldi	r25, 0x07	; 7
     e40:	20 e7       	ldi	r18, 0x70	; 112
     e42:	31 e0       	ldi	r19, 0x01	; 1
     e44:	f9 01       	movw	r30, r18
     e46:	31 97       	sbiw	r30, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <pickup_1+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4c:	d9 f7       	brne	.-10     	; 0xe44 <pickup_1+0xac>
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03;
     e4e:	93 e0       	ldi	r25, 0x03	; 3
     e50:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF; //Servo 1 off
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	80 93 88 00 	sts	0x0088, r24
}

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     e5a:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF; //Servo 2 off
     e5e:	80 93 8a 00 	sts	0x008A, r24
 servo_1_free();
 servo_2_free();

    //ServoCodeEnd

    right_degrees(90);
     e62:	8a e5       	ldi	r24, 0x5A	; 90
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 02 04 	call	0x804	; 0x804 <right_degrees>
     e6a:	88 ee       	ldi	r24, 0xE8	; 232
     e6c:	93 e0       	ldi	r25, 0x03	; 3
     e6e:	20 e7       	ldi	r18, 0x70	; 112
     e70:	31 e0       	ldi	r19, 0x01	; 1
     e72:	f9 01       	movw	r30, r18
     e74:	31 97       	sbiw	r30, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <pickup_1+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7a:	d9 f7       	brne	.-10     	; 0xe72 <pickup_1+0xda>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e7c:	86 e9       	ldi	r24, 0x96	; 150
     e7e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     e82:	80 93 2a 01 	sts	0x012A, r24
    //ServoCodeEnd

    right_degrees(90);
    _delay_ms(100);
	velocity(150,150);
}
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <traverse>:

	velocity(0,0);

}

void traverse(unsigned char pick_up) {
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	08 2f       	mov	r16, r24
    unsigned char rot,rot2,jn,temp,i;
    if(pick_up<7) {
     e9e:	87 30       	cpi	r24, 0x07	; 7
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <traverse+0x16>
     ea2:	dd c1       	rjmp	.+954    	; 0x125e <traverse+0x3d0>
        rot = (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	80 fd       	sbrc	r24, 0
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <traverse+0x22>
     eaa:	e0 2e       	mov	r14, r16
     eac:	e6 94       	lsr	r14
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <traverse+0x2a>
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	95 95       	asr	r25
     eb4:	87 95       	ror	r24
     eb6:	e8 2e       	mov	r14, r24
     eb8:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     eba:	42 e8       	ldi	r20, 0x82	; 130
     ebc:	d4 2e       	mov	r13, r20
	OCR5BL = (unsigned char)right_motor;
     ebe:	32 e3       	ldi	r19, 0x32	; 50
     ec0:	f3 2e       	mov	r15, r19
     ec2:	c0 e7       	ldi	r28, 0x70	; 112
     ec4:	d1 e0       	ldi	r29, 0x01	; 1
     ec6:	4d c0       	rjmp	.+154    	; 0xf62 <traverse+0xd4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ec8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     eca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ecc:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     ece:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ed0:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
     ed4:	f0 92 2a 01 	sts	0x012A, r15
     ed8:	80 e1       	ldi	r24, 0x10	; 16
     eda:	97 e2       	ldi	r25, 0x27	; 39
     edc:	fe 01       	movw	r30, r28
     ede:	31 97       	sbiw	r30, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <traverse+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee4:	d9 f7       	brne	.-10     	; 0xedc <traverse+0x4e>
void traverse(unsigned char pick_up) {
    unsigned char rot,rot2,jn,temp,i;
    if(pick_up<7) {
        rot = (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
            while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     eec:	90 91 00 02 	lds	r25, 0x0200
     ef0:	98 17       	cp	r25, r24
     ef2:	50 f3       	brcs	.-44     	; 0xec8 <traverse+0x3a>
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     efa:	90 91 00 02 	lds	r25, 0x0200
     efe:	98 17       	cp	r25, r24
     f00:	18 f3       	brcs	.-58     	; 0xec8 <traverse+0x3a>
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     f08:	90 91 00 02 	lds	r25, 0x0200
     f0c:	98 17       	cp	r25, r24
     f0e:	e0 f2       	brcs	.-72     	; 0xec8 <traverse+0x3a>
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <traverse+0x94>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f12:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f14:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     f16:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     f18:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f1a:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
     f1e:	f0 92 2a 01 	sts	0x012A, r15
                velocity(130,50);
				_delay_ms(1000);
            }
            //stop();
            //_delay_ms(100);
            while(ADC_Conversion(1)<thr&&ADC_Conversion(2)<thr&&ADC_Conversion(3)<thr) {
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     f28:	90 91 00 02 	lds	r25, 0x0200
     f2c:	89 17       	cp	r24, r25
     f2e:	70 f4       	brcc	.+28     	; 0xf4c <traverse+0xbe>
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     f36:	90 91 00 02 	lds	r25, 0x0200
     f3a:	89 17       	cp	r24, r25
     f3c:	38 f4       	brcc	.+14     	; 0xf4c <traverse+0xbe>
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     f44:	90 91 00 02 	lds	r25, 0x0200
     f48:	89 17       	cp	r24, r25
     f4a:	18 f3       	brcs	.-58     	; 0xf12 <traverse+0x84>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f4c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f4e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     f50:	82 b9       	out	0x02, r24	; 2
     f52:	88 ee       	ldi	r24, 0xE8	; 232
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	fe 01       	movw	r30, r28
     f58:	31 97       	sbiw	r30, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <traverse+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5e:	d9 f7       	brne	.-10     	; 0xf56 <traverse+0xc8>

void traverse(unsigned char pick_up) {
    unsigned char rot,rot2,jn,temp,i;
    if(pick_up<7) {
        rot = (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
     f60:	1f 5f       	subi	r17, 0xFF	; 255
     f62:	1e 15       	cp	r17, r14
     f64:	08 f4       	brcc	.+2      	; 0xf68 <traverse+0xda>
     f66:	bf cf       	rjmp	.-130    	; 0xee6 <traverse+0x58>
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <traverse+0xe0>
        stop();
        _delay_ms(50);
*/

        while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
            line_follow();
     f6a:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
        }// end while
        stop();
        _delay_ms(50);
*/

        while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     f74:	90 91 00 02 	lds	r25, 0x0200
     f78:	98 17       	cp	r25, r24
     f7a:	b8 f3       	brcs	.-18     	; 0xf6a <traverse+0xdc>
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     f82:	90 91 00 02 	lds	r25, 0x0200
     f86:	98 17       	cp	r25, r24
     f88:	80 f3       	brcs	.-32     	; 0xf6a <traverse+0xdc>
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     f90:	90 91 00 02 	lds	r25, 0x0200
     f94:	98 17       	cp	r25, r24
     f96:	48 f3       	brcs	.-46     	; 0xf6a <traverse+0xdc>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f98:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f9a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     f9c:	82 b9       	out	0x02, r24	; 2
     f9e:	84 ef       	ldi	r24, 0xF4	; 244
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	20 e7       	ldi	r18, 0x70	; 112
     fa4:	31 e0       	ldi	r19, 0x01	; 1
     fa6:	f9 01       	movw	r30, r18
     fa8:	31 97       	sbiw	r30, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <traverse+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fae:	d9 f7       	brne	.-10     	; 0xfa6 <traverse+0x118>
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <traverse+0x136>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     fb2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     fb4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     fb6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     fb8:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     fba:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
     fbe:	10 93 2a 01 	sts	0x012A, r17
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <traverse+0x13c>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     fc4:	22 e8       	ldi	r18, 0x82	; 130
     fc6:	f2 2e       	mov	r15, r18
	OCR5BL = (unsigned char)right_motor;
     fc8:	12 e3       	ldi	r17, 0x32	; 50
        while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
            line_follow();
        }
        stop();
        _delay_ms(50);
        while(ADC_Conversion(1)<thr && ADC_Conversion(2)<thr && ADC_Conversion(3)<thr){
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     fd0:	90 91 00 02 	lds	r25, 0x0200
     fd4:	89 17       	cp	r24, r25
     fd6:	70 f4       	brcc	.+28     	; 0xff4 <traverse+0x166>
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     fde:	90 91 00 02 	lds	r25, 0x0200
     fe2:	89 17       	cp	r24, r25
     fe4:	38 f4       	brcc	.+14     	; 0xff4 <traverse+0x166>
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
     fec:	90 91 00 02 	lds	r25, 0x0200
     ff0:	89 17       	cp	r24, r25
     ff2:	f8 f2       	brcs	.-66     	; 0xfb2 <traverse+0x124>
            forward();
            velocity(130,50);
        }

        temp = 2-(pick_up%2); // pickup point
     ff4:	01 70       	andi	r16, 0x01	; 1
     ff6:	12 e0       	ldi	r17, 0x02	; 2
     ff8:	10 1b       	sub	r17, r16
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ffa:	04 e6       	ldi	r16, 0x64	; 100
     ffc:	c0 e7       	ldi	r28, 0x70	; 112
     ffe:	d1 e0       	ldi	r29, 0x01	; 1
            velocity(130,50);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
    1000:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
            if(ADC_Conversion(3)>thr&&ADC_Conversion(2)>thr){
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    100a:	90 91 00 02 	lds	r25, 0x0200
    100e:	98 17       	cp	r25, r24
    1010:	b8 f7       	brcc	.-18     	; 0x1000 <traverse+0x172>
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1018:	90 91 00 02 	lds	r25, 0x0200
    101c:	98 17       	cp	r25, r24
    101e:	80 f7       	brcc	.-32     	; 0x1000 <traverse+0x172>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1020:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1022:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1024:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1026:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1028:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    102c:	00 93 2a 01 	sts	0x012A, r16
    1030:	84 ef       	ldi	r24, 0xF4	; 244
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	fe 01       	movw	r30, r28
    1036:	31 97       	sbiw	r30, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <traverse+0x1a8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103c:	d9 f7       	brne	.-10     	; 0x1034 <traverse+0x1a6>

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
            if(ADC_Conversion(3)>thr&&ADC_Conversion(2)>thr){
                temp--;
    103e:	11 50       	subi	r17, 0x01	; 1
            forward();
            velocity(130,50);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
    1040:	f9 f6       	brne	.-66     	; 0x1000 <traverse+0x172>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1042:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1044:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1046:	82 b9       	out	0x02, r24	; 2
    1048:	84 ef       	ldi	r24, 0xF4	; 244
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	20 e7       	ldi	r18, 0x70	; 112
    104e:	31 e0       	ldi	r19, 0x01	; 1
    1050:	f9 01       	movw	r30, r18
    1052:	31 97       	sbiw	r30, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <traverse+0x1c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	d9 f7       	brne	.-10     	; 0x1050 <traverse+0x1c2>
        }//end while

        stop();
        _delay_ms(50);

            pickup_1();
    105a:	0e 94 cc 06 	call	0xd98	; 0xd98 <pickup_1>
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <traverse+0x1d6>

        while(ADC_Conversion(1)<thr&&ADC_Conversion(2)>thr){
            line_follow();
    1060:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
        stop();
        _delay_ms(50);

            pickup_1();

        while(ADC_Conversion(1)<thr&&ADC_Conversion(2)>thr){
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    106a:	90 91 00 02 	lds	r25, 0x0200
    106e:	89 17       	cp	r24, r25
    1070:	88 f4       	brcc	.+34     	; 0x1094 <traverse+0x206>
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1078:	90 91 00 02 	lds	r25, 0x0200
    107c:	98 17       	cp	r25, r24
    107e:	80 f3       	brcs	.-32     	; 0x1060 <traverse+0x1d2>
    1080:	09 c0       	rjmp	.+18     	; 0x1094 <traverse+0x206>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1082:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1084:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1086:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1088:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    108a:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    108e:	10 93 2a 01 	sts	0x012A, r17
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <traverse+0x20a>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1094:	02 e8       	ldi	r16, 0x82	; 130
	OCR5BL = (unsigned char)right_motor;
    1096:	12 e3       	ldi	r17, 0x32	; 50
        while(ADC_Conversion(1)<thr&&ADC_Conversion(2)>thr){
            line_follow();
        }

        // may need some changes
        while(ADC_Conversion(3)>thr || ADC_Conversion(1)>thr || ADC_Conversion(2)<thr){
    1098:	83 e0       	ldi	r24, 0x03	; 3
    109a:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    109e:	90 91 00 02 	lds	r25, 0x0200
    10a2:	98 17       	cp	r25, r24
    10a4:	70 f3       	brcs	.-36     	; 0x1082 <traverse+0x1f4>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    10ac:	90 91 00 02 	lds	r25, 0x0200
    10b0:	98 17       	cp	r25, r24
    10b2:	38 f3       	brcs	.-50     	; 0x1082 <traverse+0x1f4>
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    10ba:	90 91 00 02 	lds	r25, 0x0200
    10be:	89 17       	cp	r24, r25
    10c0:	00 f3       	brcs	.-64     	; 0x1082 <traverse+0x1f4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    10c2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    10c4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    10c6:	82 b9       	out	0x02, r24	; 2
    10c8:	84 ef       	ldi	r24, 0xF4	; 244
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	20 e7       	ldi	r18, 0x70	; 112
    10ce:	31 e0       	ldi	r19, 0x01	; 1
    10d0:	f9 01       	movw	r30, r18
    10d2:	31 97       	sbiw	r30, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <traverse+0x244>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d8:	d9 f7       	brne	.-10     	; 0x10d0 <traverse+0x242>
    10da:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    10dc:	04 e6       	ldi	r16, 0x64	; 100
    10de:	c0 e7       	ldi	r28, 0x70	; 112
    10e0:	d1 e0       	ldi	r29, 0x01	; 1
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
            line_follow();
    10e2:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    10ec:	90 91 00 02 	lds	r25, 0x0200
    10f0:	98 17       	cp	r25, r24
    10f2:	b8 f7       	brcc	.-18     	; 0x10e2 <traverse+0x254>
    10f4:	83 e0       	ldi	r24, 0x03	; 3
    10f6:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    10fa:	90 91 00 02 	lds	r25, 0x0200
    10fe:	98 17       	cp	r25, r24
    1100:	80 f7       	brcc	.-32     	; 0x10e2 <traverse+0x254>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1102:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1104:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1106:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1108:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    110a:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    110e:	00 93 2a 01 	sts	0x012A, r16
    1112:	84 ef       	ldi	r24, 0xF4	; 244
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	fe 01       	movw	r30, r28
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <traverse+0x28a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111e:	d9 f7       	brne	.-10     	; 0x1116 <traverse+0x288>
        jn=2;

        while(jn) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
                jn--;
    1120:	11 50       	subi	r17, 0x01	; 1
        }
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
    1122:	f9 f6       	brne	.-66     	; 0x10e2 <traverse+0x254>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1124:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1126:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1128:	82 b9       	out	0x02, r24	; 2
    112a:	84 ef       	ldi	r24, 0xF4	; 244
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	20 e7       	ldi	r18, 0x70	; 112
    1130:	31 e0       	ldi	r19, 0x01	; 1
    1132:	f9 01       	movw	r30, r18
    1134:	31 97       	sbiw	r30, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <traverse+0x2a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113a:	d9 f7       	brne	.-10     	; 0x1132 <traverse+0x2a4>
        }//end while

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
    113c:	03 e0       	ldi	r16, 0x03	; 3
    113e:	0e 19       	sub	r16, r14
    1140:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1142:	92 e8       	ldi	r25, 0x82	; 130
    1144:	e9 2e       	mov	r14, r25
	OCR5BL = (unsigned char)right_motor;
    1146:	82 e3       	ldi	r24, 0x32	; 50
    1148:	f8 2e       	mov	r15, r24
    114a:	c0 e7       	ldi	r28, 0x70	; 112
    114c:	d1 e0       	ldi	r29, 0x01	; 1
    114e:	50 c0       	rjmp	.+160    	; 0x11f0 <traverse+0x362>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1150:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1152:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1154:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1156:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1158:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    115c:	f0 92 2a 01 	sts	0x012A, r15
        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
            while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1166:	90 91 00 02 	lds	r25, 0x0200
    116a:	98 17       	cp	r25, r24
    116c:	88 f3       	brcs	.-30     	; 0x1150 <traverse+0x2c2>
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1174:	90 91 00 02 	lds	r25, 0x0200
    1178:	98 17       	cp	r25, r24
    117a:	50 f3       	brcs	.-44     	; 0x1150 <traverse+0x2c2>
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1182:	90 91 00 02 	lds	r25, 0x0200
    1186:	98 17       	cp	r25, r24
    1188:	18 f3       	brcs	.-58     	; 0x1150 <traverse+0x2c2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    118a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    118c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    118e:	82 b9       	out	0x02, r24	; 2
    1190:	88 ee       	ldi	r24, 0xE8	; 232
    1192:	93 e0       	ldi	r25, 0x03	; 3
    1194:	fe 01       	movw	r30, r28
    1196:	31 97       	sbiw	r30, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <traverse+0x308>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119c:	d9 f7       	brne	.-10     	; 0x1194 <traverse+0x306>
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <traverse+0x322>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11a0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11a2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    11a4:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    11a6:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    11a8:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    11ac:	f0 92 2a 01 	sts	0x012A, r15
                forward();
                velocity(130,50);
            }
            stop();
            _delay_ms(100);
            while(ADC_Conversion(1)<thr&&ADC_Conversion(2)<thr&&ADC_Conversion(3)<thr) {
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    11b6:	90 91 00 02 	lds	r25, 0x0200
    11ba:	89 17       	cp	r24, r25
    11bc:	70 f4       	brcc	.+28     	; 0x11da <traverse+0x34c>
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    11c4:	90 91 00 02 	lds	r25, 0x0200
    11c8:	89 17       	cp	r24, r25
    11ca:	38 f4       	brcc	.+14     	; 0x11da <traverse+0x34c>
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    11d2:	90 91 00 02 	lds	r25, 0x0200
    11d6:	89 17       	cp	r24, r25
    11d8:	18 f3       	brcs	.-58     	; 0x11a0 <traverse+0x312>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11da:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11dc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    11de:	82 b9       	out	0x02, r24	; 2
    11e0:	88 ee       	ldi	r24, 0xE8	; 232
    11e2:	93 e0       	ldi	r25, 0x03	; 3
    11e4:	fe 01       	movw	r30, r28
    11e6:	31 97       	sbiw	r30, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <traverse+0x358>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ec:	d9 f7       	brne	.-10     	; 0x11e4 <traverse+0x356>

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
    11ee:	1f 5f       	subi	r17, 0xFF	; 255
    11f0:	10 17       	cp	r17, r16
    11f2:	08 f4       	brcc	.+2      	; 0x11f6 <traverse+0x368>
    11f4:	b5 cf       	rjmp	.-150    	; 0x1160 <traverse+0x2d2>
    11f6:	11 e0       	ldi	r17, 0x01	; 1
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
            line_follow();
    11f8:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr && ADC_Conversion(3)>thr) {
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1202:	90 91 00 02 	lds	r25, 0x0200
    1206:	98 17       	cp	r25, r24
    1208:	b8 f7       	brcc	.-18     	; 0x11f8 <traverse+0x36a>
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1210:	90 91 00 02 	lds	r25, 0x0200
    1214:	98 17       	cp	r25, r24
    1216:	80 f7       	brcc	.-32     	; 0x11f8 <traverse+0x36a>
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    121e:	90 91 00 02 	lds	r25, 0x0200
    1222:	98 17       	cp	r25, r24
    1224:	08 f4       	brcc	.+2      	; 0x1228 <traverse+0x39a>
                jn--;
    1226:	11 50       	subi	r17, 0x01	; 1
            stop();
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
    1228:	11 23       	and	r17, r17
    122a:	31 f7       	brne	.-52     	; 0x11f8 <traverse+0x36a>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    122c:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    122e:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1230:	88 b9       	out	0x08, r24	; 8
    1232:	88 e8       	ldi	r24, 0x88	; 136
    1234:	93 e1       	ldi	r25, 0x13	; 19
    1236:	20 e7       	ldi	r18, 0x70	; 112
    1238:	31 e0       	ldi	r19, 0x01	; 1
    123a:	f9 01       	movw	r30, r18
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <traverse+0x3ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1240:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	d9 f7       	brne	.-10     	; 0x123a <traverse+0x3ac>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1244:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1246:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1248:	88 b9       	out	0x08, r24	; 8
    124a:	88 e8       	ldi	r24, 0x88	; 136
    124c:	93 e1       	ldi	r25, 0x13	; 19
    124e:	20 e7       	ldi	r18, 0x70	; 112
    1250:	31 e0       	ldi	r19, 0x01	; 1
    1252:	f9 01       	movw	r30, r18
    1254:	31 97       	sbiw	r30, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <traverse+0x3c6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1258:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125a:	d9 f7       	brne	.-10     	; 0x1252 <traverse+0x3c4>
    125c:	11 c2       	rjmp	.+1058   	; 0x1680 <traverse+0x7f2>
        drop();

    } // end if

    else {
        rot = 7 - (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
    125e:	d8 2e       	mov	r13, r24
    1260:	d6 94       	lsr	r13
    1262:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1264:	b2 e3       	ldi	r27, 0x32	; 50
    1266:	eb 2e       	mov	r14, r27
	OCR5BL = (unsigned char)right_motor;
    1268:	a2 e8       	ldi	r26, 0x82	; 130
    126a:	fa 2e       	mov	r15, r26
    126c:	c0 e7       	ldi	r28, 0x70	; 112
    126e:	d1 e0       	ldi	r29, 0x01	; 1
    1270:	08 c0       	rjmp	.+16     	; 0x1282 <traverse+0x3f4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1272:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1274:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1276:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1278:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    127a:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    127e:	f0 92 2a 01 	sts	0x012A, r15
    } // end if

    else {
        rot = 7 - (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
            while(ADC_Conversion(1)>thr || ADC_Conversion(2)>thr || ADC_Conversion(3)>thr) {
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1288:	90 91 00 02 	lds	r25, 0x0200
    128c:	98 17       	cp	r25, r24
    128e:	88 f3       	brcs	.-30     	; 0x1272 <traverse+0x3e4>
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1296:	90 91 00 02 	lds	r25, 0x0200
    129a:	98 17       	cp	r25, r24
    129c:	50 f3       	brcs	.-44     	; 0x1272 <traverse+0x3e4>
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    12a4:	90 91 00 02 	lds	r25, 0x0200
    12a8:	98 17       	cp	r25, r24
    12aa:	18 f3       	brcs	.-58     	; 0x1272 <traverse+0x3e4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12ac:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12ae:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    12b0:	82 b9       	out	0x02, r24	; 2
    12b2:	88 ee       	ldi	r24, 0xE8	; 232
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	fe 01       	movw	r30, r28
    12b8:	31 97       	sbiw	r30, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <traverse+0x42a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12be:	d9 f7       	brne	.-10     	; 0x12b6 <traverse+0x428>
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <traverse+0x444>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12c2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12c4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    12c6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    12c8:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12ca:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    12ce:	f0 92 2a 01 	sts	0x012A, r15
                forward();
                velocity(50,130);
            }
            stop();
            _delay_ms(100);
            while(ADC_Conversion(1)<thr && ADC_Conversion(2)<thr && ADC_Conversion(3)<thr) {
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    12d8:	90 91 00 02 	lds	r25, 0x0200
    12dc:	89 17       	cp	r24, r25
    12de:	70 f4       	brcc	.+28     	; 0x12fc <traverse+0x46e>
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    12e6:	90 91 00 02 	lds	r25, 0x0200
    12ea:	89 17       	cp	r24, r25
    12ec:	38 f4       	brcc	.+14     	; 0x12fc <traverse+0x46e>
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    12f4:	90 91 00 02 	lds	r25, 0x0200
    12f8:	89 17       	cp	r24, r25
    12fa:	18 f3       	brcs	.-58     	; 0x12c2 <traverse+0x434>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12fc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12fe:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1300:	82 b9       	out	0x02, r24	; 2
    1302:	88 ee       	ldi	r24, 0xE8	; 232
    1304:	93 e0       	ldi	r25, 0x03	; 3
    1306:	fe 01       	movw	r30, r28
    1308:	31 97       	sbiw	r30, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <traverse+0x47a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	d9 f7       	brne	.-10     	; 0x1306 <traverse+0x478>

    } // end if

    else {
        rot = 7 - (pick_up%2==0)?(pick_up/2):(pick_up+1)/2;
        for(i=0;i<rot;i++) {
    1310:	1f 5f       	subi	r17, 0xFF	; 255
    1312:	1d 15       	cp	r17, r13
    1314:	08 f4       	brcc	.+2      	; 0x1318 <traverse+0x48a>
    1316:	b5 cf       	rjmp	.-150    	; 0x1282 <traverse+0x3f4>
    1318:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    131a:	f4 e6       	ldi	r31, 0x64	; 100
    131c:	ff 2e       	mov	r15, r31
    131e:	c0 e7       	ldi	r28, 0x70	; 112
    1320:	d1 e0       	ldi	r29, 0x01	; 1
            _delay_ms(100);
        }//end for

        jn=2;
        while(jn) {
            line_follow();
    1322:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    132c:	90 91 00 02 	lds	r25, 0x0200
    1330:	98 17       	cp	r25, r24
    1332:	b8 f7       	brcc	.-18     	; 0x1322 <traverse+0x494>
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    133a:	90 91 00 02 	lds	r25, 0x0200
    133e:	98 17       	cp	r25, r24
    1340:	80 f7       	brcc	.-32     	; 0x1322 <traverse+0x494>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1342:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1344:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1346:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1348:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    134a:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
    134e:	f0 92 2a 01 	sts	0x012A, r15
    1352:	84 ef       	ldi	r24, 0xF4	; 244
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	fe 01       	movw	r30, r28
    1358:	31 97       	sbiw	r30, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <traverse+0x4ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	d9 f7       	brne	.-10     	; 0x1356 <traverse+0x4c8>

        jn=2;
        while(jn) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
                jn--;
    1360:	11 50       	subi	r17, 0x01	; 1
            stop();
            _delay_ms(100);
        }//end for

        jn=2;
        while(jn) {
    1362:	f9 f6       	brne	.-66     	; 0x1322 <traverse+0x494>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1364:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1366:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1368:	82 b9       	out	0x02, r24	; 2
    136a:	84 ef       	ldi	r24, 0xF4	; 244
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	20 e7       	ldi	r18, 0x70	; 112
    1370:	31 e0       	ldi	r19, 0x01	; 1
    1372:	f9 01       	movw	r30, r18
    1374:	31 97       	sbiw	r30, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <traverse+0x4e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1378:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137a:	d9 f7       	brne	.-10     	; 0x1372 <traverse+0x4e4>
    137c:	09 c0       	rjmp	.+18     	; 0x1390 <traverse+0x502>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    137e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1380:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1382:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1384:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1386:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    138a:	10 93 2a 01 	sts	0x012A, r17
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <traverse+0x504>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1390:	14 e6       	ldi	r17, 0x64	; 100
            }
        }// end while
        stop();
        _delay_ms(50);

        while(ADC_Conversion(1)>thr || ADC_Conversion(2)>thr || ADC_Conversion(3)>thr) {
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1398:	90 91 00 02 	lds	r25, 0x0200
    139c:	98 17       	cp	r25, r24
    139e:	78 f3       	brcs	.-34     	; 0x137e <traverse+0x4f0>
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    13a6:	90 91 00 02 	lds	r25, 0x0200
    13aa:	98 17       	cp	r25, r24
    13ac:	40 f3       	brcs	.-48     	; 0x137e <traverse+0x4f0>
    13ae:	83 e0       	ldi	r24, 0x03	; 3
    13b0:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    13b4:	90 91 00 02 	lds	r25, 0x0200
    13b8:	98 17       	cp	r25, r24
    13ba:	08 f3       	brcs	.-62     	; 0x137e <traverse+0x4f0>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    13bc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    13be:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    13c0:	82 b9       	out	0x02, r24	; 2
    13c2:	84 ef       	ldi	r24, 0xF4	; 244
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	20 e7       	ldi	r18, 0x70	; 112
    13c8:	31 e0       	ldi	r19, 0x01	; 1
    13ca:	f9 01       	movw	r30, r18
    13cc:	31 97       	sbiw	r30, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <traverse+0x53e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d2:	d9 f7       	brne	.-10     	; 0x13ca <traverse+0x53c>
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <traverse+0x55a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    13d6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    13d8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    13da:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    13dc:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13de:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
    13e2:	10 93 2a 01 	sts	0x012A, r17
    13e6:	03 c0       	rjmp	.+6      	; 0x13ee <traverse+0x560>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13e8:	e2 e3       	ldi	r30, 0x32	; 50
    13ea:	fe 2e       	mov	r15, r30
	OCR5BL = (unsigned char)right_motor;
    13ec:	12 e8       	ldi	r17, 0x82	; 130
            forward();
            velocity(100,100);
        }
        stop();
        _delay_ms(50);
        while(ADC_Conversion(1)<thr && ADC_Conversion(2)<thr && ADC_Conversion(3)<thr){
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    13f4:	90 91 00 02 	lds	r25, 0x0200
    13f8:	89 17       	cp	r24, r25
    13fa:	70 f4       	brcc	.+28     	; 0x1418 <traverse+0x58a>
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1402:	90 91 00 02 	lds	r25, 0x0200
    1406:	89 17       	cp	r24, r25
    1408:	38 f4       	brcc	.+14     	; 0x1418 <traverse+0x58a>
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1410:	90 91 00 02 	lds	r25, 0x0200
    1414:	89 17       	cp	r24, r25
    1416:	f8 f2       	brcs	.-66     	; 0x13d6 <traverse+0x548>
            forward();
            velocity(50,130);
        }

        temp = 2-(pick_up%2); // pickup point
    1418:	01 70       	andi	r16, 0x01	; 1
    141a:	12 e0       	ldi	r17, 0x02	; 2
    141c:	10 1b       	sub	r17, r16
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    141e:	04 e6       	ldi	r16, 0x64	; 100
    1420:	c0 e7       	ldi	r28, 0x70	; 112
    1422:	d1 e0       	ldi	r29, 0x01	; 1
            velocity(50,130);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
    1424:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr){
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    142e:	90 91 00 02 	lds	r25, 0x0200
    1432:	98 17       	cp	r25, r24
    1434:	b8 f7       	brcc	.-18     	; 0x1424 <traverse+0x596>
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    143c:	90 91 00 02 	lds	r25, 0x0200
    1440:	98 17       	cp	r25, r24
    1442:	80 f7       	brcc	.-32     	; 0x1424 <traverse+0x596>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1444:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1446:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1448:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    144a:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    144c:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    1450:	00 93 2a 01 	sts	0x012A, r16
    1454:	84 ef       	ldi	r24, 0xF4	; 244
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	fe 01       	movw	r30, r28
    145a:	31 97       	sbiw	r30, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <traverse+0x5cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1460:	d9 f7       	brne	.-10     	; 0x1458 <traverse+0x5ca>

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr){
                temp--;
    1462:	11 50       	subi	r17, 0x01	; 1
            forward();
            velocity(50,130);
        }

        temp = 2-(pick_up%2); // pickup point
        while(temp) {
    1464:	f9 f6       	brne	.-66     	; 0x1424 <traverse+0x596>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1466:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1468:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    146a:	82 b9       	out	0x02, r24	; 2
    146c:	84 ef       	ldi	r24, 0xF4	; 244
    146e:	91 e0       	ldi	r25, 0x01	; 1
    1470:	20 e7       	ldi	r18, 0x70	; 112
    1472:	31 e0       	ldi	r19, 0x01	; 1
    1474:	f9 01       	movw	r30, r18
    1476:	31 97       	sbiw	r30, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <traverse+0x5e8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147c:	d9 f7       	brne	.-10     	; 0x1474 <traverse+0x5e6>
        }//end while

        stop();
        _delay_ms(50);
        //
            pickup_1();
    147e:	0e 94 cc 06 	call	0xd98	; 0xd98 <pickup_1>
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <traverse+0x5fa>
        //
        while(ADC_Conversion(3)<thr && ADC_Conversion(2)>thr){
            line_follow();
    1484:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
        stop();
        _delay_ms(50);
        //
            pickup_1();
        //
        while(ADC_Conversion(3)<thr && ADC_Conversion(2)>thr){
    1488:	83 e0       	ldi	r24, 0x03	; 3
    148a:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    148e:	90 91 00 02 	lds	r25, 0x0200
    1492:	89 17       	cp	r24, r25
    1494:	88 f4       	brcc	.+34     	; 0x14b8 <traverse+0x62a>
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    149c:	90 91 00 02 	lds	r25, 0x0200
    14a0:	98 17       	cp	r25, r24
    14a2:	80 f3       	brcs	.-32     	; 0x1484 <traverse+0x5f6>
    14a4:	09 c0       	rjmp	.+18     	; 0x14b8 <traverse+0x62a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14a6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14a8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    14aa:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    14ac:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14ae:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    14b2:	10 93 2a 01 	sts	0x012A, r17
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <traverse+0x62e>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14b8:	02 e3       	ldi	r16, 0x32	; 50
	OCR5BL = (unsigned char)right_motor;
    14ba:	12 e8       	ldi	r17, 0x82	; 130
        while(ADC_Conversion(3)<thr && ADC_Conversion(2)>thr){
            line_follow();
        }

        // may need some changes
        while(ADC_Conversion(3)>thr || ADC_Conversion(1)>thr || ADC_Conversion(2)<thr){
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    14c2:	90 91 00 02 	lds	r25, 0x0200
    14c6:	98 17       	cp	r25, r24
    14c8:	70 f3       	brcs	.-36     	; 0x14a6 <traverse+0x618>
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    14d0:	90 91 00 02 	lds	r25, 0x0200
    14d4:	98 17       	cp	r25, r24
    14d6:	38 f3       	brcs	.-50     	; 0x14a6 <traverse+0x618>
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    14de:	90 91 00 02 	lds	r25, 0x0200
    14e2:	89 17       	cp	r24, r25
    14e4:	00 f3       	brcs	.-64     	; 0x14a6 <traverse+0x618>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14e6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14e8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    14ea:	82 b9       	out	0x02, r24	; 2
    14ec:	84 ef       	ldi	r24, 0xF4	; 244
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	20 e7       	ldi	r18, 0x70	; 112
    14f2:	31 e0       	ldi	r19, 0x01	; 1
    14f4:	f9 01       	movw	r30, r18
    14f6:	31 97       	sbiw	r30, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <traverse+0x668>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	d9 f7       	brne	.-10     	; 0x14f4 <traverse+0x666>
    14fe:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1500:	04 e6       	ldi	r16, 0x64	; 100
    1502:	c0 e7       	ldi	r28, 0x70	; 112
    1504:	d1 e0       	ldi	r29, 0x01	; 1
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
            line_follow();
    1506:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1510:	90 91 00 02 	lds	r25, 0x0200
    1514:	98 17       	cp	r25, r24
    1516:	b8 f7       	brcc	.-18     	; 0x1506 <traverse+0x678>
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    151e:	90 91 00 02 	lds	r25, 0x0200
    1522:	98 17       	cp	r25, r24
    1524:	80 f7       	brcc	.-32     	; 0x1506 <traverse+0x678>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1526:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1528:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    152a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    152c:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    152e:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    1532:	00 93 2a 01 	sts	0x012A, r16
    1536:	84 ef       	ldi	r24, 0xF4	; 244
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	fe 01       	movw	r30, r28
    153c:	31 97       	sbiw	r30, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <traverse+0x6ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1540:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1542:	d9 f7       	brne	.-10     	; 0x153a <traverse+0x6ac>
        jn=2;

        while(jn) {
            line_follow();
            if(ADC_Conversion(1)>thr && ADC_Conversion(3)>thr) {
                jn--;
    1544:	11 50       	subi	r17, 0x01	; 1
        }
        stop();
        _delay_ms(50);
        jn=2;

        while(jn) {
    1546:	f9 f6       	brne	.-66     	; 0x1506 <traverse+0x678>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1548:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    154a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    154c:	82 b9       	out	0x02, r24	; 2
    154e:	84 ef       	ldi	r24, 0xF4	; 244
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	20 e7       	ldi	r18, 0x70	; 112
    1554:	31 e0       	ldi	r19, 0x01	; 1
    1556:	f9 01       	movw	r30, r18
    1558:	31 97       	sbiw	r30, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <traverse+0x6ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155e:	d9 f7       	brne	.-10     	; 0x1556 <traverse+0x6c8>
        }//end while

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
    1560:	03 e0       	ldi	r16, 0x03	; 3
    1562:	0d 19       	sub	r16, r13
    1564:	10 e0       	ldi	r17, 0x00	; 0
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1566:	72 e3       	ldi	r23, 0x32	; 50
    1568:	e7 2e       	mov	r14, r23
	OCR5BL = (unsigned char)right_motor;
    156a:	62 e8       	ldi	r22, 0x82	; 130
    156c:	f6 2e       	mov	r15, r22
    156e:	c0 e7       	ldi	r28, 0x70	; 112
    1570:	d1 e0       	ldi	r29, 0x01	; 1
    1572:	50 c0       	rjmp	.+160    	; 0x1614 <traverse+0x786>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1574:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1576:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1578:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    157a:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    157c:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    1580:	f0 92 2a 01 	sts	0x012A, r15
        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
            while(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr) {
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    158a:	90 91 00 02 	lds	r25, 0x0200
    158e:	98 17       	cp	r25, r24
    1590:	88 f3       	brcs	.-30     	; 0x1574 <traverse+0x6e6>
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1598:	90 91 00 02 	lds	r25, 0x0200
    159c:	98 17       	cp	r25, r24
    159e:	50 f3       	brcs	.-44     	; 0x1574 <traverse+0x6e6>
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    15a6:	90 91 00 02 	lds	r25, 0x0200
    15aa:	98 17       	cp	r25, r24
    15ac:	18 f3       	brcs	.-58     	; 0x1574 <traverse+0x6e6>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    15ae:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    15b0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    15b2:	82 b9       	out	0x02, r24	; 2
    15b4:	88 ee       	ldi	r24, 0xE8	; 232
    15b6:	93 e0       	ldi	r25, 0x03	; 3
    15b8:	fe 01       	movw	r30, r28
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <traverse+0x72c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c0:	d9 f7       	brne	.-10     	; 0x15b8 <traverse+0x72a>
    15c2:	08 c0       	rjmp	.+16     	; 0x15d4 <traverse+0x746>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    15c4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    15c6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    15c8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    15ca:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15cc:	e0 92 28 01 	sts	0x0128, r14
	OCR5BL = (unsigned char)right_motor;
    15d0:	f0 92 2a 01 	sts	0x012A, r15
                forward();
                velocity(50,130);
            }
            stop();
            _delay_ms(100);
            while(ADC_Conversion(1)<thr&&ADC_Conversion(2)<thr&&ADC_Conversion(3)<thr) {
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    15da:	90 91 00 02 	lds	r25, 0x0200
    15de:	89 17       	cp	r24, r25
    15e0:	70 f4       	brcc	.+28     	; 0x15fe <traverse+0x770>
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    15e8:	90 91 00 02 	lds	r25, 0x0200
    15ec:	89 17       	cp	r24, r25
    15ee:	38 f4       	brcc	.+14     	; 0x15fe <traverse+0x770>
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    15f6:	90 91 00 02 	lds	r25, 0x0200
    15fa:	89 17       	cp	r24, r25
    15fc:	18 f3       	brcs	.-58     	; 0x15c4 <traverse+0x736>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    15fe:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1600:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1602:	82 b9       	out	0x02, r24	; 2
    1604:	88 ee       	ldi	r24, 0xE8	; 232
    1606:	93 e0       	ldi	r25, 0x03	; 3
    1608:	fe 01       	movw	r30, r28
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <traverse+0x77c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1610:	d9 f7       	brne	.-10     	; 0x1608 <traverse+0x77a>

        stop();
        _delay_ms(50);

        rot2 = 3-rot;
        for(i=0;i<rot2;i++) {
    1612:	1f 5f       	subi	r17, 0xFF	; 255
    1614:	10 17       	cp	r17, r16
    1616:	08 f4       	brcc	.+2      	; 0x161a <traverse+0x78c>
    1618:	b5 cf       	rjmp	.-150    	; 0x1584 <traverse+0x6f6>
    161a:	11 e0       	ldi	r17, 0x01	; 1
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
            line_follow();
    161c:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
            if(ADC_Conversion(1)>thr && ADC_Conversion(2)>thr && ADC_Conversion(3)>thr) {
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1626:	90 91 00 02 	lds	r25, 0x0200
    162a:	98 17       	cp	r25, r24
    162c:	b8 f7       	brcc	.-18     	; 0x161c <traverse+0x78e>
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1634:	90 91 00 02 	lds	r25, 0x0200
    1638:	98 17       	cp	r25, r24
    163a:	80 f7       	brcc	.-32     	; 0x161c <traverse+0x78e>
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1642:	90 91 00 02 	lds	r25, 0x0200
    1646:	98 17       	cp	r25, r24
    1648:	08 f4       	brcc	.+2      	; 0x164c <traverse+0x7be>
                jn--;
    164a:	11 50       	subi	r17, 0x01	; 1
            stop();
            _delay_ms(100);
        }//end for

        jn = 1;
        while(jn) {
    164c:	11 23       	and	r17, r17
    164e:	31 f7       	brne	.-52     	; 0x161c <traverse+0x78e>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1650:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1652:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1654:	88 b9       	out	0x08, r24	; 8
    1656:	88 e8       	ldi	r24, 0x88	; 136
    1658:	93 e1       	ldi	r25, 0x13	; 19
    165a:	20 e7       	ldi	r18, 0x70	; 112
    165c:	31 e0       	ldi	r19, 0x01	; 1
    165e:	f9 01       	movw	r30, r18
    1660:	31 97       	sbiw	r30, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <traverse+0x7d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	d9 f7       	brne	.-10     	; 0x165e <traverse+0x7d0>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1668:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    166a:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    166c:	88 b9       	out	0x08, r24	; 8
    166e:	88 e8       	ldi	r24, 0x88	; 136
    1670:	93 e1       	ldi	r25, 0x13	; 19
    1672:	20 e7       	ldi	r18, 0x70	; 112
    1674:	31 e0       	ldi	r19, 0x01	; 1
    1676:	f9 01       	movw	r30, r18
    1678:	31 97       	sbiw	r30, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <traverse+0x7ea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167e:	d9 f7       	brne	.-10     	; 0x1676 <traverse+0x7e8>

        //
        drop();
        //
    }
}
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	df 90       	pop	r13
    168e:	08 95       	ret

00001690 <Sharp_GP2D12_estimation>:

unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
    float distance;
    unsigned int distanceInt;
    distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e0       	ldi	r26, 0x00	; 0
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__floatunsisf>
    169e:	2f ee       	ldi	r18, 0xEF	; 239
    16a0:	39 ec       	ldi	r19, 0xC9	; 201
    16a2:	43 e9       	ldi	r20, 0x93	; 147
    16a4:	5f e3       	ldi	r21, 0x3F	; 63
    16a6:	0e 94 1d 14 	call	0x283a	; 0x283a <pow>
    16aa:	9b 01       	movw	r18, r22
    16ac:	ac 01       	movw	r20, r24
    distanceInt = (int)distance;
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	80 e8       	ldi	r24, 0x80	; 128
    16b4:	9f e3       	ldi	r25, 0x3F	; 63
    16b6:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__divsf3>
    16ba:	2a e9       	ldi	r18, 0x9A	; 154
    16bc:	39 ef       	ldi	r19, 0xF9	; 249
    16be:	4e e2       	ldi	r20, 0x2E	; 46
    16c0:	55 e4       	ldi	r21, 0x45	; 69
    16c2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__mulsf3>
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e2       	ldi	r20, 0x20	; 32
    16cc:	51 e4       	ldi	r21, 0x41	; 65
    16ce:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__mulsf3>
    16d2:	0e 94 10 11 	call	0x2220	; 0x2220 <__fixsfsi>
    16d6:	88 27       	eor	r24, r24
    16d8:	77 fd       	sbrc	r23, 7
    16da:	80 95       	com	r24
    16dc:	98 2f       	mov	r25, r24
    16de:	0e 94 b2 10 	call	0x2164	; 0x2164 <__floatsisf>
    16e2:	0e 94 10 11 	call	0x2220	; 0x2220 <__fixsfsi>
    16e6:	9b 01       	movw	r18, r22
    16e8:	83 e0       	ldi	r24, 0x03	; 3
    16ea:	61 32       	cpi	r22, 0x21	; 33
    16ec:	78 07       	cpc	r23, r24
    16ee:	10 f0       	brcs	.+4      	; 0x16f4 <Sharp_GP2D12_estimation+0x64>
    16f0:	20 e2       	ldi	r18, 0x20	; 32
    16f2:	33 e0       	ldi	r19, 0x03	; 3
    if(distanceInt>800)
    {
        distanceInt=800;
    }
    return distanceInt;
}
    16f4:	c9 01       	movw	r24, r18
    16f6:	08 95       	ret

000016f8 <temp_fn>:
            break;
    }
}


void temp_fn() {
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29

    right_degrees(40);
    1702:	88 e2       	ldi	r24, 0x28	; 40
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 02 04 	call	0x804	; 0x804 <right_degrees>
    170a:	88 ee       	ldi	r24, 0xE8	; 232
    170c:	93 e0       	ldi	r25, 0x03	; 3
    170e:	20 e7       	ldi	r18, 0x70	; 112
    1710:	31 e0       	ldi	r19, 0x01	; 1
    1712:	f9 01       	movw	r30, r18
    1714:	31 97       	sbiw	r30, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <temp_fn+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1718:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	d9 f7       	brne	.-10     	; 0x1712 <temp_fn+0x1a>
    _delay_ms(100);

    while(1) {
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1722:	90 91 00 02 	lds	r25, 0x0200
    1726:	98 17       	cp	r25, r24
    1728:	88 f0       	brcs	.+34     	; 0x174c <temp_fn+0x54>
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1730:	90 91 00 02 	lds	r25, 0x0200
    1734:	98 17       	cp	r25, r24
    1736:	50 f0       	brcs	.+20     	; 0x174c <temp_fn+0x54>
    1738:	83 e0       	ldi	r24, 0x03	; 3
    173a:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    173e:	90 91 00 02 	lds	r25, 0x0200
    1742:	98 17       	cp	r25, r24
    1744:	58 f7       	brcc	.-42     	; 0x171c <temp_fn+0x24>
    1746:	02 c0       	rjmp	.+4      	; 0x174c <temp_fn+0x54>
            break;
    }
   // right_adjust();

    while(flag<15) {
    line_follow();
    1748:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
            break;
    }
   // right_adjust();

    while(flag<15) {
    174c:	80 91 0a 03 	lds	r24, 0x030A
    1750:	8f 30       	cpi	r24, 0x0F	; 15
    1752:	d0 f3       	brcs	.-12     	; 0x1748 <temp_fn+0x50>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1754:	14 e6       	ldi	r17, 0x64	; 100
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1756:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1758:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    175a:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    175c:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    175e:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    1762:	10 93 2a 01 	sts	0x012A, r17


	while(1) {
	right();
	velocity(100,100);
	if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    176c:	90 91 00 02 	lds	r25, 0x0200
    1770:	98 17       	cp	r25, r24
    1772:	38 f4       	brcc	.+14     	; 0x1782 <temp_fn+0x8a>
    1774:	13 e0       	ldi	r17, 0x03	; 3
    1776:	01 e0       	ldi	r16, 0x01	; 1
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1778:	74 e6       	ldi	r23, 0x64	; 100
    177a:	f7 2e       	mov	r15, r23
    177c:	c0 e7       	ldi	r28, 0x70	; 112
    177e:	d1 e0       	ldi	r29, 0x01	; 1
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <temp_fn+0xa8>


	while(1) {
	right();
	velocity(100,100);
	if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1788:	90 91 00 02 	lds	r25, 0x0200
    178c:	98 17       	cp	r25, r24
    178e:	90 f3       	brcs	.-28     	; 0x1774 <temp_fn+0x7c>
    1790:	83 e0       	ldi	r24, 0x03	; 3
    1792:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1796:	90 91 00 02 	lds	r25, 0x0200
    179a:	98 17       	cp	r25, r24
    179c:	e0 f6       	brcc	.-72     	; 0x1756 <temp_fn+0x5e>
    179e:	ea cf       	rjmp	.-44     	; 0x1774 <temp_fn+0x7c>
    //right_adjust();
    // A
    unsigned char count = 3;
    uint8_t turn=1;
    while(count) {
        line_follow_1(150);
    17a0:	86 e9       	ldi	r24, 0x96	; 150
    17a2:	0e 94 b3 04 	call	0x966	; 0x966 <line_follow_1>

        if(count==1&&turn==1){
    17a6:	11 30       	cpi	r17, 0x01	; 1
    17a8:	29 f4       	brne	.+10     	; 0x17b4 <temp_fn+0xbc>
    17aa:	01 30       	cpi	r16, 0x01	; 1
    17ac:	11 f4       	brne	.+4      	; 0x17b2 <temp_fn+0xba>
            pickup_1();
    17ae:	0e 94 cc 06 	call	0xd98	; 0xd98 <pickup_1>
    17b2:	00 e0       	ldi	r16, 0x00	; 0
            turn=0;
        }

        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    17ba:	90 91 00 02 	lds	r25, 0x0200
    17be:	98 17       	cp	r25, r24
    17c0:	38 f0       	brcs	.+14     	; 0x17d0 <temp_fn+0xd8>
    17c2:	83 e0       	ldi	r24, 0x03	; 3
    17c4:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    17c8:	90 91 00 02 	lds	r25, 0x0200
    17cc:	98 17       	cp	r25, r24
    17ce:	b8 f4       	brcc	.+46     	; 0x17fe <temp_fn+0x106>
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    17d6:	90 91 00 02 	lds	r25, 0x0200
    17da:	98 17       	cp	r25, r24
    17dc:	80 f4       	brcc	.+32     	; 0x17fe <temp_fn+0x106>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    17de:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    17e0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    17e2:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    17e4:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    17e6:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
    17ea:	f0 92 2a 01 	sts	0x012A, r15
    17ee:	80 e1       	ldi	r24, 0x10	; 16
    17f0:	97 e2       	ldi	r25, 0x27	; 39
    17f2:	fe 01       	movw	r30, r28
    17f4:	31 97       	sbiw	r30, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <temp_fn+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	d9 f7       	brne	.-10     	; 0x17f2 <temp_fn+0xfa>
            pickup_1();
            turn=0;
        }

        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
            count--;
    17fc:	11 50       	subi	r17, 0x01	; 1

    //right_adjust();
    // A
    unsigned char count = 3;
    uint8_t turn=1;
    while(count) {
    17fe:	11 23       	and	r17, r17
    1800:	79 f6       	brne	.-98     	; 0x17a0 <temp_fn+0xa8>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1802:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1804:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1806:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1808:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    180a:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
    180e:	10 92 2a 01 	sts	0x012A, r1
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1812:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1814:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1816:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1818:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    181a:	84 e6       	ldi	r24, 0x64	; 100
    181c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1820:	80 93 2a 01 	sts	0x012A, r24
    1824:	80 e2       	ldi	r24, 0x20	; 32
    1826:	9e e4       	ldi	r25, 0x4E	; 78
    1828:	20 e7       	ldi	r18, 0x70	; 112
    182a:	31 e0       	ldi	r19, 0x01	; 1
    182c:	f9 01       	movw	r30, r18
    182e:	31 97       	sbiw	r30, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <temp_fn+0x136>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1834:	d9 f7       	brne	.-10     	; 0x182c <temp_fn+0x134>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1836:	16 e9       	ldi	r17, 0x96	; 150
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1838:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    183a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    183c:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    183e:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1840:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char)right_motor;
    1844:	10 93 2a 01 	sts	0x012A, r17
	_delay_ms(2000);

    while(1) {
        right();
        velocity(150,150);
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    184e:	90 91 00 02 	lds	r25, 0x0200
    1852:	98 17       	cp	r25, r24
    1854:	28 f4       	brcc	.+10     	; 0x1860 <temp_fn+0x168>
    1856:	12 e0       	ldi	r17, 0x02	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1858:	04 e6       	ldi	r16, 0x64	; 100
    185a:	c0 e7       	ldi	r28, 0x70	; 112
    185c:	d1 e0       	ldi	r29, 0x01	; 1
    185e:	0f c0       	rjmp	.+30     	; 0x187e <temp_fn+0x186>
	_delay_ms(2000);

    while(1) {
        right();
        velocity(150,150);
        if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1866:	90 91 00 02 	lds	r25, 0x0200
    186a:	98 17       	cp	r25, r24
    186c:	a0 f3       	brcs	.-24     	; 0x1856 <temp_fn+0x15e>
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1874:	90 91 00 02 	lds	r25, 0x0200
    1878:	98 17       	cp	r25, r24
    187a:	f0 f6       	brcc	.-68     	; 0x1838 <temp_fn+0x140>
    187c:	ec cf       	rjmp	.-40     	; 0x1856 <temp_fn+0x15e>
   // right_adjust();

    count = 2;

    while(count) {
        line_follow();
    187e:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1888:	90 91 00 02 	lds	r25, 0x0200
    188c:	98 17       	cp	r25, r24
    188e:	38 f0       	brcs	.+14     	; 0x189e <temp_fn+0x1a6>
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1896:	90 91 00 02 	lds	r25, 0x0200
    189a:	98 17       	cp	r25, r24
    189c:	b8 f4       	brcc	.+46     	; 0x18cc <temp_fn+0x1d4>
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    18a4:	90 91 00 02 	lds	r25, 0x0200
    18a8:	98 17       	cp	r25, r24
    18aa:	80 f4       	brcc	.+32     	; 0x18cc <temp_fn+0x1d4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    18ac:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    18ae:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    18b0:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    18b2:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    18b4:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    18b8:	00 93 2a 01 	sts	0x012A, r16
    18bc:	80 e1       	ldi	r24, 0x10	; 16
    18be:	97 e2       	ldi	r25, 0x27	; 39
    18c0:	fe 01       	movw	r30, r28
    18c2:	31 97       	sbiw	r30, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <temp_fn+0x1ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	d9 f7       	brne	.-10     	; 0x18c0 <temp_fn+0x1c8>
    count = 2;

    while(count) {
        line_follow();
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
            count--;
    18ca:	11 50       	subi	r17, 0x01	; 1

   // right_adjust();

    count = 2;

    while(count) {
    18cc:	11 23       	and	r17, r17
    18ce:	b9 f6       	brne	.-82     	; 0x187e <temp_fn+0x186>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    18d0:	64 e6       	ldi	r22, 0x64	; 100
    18d2:	f6 2e       	mov	r15, r22
    18d4:	c0 e7       	ldi	r28, 0x70	; 112
    18d6:	d1 e0       	ldi	r29, 0x01	; 1
    18d8:	06 e9       	ldi	r16, 0x96	; 150
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    18da:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    18dc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    18de:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    18e0:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    18e2:	f0 92 28 01 	sts	0x0128, r15
	OCR5BL = (unsigned char)right_motor;
    18e6:	f0 92 2a 01 	sts	0x012A, r15
    18ea:	80 e1       	ldi	r24, 0x10	; 16
    18ec:	97 e2       	ldi	r25, 0x27	; 39
    18ee:	fe 01       	movw	r30, r28
    18f0:	31 97       	sbiw	r30, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <temp_fn+0x1f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	d9 f7       	brne	.-10     	; 0x18ee <temp_fn+0x1f6>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    18f8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    18fa:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    18fc:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    18fe:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1900:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    1904:	00 93 2a 01 	sts	0x012A, r16
        _delay_ms(1000);

        while(1) {
            right();
            velocity(150,150);
            if(ADC_Conversion(1)>thr||ADC_Conversion(2)>thr||ADC_Conversion(3)>thr)
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    190e:	90 91 00 02 	lds	r25, 0x0200
    1912:	98 17       	cp	r25, r24
    1914:	70 f0       	brcs	.+28     	; 0x1932 <temp_fn+0x23a>
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    191c:	90 91 00 02 	lds	r25, 0x0200
    1920:	98 17       	cp	r25, r24
    1922:	38 f0       	brcs	.+14     	; 0x1932 <temp_fn+0x23a>
    1924:	83 e0       	ldi	r24, 0x03	; 3
    1926:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    192a:	90 91 00 02 	lds	r25, 0x0200
    192e:	98 17       	cp	r25, r24
    1930:	18 f7       	brcc	.-58     	; 0x18f8 <temp_fn+0x200>
            _delay_ms(1000);
        }
    }

    unsigned char i=0;
    for(i=0;i<2;i++) {
    1932:	1f 5f       	subi	r17, 0xFF	; 255
    1934:	12 30       	cpi	r17, 0x02	; 2
    1936:	89 f6       	brne	.-94     	; 0x18da <temp_fn+0x1e2>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1938:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    193a:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    193c:	88 b9       	out	0x08, r24	; 8
    193e:	88 ee       	ldi	r24, 0xE8	; 232
    1940:	93 e0       	ldi	r25, 0x03	; 3
    1942:	20 e7       	ldi	r18, 0x70	; 112
    1944:	31 e0       	ldi	r19, 0x01	; 1
    1946:	f9 01       	movw	r30, r18
    1948:	31 97       	sbiw	r30, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <temp_fn+0x250>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194e:	d9 f7       	brne	.-10     	; 0x1946 <temp_fn+0x24e>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1950:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1952:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1954:	88 b9       	out	0x08, r24	; 8
    1956:	88 ee       	ldi	r24, 0xE8	; 232
    1958:	93 e0       	ldi	r25, 0x03	; 3
    195a:	20 e7       	ldi	r18, 0x70	; 112
    195c:	31 e0       	ldi	r19, 0x01	; 1
    195e:	f9 01       	movw	r30, r18
    1960:	31 97       	sbiw	r30, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <temp_fn+0x268>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1964:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1966:	d9 f7       	brne	.-10     	; 0x195e <temp_fn+0x266>
    1968:	11 e0       	ldi	r17, 0x01	; 1
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    196a:	04 e6       	ldi	r16, 0x64	; 100
    196c:	c0 e7       	ldi	r28, 0x70	; 112
    196e:	d1 e0       	ldi	r29, 0x01	; 1
	//velocity(0,0);

    // S
    count = 1;
     while(count) {
        line_follow();
    1970:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    197a:	90 91 00 02 	lds	r25, 0x0200
    197e:	98 17       	cp	r25, r24
    1980:	38 f0       	brcs	.+14     	; 0x1990 <temp_fn+0x298>
    1982:	83 e0       	ldi	r24, 0x03	; 3
    1984:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1988:	90 91 00 02 	lds	r25, 0x0200
    198c:	98 17       	cp	r25, r24
    198e:	b8 f4       	brcc	.+46     	; 0x19be <temp_fn+0x2c6>
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    1996:	90 91 00 02 	lds	r25, 0x0200
    199a:	98 17       	cp	r25, r24
    199c:	80 f4       	brcc	.+32     	; 0x19be <temp_fn+0x2c6>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    199e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    19a0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    19a2:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    19a4:	82 b9       	out	0x02, r24	; 2
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    19a6:	00 93 28 01 	sts	0x0128, r16
	OCR5BL = (unsigned char)right_motor;
    19aa:	00 93 2a 01 	sts	0x012A, r16
    19ae:	80 e1       	ldi	r24, 0x10	; 16
    19b0:	97 e2       	ldi	r25, 0x27	; 39
    19b2:	fe 01       	movw	r30, r28
    19b4:	31 97       	sbiw	r30, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <temp_fn+0x2bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	d9 f7       	brne	.-10     	; 0x19b2 <temp_fn+0x2ba>
    // S
    count = 1;
     while(count) {
        line_follow();
        if((ADC_Conversion(1)>thr || ADC_Conversion(3)>thr) && ADC_Conversion(2)>thr ) {
            count--;
    19bc:	11 50       	subi	r17, 0x01	; 1
    _delay_ms(100);
	//velocity(0,0);

    // S
    count = 1;
     while(count) {
    19be:	11 23       	and	r17, r17
    19c0:	b9 f6       	brne	.-82     	; 0x1970 <temp_fn+0x278>
    while(count){
        line_follow();
        count--;
    }*/

    unsigned int adc_reading = ADC_Conversion(11);
    19c2:	8b e0       	ldi	r24, 0x0B	; 11
    19c4:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
    unsigned int sharp=Sharp_GP2D12_estimation(adc_reading);
    19c8:	0e 94 48 0b 	call	0x1690	; 0x1690 <Sharp_GP2D12_estimation>

	while(sharp>100){
    19cc:	85 36       	cpi	r24, 0x65	; 101
    19ce:	91 05       	cpc	r25, r1
    19d0:	40 f0       	brcs	.+16     	; 0x19e2 <temp_fn+0x2ea>

		 unsigned int adc_reading = ADC_Conversion(11);
    19d2:	8b e0       	ldi	r24, 0x0B	; 11
    19d4:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_Conversion>
   		 unsigned int sharp=Sharp_GP2D12_estimation(adc_reading);
    19d8:	0e 94 48 0b 	call	0x1690	; 0x1690 <Sharp_GP2D12_estimation>

		line_follow();
    19dc:	0e 94 2d 04 	call	0x85a	; 0x85a <line_follow>
    19e0:	f8 cf       	rjmp	.-16     	; 0x19d2 <temp_fn+0x2da>
}
*/
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    19e2:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
    19e6:	10 92 2a 01 	sts	0x012A, r1
	}


	velocity(0,0);

}
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	08 95       	ret

000019f6 <main>:


//Main Function
int main()
{
	init_devices();
    19f6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <init_devices>
	lcd_set_4bit();
    19fa:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    19fe:	0e 94 29 01 	call	0x252	; 0x252 <lcd_init>

    temp_fn();
    1a02:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <temp_fn>
	//traverse(1);
}
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	08 95       	ret

00001a0c <__fixunssfsi>:
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	7b 01       	movw	r14, r22
    1a16:	8c 01       	movw	r16, r24
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	5f e4       	ldi	r21, 0x4F	; 79
    1a20:	0e 94 82 10 	call	0x2104	; 0x2104 <__gesf2>
    1a24:	88 23       	and	r24, r24
    1a26:	8c f0       	brlt	.+34     	; 0x1a4a <__fixunssfsi+0x3e>
    1a28:	c8 01       	movw	r24, r16
    1a2a:	b7 01       	movw	r22, r14
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	5f e4       	ldi	r21, 0x4F	; 79
    1a34:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__subsf3>
    1a38:	0e 94 10 11 	call	0x2220	; 0x2220 <__fixsfsi>
    1a3c:	9b 01       	movw	r18, r22
    1a3e:	ac 01       	movw	r20, r24
    1a40:	20 50       	subi	r18, 0x00	; 0
    1a42:	30 40       	sbci	r19, 0x00	; 0
    1a44:	40 40       	sbci	r20, 0x00	; 0
    1a46:	50 48       	sbci	r21, 0x80	; 128
    1a48:	06 c0       	rjmp	.+12     	; 0x1a56 <__fixunssfsi+0x4a>
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	b7 01       	movw	r22, r14
    1a4e:	0e 94 10 11 	call	0x2220	; 0x2220 <__fixsfsi>
    1a52:	9b 01       	movw	r18, r22
    1a54:	ac 01       	movw	r20, r24
    1a56:	b9 01       	movw	r22, r18
    1a58:	ca 01       	movw	r24, r20
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15
    1a60:	ef 90       	pop	r14
    1a62:	08 95       	ret

00001a64 <_fpadd_parts>:
    1a64:	a0 e0       	ldi	r26, 0x00	; 0
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e8 e3       	ldi	r30, 0x38	; 56
    1a6a:	fd e0       	ldi	r31, 0x0D	; 13
    1a6c:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__>
    1a70:	dc 01       	movw	r26, r24
    1a72:	2b 01       	movw	r4, r22
    1a74:	fa 01       	movw	r30, r20
    1a76:	9c 91       	ld	r25, X
    1a78:	92 30       	cpi	r25, 0x02	; 2
    1a7a:	08 f4       	brcc	.+2      	; 0x1a7e <_fpadd_parts+0x1a>
    1a7c:	39 c1       	rjmp	.+626    	; 0x1cf0 <_fpadd_parts+0x28c>
    1a7e:	eb 01       	movw	r28, r22
    1a80:	88 81       	ld	r24, Y
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <_fpadd_parts+0x24>
    1a86:	33 c1       	rjmp	.+614    	; 0x1cee <_fpadd_parts+0x28a>
    1a88:	94 30       	cpi	r25, 0x04	; 4
    1a8a:	69 f4       	brne	.+26     	; 0x1aa6 <_fpadd_parts+0x42>
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <_fpadd_parts+0x2e>
    1a90:	2f c1       	rjmp	.+606    	; 0x1cf0 <_fpadd_parts+0x28c>
    1a92:	11 96       	adiw	r26, 0x01	; 1
    1a94:	9c 91       	ld	r25, X
    1a96:	11 97       	sbiw	r26, 0x01	; 1
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	98 17       	cp	r25, r24
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <_fpadd_parts+0x3c>
    1a9e:	28 c1       	rjmp	.+592    	; 0x1cf0 <_fpadd_parts+0x28c>
    1aa0:	a2 e0       	ldi	r26, 0x02	; 2
    1aa2:	b2 e0       	ldi	r27, 0x02	; 2
    1aa4:	25 c1       	rjmp	.+586    	; 0x1cf0 <_fpadd_parts+0x28c>
    1aa6:	84 30       	cpi	r24, 0x04	; 4
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <_fpadd_parts+0x48>
    1aaa:	21 c1       	rjmp	.+578    	; 0x1cee <_fpadd_parts+0x28a>
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	a9 f4       	brne	.+42     	; 0x1ada <_fpadd_parts+0x76>
    1ab0:	92 30       	cpi	r25, 0x02	; 2
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <_fpadd_parts+0x52>
    1ab4:	1d c1       	rjmp	.+570    	; 0x1cf0 <_fpadd_parts+0x28c>
    1ab6:	9a 01       	movw	r18, r20
    1ab8:	ad 01       	movw	r20, r26
    1aba:	88 e0       	ldi	r24, 0x08	; 8
    1abc:	ea 01       	movw	r28, r20
    1abe:	09 90       	ld	r0, Y+
    1ac0:	ae 01       	movw	r20, r28
    1ac2:	e9 01       	movw	r28, r18
    1ac4:	09 92       	st	Y+, r0
    1ac6:	9e 01       	movw	r18, r28
    1ac8:	81 50       	subi	r24, 0x01	; 1
    1aca:	c1 f7       	brne	.-16     	; 0x1abc <_fpadd_parts+0x58>
    1acc:	e2 01       	movw	r28, r4
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	11 96       	adiw	r26, 0x01	; 1
    1ad2:	9c 91       	ld	r25, X
    1ad4:	89 23       	and	r24, r25
    1ad6:	81 83       	std	Z+1, r24	; 0x01
    1ad8:	08 c1       	rjmp	.+528    	; 0x1cea <_fpadd_parts+0x286>
    1ada:	92 30       	cpi	r25, 0x02	; 2
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <_fpadd_parts+0x7c>
    1ade:	07 c1       	rjmp	.+526    	; 0x1cee <_fpadd_parts+0x28a>
    1ae0:	12 96       	adiw	r26, 0x02	; 2
    1ae2:	2d 90       	ld	r2, X+
    1ae4:	3c 90       	ld	r3, X
    1ae6:	13 97       	sbiw	r26, 0x03	; 3
    1ae8:	eb 01       	movw	r28, r22
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	9b 81       	ldd	r25, Y+3	; 0x03
    1aee:	14 96       	adiw	r26, 0x04	; 4
    1af0:	ad 90       	ld	r10, X+
    1af2:	bd 90       	ld	r11, X+
    1af4:	cd 90       	ld	r12, X+
    1af6:	dc 90       	ld	r13, X
    1af8:	17 97       	sbiw	r26, 0x07	; 7
    1afa:	ec 80       	ldd	r14, Y+4	; 0x04
    1afc:	fd 80       	ldd	r15, Y+5	; 0x05
    1afe:	0e 81       	ldd	r16, Y+6	; 0x06
    1b00:	1f 81       	ldd	r17, Y+7	; 0x07
    1b02:	91 01       	movw	r18, r2
    1b04:	28 1b       	sub	r18, r24
    1b06:	39 0b       	sbc	r19, r25
    1b08:	b9 01       	movw	r22, r18
    1b0a:	37 ff       	sbrs	r19, 7
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <_fpadd_parts+0xb2>
    1b0e:	66 27       	eor	r22, r22
    1b10:	77 27       	eor	r23, r23
    1b12:	62 1b       	sub	r22, r18
    1b14:	73 0b       	sbc	r23, r19
    1b16:	60 32       	cpi	r22, 0x20	; 32
    1b18:	71 05       	cpc	r23, r1
    1b1a:	0c f0       	brlt	.+2      	; 0x1b1e <_fpadd_parts+0xba>
    1b1c:	61 c0       	rjmp	.+194    	; 0x1be0 <_fpadd_parts+0x17c>
    1b1e:	12 16       	cp	r1, r18
    1b20:	13 06       	cpc	r1, r19
    1b22:	6c f5       	brge	.+90     	; 0x1b7e <_fpadd_parts+0x11a>
    1b24:	37 01       	movw	r6, r14
    1b26:	48 01       	movw	r8, r16
    1b28:	06 2e       	mov	r0, r22
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <_fpadd_parts+0xd0>
    1b2c:	96 94       	lsr	r9
    1b2e:	87 94       	ror	r8
    1b30:	77 94       	ror	r7
    1b32:	67 94       	ror	r6
    1b34:	0a 94       	dec	r0
    1b36:	d2 f7       	brpl	.-12     	; 0x1b2c <_fpadd_parts+0xc8>
    1b38:	21 e0       	ldi	r18, 0x01	; 1
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <_fpadd_parts+0xe6>
    1b42:	22 0f       	add	r18, r18
    1b44:	33 1f       	adc	r19, r19
    1b46:	44 1f       	adc	r20, r20
    1b48:	55 1f       	adc	r21, r21
    1b4a:	6a 95       	dec	r22
    1b4c:	d2 f7       	brpl	.-12     	; 0x1b42 <_fpadd_parts+0xde>
    1b4e:	21 50       	subi	r18, 0x01	; 1
    1b50:	30 40       	sbci	r19, 0x00	; 0
    1b52:	40 40       	sbci	r20, 0x00	; 0
    1b54:	50 40       	sbci	r21, 0x00	; 0
    1b56:	2e 21       	and	r18, r14
    1b58:	3f 21       	and	r19, r15
    1b5a:	40 23       	and	r20, r16
    1b5c:	51 23       	and	r21, r17
    1b5e:	21 15       	cp	r18, r1
    1b60:	31 05       	cpc	r19, r1
    1b62:	41 05       	cpc	r20, r1
    1b64:	51 05       	cpc	r21, r1
    1b66:	21 f0       	breq	.+8      	; 0x1b70 <_fpadd_parts+0x10c>
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	79 01       	movw	r14, r18
    1b72:	8a 01       	movw	r16, r20
    1b74:	e6 28       	or	r14, r6
    1b76:	f7 28       	or	r15, r7
    1b78:	08 29       	or	r16, r8
    1b7a:	19 29       	or	r17, r9
    1b7c:	3c c0       	rjmp	.+120    	; 0x1bf6 <_fpadd_parts+0x192>
    1b7e:	23 2b       	or	r18, r19
    1b80:	d1 f1       	breq	.+116    	; 0x1bf6 <_fpadd_parts+0x192>
    1b82:	26 0e       	add	r2, r22
    1b84:	37 1e       	adc	r3, r23
    1b86:	35 01       	movw	r6, r10
    1b88:	46 01       	movw	r8, r12
    1b8a:	06 2e       	mov	r0, r22
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <_fpadd_parts+0x132>
    1b8e:	96 94       	lsr	r9
    1b90:	87 94       	ror	r8
    1b92:	77 94       	ror	r7
    1b94:	67 94       	ror	r6
    1b96:	0a 94       	dec	r0
    1b98:	d2 f7       	brpl	.-12     	; 0x1b8e <_fpadd_parts+0x12a>
    1b9a:	21 e0       	ldi	r18, 0x01	; 1
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	04 c0       	rjmp	.+8      	; 0x1bac <_fpadd_parts+0x148>
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	44 1f       	adc	r20, r20
    1baa:	55 1f       	adc	r21, r21
    1bac:	6a 95       	dec	r22
    1bae:	d2 f7       	brpl	.-12     	; 0x1ba4 <_fpadd_parts+0x140>
    1bb0:	21 50       	subi	r18, 0x01	; 1
    1bb2:	30 40       	sbci	r19, 0x00	; 0
    1bb4:	40 40       	sbci	r20, 0x00	; 0
    1bb6:	50 40       	sbci	r21, 0x00	; 0
    1bb8:	2a 21       	and	r18, r10
    1bba:	3b 21       	and	r19, r11
    1bbc:	4c 21       	and	r20, r12
    1bbe:	5d 21       	and	r21, r13
    1bc0:	21 15       	cp	r18, r1
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	41 05       	cpc	r20, r1
    1bc6:	51 05       	cpc	r21, r1
    1bc8:	21 f0       	breq	.+8      	; 0x1bd2 <_fpadd_parts+0x16e>
    1bca:	21 e0       	ldi	r18, 0x01	; 1
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	59 01       	movw	r10, r18
    1bd4:	6a 01       	movw	r12, r20
    1bd6:	a6 28       	or	r10, r6
    1bd8:	b7 28       	or	r11, r7
    1bda:	c8 28       	or	r12, r8
    1bdc:	d9 28       	or	r13, r9
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <_fpadd_parts+0x192>
    1be0:	82 15       	cp	r24, r2
    1be2:	93 05       	cpc	r25, r3
    1be4:	2c f0       	brlt	.+10     	; 0x1bf0 <_fpadd_parts+0x18c>
    1be6:	1c 01       	movw	r2, r24
    1be8:	aa 24       	eor	r10, r10
    1bea:	bb 24       	eor	r11, r11
    1bec:	65 01       	movw	r12, r10
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <_fpadd_parts+0x192>
    1bf0:	ee 24       	eor	r14, r14
    1bf2:	ff 24       	eor	r15, r15
    1bf4:	87 01       	movw	r16, r14
    1bf6:	11 96       	adiw	r26, 0x01	; 1
    1bf8:	9c 91       	ld	r25, X
    1bfa:	d2 01       	movw	r26, r4
    1bfc:	11 96       	adiw	r26, 0x01	; 1
    1bfe:	8c 91       	ld	r24, X
    1c00:	98 17       	cp	r25, r24
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <_fpadd_parts+0x1a2>
    1c04:	45 c0       	rjmp	.+138    	; 0x1c90 <_fpadd_parts+0x22c>
    1c06:	99 23       	and	r25, r25
    1c08:	39 f0       	breq	.+14     	; 0x1c18 <_fpadd_parts+0x1b4>
    1c0a:	a8 01       	movw	r20, r16
    1c0c:	97 01       	movw	r18, r14
    1c0e:	2a 19       	sub	r18, r10
    1c10:	3b 09       	sbc	r19, r11
    1c12:	4c 09       	sbc	r20, r12
    1c14:	5d 09       	sbc	r21, r13
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <_fpadd_parts+0x1c0>
    1c18:	a6 01       	movw	r20, r12
    1c1a:	95 01       	movw	r18, r10
    1c1c:	2e 19       	sub	r18, r14
    1c1e:	3f 09       	sbc	r19, r15
    1c20:	40 0b       	sbc	r20, r16
    1c22:	51 0b       	sbc	r21, r17
    1c24:	57 fd       	sbrc	r21, 7
    1c26:	08 c0       	rjmp	.+16     	; 0x1c38 <_fpadd_parts+0x1d4>
    1c28:	11 82       	std	Z+1, r1	; 0x01
    1c2a:	33 82       	std	Z+3, r3	; 0x03
    1c2c:	22 82       	std	Z+2, r2	; 0x02
    1c2e:	24 83       	std	Z+4, r18	; 0x04
    1c30:	35 83       	std	Z+5, r19	; 0x05
    1c32:	46 83       	std	Z+6, r20	; 0x06
    1c34:	57 83       	std	Z+7, r21	; 0x07
    1c36:	1d c0       	rjmp	.+58     	; 0x1c72 <_fpadd_parts+0x20e>
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	81 83       	std	Z+1, r24	; 0x01
    1c3c:	33 82       	std	Z+3, r3	; 0x03
    1c3e:	22 82       	std	Z+2, r2	; 0x02
    1c40:	88 27       	eor	r24, r24
    1c42:	99 27       	eor	r25, r25
    1c44:	dc 01       	movw	r26, r24
    1c46:	82 1b       	sub	r24, r18
    1c48:	93 0b       	sbc	r25, r19
    1c4a:	a4 0b       	sbc	r26, r20
    1c4c:	b5 0b       	sbc	r27, r21
    1c4e:	84 83       	std	Z+4, r24	; 0x04
    1c50:	95 83       	std	Z+5, r25	; 0x05
    1c52:	a6 83       	std	Z+6, r26	; 0x06
    1c54:	b7 83       	std	Z+7, r27	; 0x07
    1c56:	0d c0       	rjmp	.+26     	; 0x1c72 <_fpadd_parts+0x20e>
    1c58:	22 0f       	add	r18, r18
    1c5a:	33 1f       	adc	r19, r19
    1c5c:	44 1f       	adc	r20, r20
    1c5e:	55 1f       	adc	r21, r21
    1c60:	24 83       	std	Z+4, r18	; 0x04
    1c62:	35 83       	std	Z+5, r19	; 0x05
    1c64:	46 83       	std	Z+6, r20	; 0x06
    1c66:	57 83       	std	Z+7, r21	; 0x07
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	93 83       	std	Z+3, r25	; 0x03
    1c70:	82 83       	std	Z+2, r24	; 0x02
    1c72:	24 81       	ldd	r18, Z+4	; 0x04
    1c74:	35 81       	ldd	r19, Z+5	; 0x05
    1c76:	46 81       	ldd	r20, Z+6	; 0x06
    1c78:	57 81       	ldd	r21, Z+7	; 0x07
    1c7a:	da 01       	movw	r26, r20
    1c7c:	c9 01       	movw	r24, r18
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	a1 09       	sbc	r26, r1
    1c82:	b1 09       	sbc	r27, r1
    1c84:	8f 5f       	subi	r24, 0xFF	; 255
    1c86:	9f 4f       	sbci	r25, 0xFF	; 255
    1c88:	af 4f       	sbci	r26, 0xFF	; 255
    1c8a:	bf 43       	sbci	r27, 0x3F	; 63
    1c8c:	28 f3       	brcs	.-54     	; 0x1c58 <_fpadd_parts+0x1f4>
    1c8e:	0b c0       	rjmp	.+22     	; 0x1ca6 <_fpadd_parts+0x242>
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	33 82       	std	Z+3, r3	; 0x03
    1c94:	22 82       	std	Z+2, r2	; 0x02
    1c96:	ea 0c       	add	r14, r10
    1c98:	fb 1c       	adc	r15, r11
    1c9a:	0c 1d       	adc	r16, r12
    1c9c:	1d 1d       	adc	r17, r13
    1c9e:	e4 82       	std	Z+4, r14	; 0x04
    1ca0:	f5 82       	std	Z+5, r15	; 0x05
    1ca2:	06 83       	std	Z+6, r16	; 0x06
    1ca4:	17 83       	std	Z+7, r17	; 0x07
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	80 83       	st	Z, r24
    1caa:	24 81       	ldd	r18, Z+4	; 0x04
    1cac:	35 81       	ldd	r19, Z+5	; 0x05
    1cae:	46 81       	ldd	r20, Z+6	; 0x06
    1cb0:	57 81       	ldd	r21, Z+7	; 0x07
    1cb2:	57 ff       	sbrs	r21, 7
    1cb4:	1a c0       	rjmp	.+52     	; 0x1cea <_fpadd_parts+0x286>
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	aa 27       	eor	r26, r26
    1cba:	97 fd       	sbrc	r25, 7
    1cbc:	a0 95       	com	r26
    1cbe:	ba 2f       	mov	r27, r26
    1cc0:	81 70       	andi	r24, 0x01	; 1
    1cc2:	90 70       	andi	r25, 0x00	; 0
    1cc4:	a0 70       	andi	r26, 0x00	; 0
    1cc6:	b0 70       	andi	r27, 0x00	; 0
    1cc8:	56 95       	lsr	r21
    1cca:	47 95       	ror	r20
    1ccc:	37 95       	ror	r19
    1cce:	27 95       	ror	r18
    1cd0:	82 2b       	or	r24, r18
    1cd2:	93 2b       	or	r25, r19
    1cd4:	a4 2b       	or	r26, r20
    1cd6:	b5 2b       	or	r27, r21
    1cd8:	84 83       	std	Z+4, r24	; 0x04
    1cda:	95 83       	std	Z+5, r25	; 0x05
    1cdc:	a6 83       	std	Z+6, r26	; 0x06
    1cde:	b7 83       	std	Z+7, r27	; 0x07
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	93 83       	std	Z+3, r25	; 0x03
    1ce8:	82 83       	std	Z+2, r24	; 0x02
    1cea:	df 01       	movw	r26, r30
    1cec:	01 c0       	rjmp	.+2      	; 0x1cf0 <_fpadd_parts+0x28c>
    1cee:	d2 01       	movw	r26, r4
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	e2 e1       	ldi	r30, 0x12	; 18
    1cf8:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__>

00001cfc <__subsf3>:
    1cfc:	a0 e2       	ldi	r26, 0x20	; 32
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e4 e8       	ldi	r30, 0x84	; 132
    1d02:	fe e0       	ldi	r31, 0x0E	; 14
    1d04:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__+0x18>
    1d08:	69 83       	std	Y+1, r22	; 0x01
    1d0a:	7a 83       	std	Y+2, r23	; 0x02
    1d0c:	8b 83       	std	Y+3, r24	; 0x03
    1d0e:	9c 83       	std	Y+4, r25	; 0x04
    1d10:	2d 83       	std	Y+5, r18	; 0x05
    1d12:	3e 83       	std	Y+6, r19	; 0x06
    1d14:	4f 83       	std	Y+7, r20	; 0x07
    1d16:	58 87       	std	Y+8, r21	; 0x08
    1d18:	e9 e0       	ldi	r30, 0x09	; 9
    1d1a:	ee 2e       	mov	r14, r30
    1d1c:	f1 2c       	mov	r15, r1
    1d1e:	ec 0e       	add	r14, r28
    1d20:	fd 1e       	adc	r15, r29
    1d22:	ce 01       	movw	r24, r28
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	b7 01       	movw	r22, r14
    1d28:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    1d2c:	8e 01       	movw	r16, r28
    1d2e:	0f 5e       	subi	r16, 0xEF	; 239
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	ce 01       	movw	r24, r28
    1d34:	05 96       	adiw	r24, 0x05	; 5
    1d36:	b8 01       	movw	r22, r16
    1d38:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    1d3c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	89 27       	eor	r24, r25
    1d42:	8a 8b       	std	Y+18, r24	; 0x12
    1d44:	c7 01       	movw	r24, r14
    1d46:	b8 01       	movw	r22, r16
    1d48:	ae 01       	movw	r20, r28
    1d4a:	47 5e       	subi	r20, 0xE7	; 231
    1d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_fpadd_parts>
    1d52:	0e 94 2c 12 	call	0x2458	; 0x2458 <__pack_f>
    1d56:	a0 96       	adiw	r28, 0x20	; 32
    1d58:	e6 e0       	ldi	r30, 0x06	; 6
    1d5a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__+0x18>

00001d5e <__addsf3>:
    1d5e:	a0 e2       	ldi	r26, 0x20	; 32
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e5 eb       	ldi	r30, 0xB5	; 181
    1d64:	fe e0       	ldi	r31, 0x0E	; 14
    1d66:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__+0x18>
    1d6a:	69 83       	std	Y+1, r22	; 0x01
    1d6c:	7a 83       	std	Y+2, r23	; 0x02
    1d6e:	8b 83       	std	Y+3, r24	; 0x03
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	2d 83       	std	Y+5, r18	; 0x05
    1d74:	3e 83       	std	Y+6, r19	; 0x06
    1d76:	4f 83       	std	Y+7, r20	; 0x07
    1d78:	58 87       	std	Y+8, r21	; 0x08
    1d7a:	f9 e0       	ldi	r31, 0x09	; 9
    1d7c:	ef 2e       	mov	r14, r31
    1d7e:	f1 2c       	mov	r15, r1
    1d80:	ec 0e       	add	r14, r28
    1d82:	fd 1e       	adc	r15, r29
    1d84:	ce 01       	movw	r24, r28
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	b7 01       	movw	r22, r14
    1d8a:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    1d8e:	8e 01       	movw	r16, r28
    1d90:	0f 5e       	subi	r16, 0xEF	; 239
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	ce 01       	movw	r24, r28
    1d96:	05 96       	adiw	r24, 0x05	; 5
    1d98:	b8 01       	movw	r22, r16
    1d9a:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    1d9e:	c7 01       	movw	r24, r14
    1da0:	b8 01       	movw	r22, r16
    1da2:	ae 01       	movw	r20, r28
    1da4:	47 5e       	subi	r20, 0xE7	; 231
    1da6:	5f 4f       	sbci	r21, 0xFF	; 255
    1da8:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_fpadd_parts>
    1dac:	0e 94 2c 12 	call	0x2458	; 0x2458 <__pack_f>
    1db0:	a0 96       	adiw	r28, 0x20	; 32
    1db2:	e6 e0       	ldi	r30, 0x06	; 6
    1db4:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__+0x18>

00001db8 <__mulsf3>:
    1db8:	a0 e2       	ldi	r26, 0x20	; 32
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 ee       	ldi	r30, 0xE2	; 226
    1dbe:	fe e0       	ldi	r31, 0x0E	; 14
    1dc0:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__>
    1dc4:	69 83       	std	Y+1, r22	; 0x01
    1dc6:	7a 83       	std	Y+2, r23	; 0x02
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
    1dca:	9c 83       	std	Y+4, r25	; 0x04
    1dcc:	2d 83       	std	Y+5, r18	; 0x05
    1dce:	3e 83       	std	Y+6, r19	; 0x06
    1dd0:	4f 83       	std	Y+7, r20	; 0x07
    1dd2:	58 87       	std	Y+8, r21	; 0x08
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	be 01       	movw	r22, r28
    1dda:	67 5f       	subi	r22, 0xF7	; 247
    1ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dde:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    1de2:	ce 01       	movw	r24, r28
    1de4:	05 96       	adiw	r24, 0x05	; 5
    1de6:	be 01       	movw	r22, r28
    1de8:	6f 5e       	subi	r22, 0xEF	; 239
    1dea:	7f 4f       	sbci	r23, 0xFF	; 255
    1dec:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    1df0:	99 85       	ldd	r25, Y+9	; 0x09
    1df2:	92 30       	cpi	r25, 0x02	; 2
    1df4:	88 f0       	brcs	.+34     	; 0x1e18 <__mulsf3+0x60>
    1df6:	89 89       	ldd	r24, Y+17	; 0x11
    1df8:	82 30       	cpi	r24, 0x02	; 2
    1dfa:	c8 f0       	brcs	.+50     	; 0x1e2e <__mulsf3+0x76>
    1dfc:	94 30       	cpi	r25, 0x04	; 4
    1dfe:	19 f4       	brne	.+6      	; 0x1e06 <__mulsf3+0x4e>
    1e00:	82 30       	cpi	r24, 0x02	; 2
    1e02:	51 f4       	brne	.+20     	; 0x1e18 <__mulsf3+0x60>
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <__mulsf3+0x56>
    1e06:	84 30       	cpi	r24, 0x04	; 4
    1e08:	29 f4       	brne	.+10     	; 0x1e14 <__mulsf3+0x5c>
    1e0a:	92 30       	cpi	r25, 0x02	; 2
    1e0c:	81 f4       	brne	.+32     	; 0x1e2e <__mulsf3+0x76>
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	92 e0       	ldi	r25, 0x02	; 2
    1e12:	c6 c0       	rjmp	.+396    	; 0x1fa0 <__mulsf3+0x1e8>
    1e14:	92 30       	cpi	r25, 0x02	; 2
    1e16:	49 f4       	brne	.+18     	; 0x1e2a <__mulsf3+0x72>
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e1e:	98 13       	cpse	r25, r24
    1e20:	21 e0       	ldi	r18, 0x01	; 1
    1e22:	2a 87       	std	Y+10, r18	; 0x0a
    1e24:	ce 01       	movw	r24, r28
    1e26:	09 96       	adiw	r24, 0x09	; 9
    1e28:	bb c0       	rjmp	.+374    	; 0x1fa0 <__mulsf3+0x1e8>
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	49 f4       	brne	.+18     	; 0x1e40 <__mulsf3+0x88>
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	8a 89       	ldd	r24, Y+18	; 0x12
    1e34:	98 13       	cpse	r25, r24
    1e36:	21 e0       	ldi	r18, 0x01	; 1
    1e38:	2a 8b       	std	Y+18, r18	; 0x12
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	41 96       	adiw	r24, 0x11	; 17
    1e3e:	b0 c0       	rjmp	.+352    	; 0x1fa0 <__mulsf3+0x1e8>
    1e40:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e42:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e44:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e46:	58 88       	ldd	r5, Y+16	; 0x10
    1e48:	6d 88       	ldd	r6, Y+21	; 0x15
    1e4a:	7e 88       	ldd	r7, Y+22	; 0x16
    1e4c:	8f 88       	ldd	r8, Y+23	; 0x17
    1e4e:	98 8c       	ldd	r9, Y+24	; 0x18
    1e50:	ee 24       	eor	r14, r14
    1e52:	ff 24       	eor	r15, r15
    1e54:	87 01       	movw	r16, r14
    1e56:	aa 24       	eor	r10, r10
    1e58:	bb 24       	eor	r11, r11
    1e5a:	65 01       	movw	r12, r10
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	e0 e0       	ldi	r30, 0x00	; 0
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	c1 01       	movw	r24, r2
    1e6a:	81 70       	andi	r24, 0x01	; 1
    1e6c:	90 70       	andi	r25, 0x00	; 0
    1e6e:	89 2b       	or	r24, r25
    1e70:	e9 f0       	breq	.+58     	; 0x1eac <__mulsf3+0xf4>
    1e72:	e6 0c       	add	r14, r6
    1e74:	f7 1c       	adc	r15, r7
    1e76:	08 1d       	adc	r16, r8
    1e78:	19 1d       	adc	r17, r9
    1e7a:	9a 01       	movw	r18, r20
    1e7c:	ab 01       	movw	r20, r22
    1e7e:	2a 0d       	add	r18, r10
    1e80:	3b 1d       	adc	r19, r11
    1e82:	4c 1d       	adc	r20, r12
    1e84:	5d 1d       	adc	r21, r13
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e0       	ldi	r26, 0x00	; 0
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e6 14       	cp	r14, r6
    1e90:	f7 04       	cpc	r15, r7
    1e92:	08 05       	cpc	r16, r8
    1e94:	19 05       	cpc	r17, r9
    1e96:	20 f4       	brcc	.+8      	; 0x1ea0 <__mulsf3+0xe8>
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e0       	ldi	r26, 0x00	; 0
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	ba 01       	movw	r22, r20
    1ea2:	a9 01       	movw	r20, r18
    1ea4:	48 0f       	add	r20, r24
    1ea6:	59 1f       	adc	r21, r25
    1ea8:	6a 1f       	adc	r22, r26
    1eaa:	7b 1f       	adc	r23, r27
    1eac:	aa 0c       	add	r10, r10
    1eae:	bb 1c       	adc	r11, r11
    1eb0:	cc 1c       	adc	r12, r12
    1eb2:	dd 1c       	adc	r13, r13
    1eb4:	97 fe       	sbrs	r9, 7
    1eb6:	08 c0       	rjmp	.+16     	; 0x1ec8 <__mulsf3+0x110>
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e0       	ldi	r26, 0x00	; 0
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	a8 2a       	or	r10, r24
    1ec2:	b9 2a       	or	r11, r25
    1ec4:	ca 2a       	or	r12, r26
    1ec6:	db 2a       	or	r13, r27
    1ec8:	31 96       	adiw	r30, 0x01	; 1
    1eca:	e0 32       	cpi	r30, 0x20	; 32
    1ecc:	f1 05       	cpc	r31, r1
    1ece:	49 f0       	breq	.+18     	; 0x1ee2 <__mulsf3+0x12a>
    1ed0:	66 0c       	add	r6, r6
    1ed2:	77 1c       	adc	r7, r7
    1ed4:	88 1c       	adc	r8, r8
    1ed6:	99 1c       	adc	r9, r9
    1ed8:	56 94       	lsr	r5
    1eda:	47 94       	ror	r4
    1edc:	37 94       	ror	r3
    1ede:	27 94       	ror	r2
    1ee0:	c3 cf       	rjmp	.-122    	; 0x1e68 <__mulsf3+0xb0>
    1ee2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ee4:	ea 89       	ldd	r30, Y+18	; 0x12
    1ee6:	2b 89       	ldd	r18, Y+19	; 0x13
    1ee8:	3c 89       	ldd	r19, Y+20	; 0x14
    1eea:	8b 85       	ldd	r24, Y+11	; 0x0b
    1eec:	9c 85       	ldd	r25, Y+12	; 0x0c
    1eee:	28 0f       	add	r18, r24
    1ef0:	39 1f       	adc	r19, r25
    1ef2:	2e 5f       	subi	r18, 0xFE	; 254
    1ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef6:	17 c0       	rjmp	.+46     	; 0x1f26 <__mulsf3+0x16e>
    1ef8:	ca 01       	movw	r24, r20
    1efa:	81 70       	andi	r24, 0x01	; 1
    1efc:	90 70       	andi	r25, 0x00	; 0
    1efe:	89 2b       	or	r24, r25
    1f00:	61 f0       	breq	.+24     	; 0x1f1a <__mulsf3+0x162>
    1f02:	16 95       	lsr	r17
    1f04:	07 95       	ror	r16
    1f06:	f7 94       	ror	r15
    1f08:	e7 94       	ror	r14
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a0 e0       	ldi	r26, 0x00	; 0
    1f10:	b0 e8       	ldi	r27, 0x80	; 128
    1f12:	e8 2a       	or	r14, r24
    1f14:	f9 2a       	or	r15, r25
    1f16:	0a 2b       	or	r16, r26
    1f18:	1b 2b       	or	r17, r27
    1f1a:	76 95       	lsr	r23
    1f1c:	67 95       	ror	r22
    1f1e:	57 95       	ror	r21
    1f20:	47 95       	ror	r20
    1f22:	2f 5f       	subi	r18, 0xFF	; 255
    1f24:	3f 4f       	sbci	r19, 0xFF	; 255
    1f26:	77 fd       	sbrc	r23, 7
    1f28:	e7 cf       	rjmp	.-50     	; 0x1ef8 <__mulsf3+0x140>
    1f2a:	0c c0       	rjmp	.+24     	; 0x1f44 <__mulsf3+0x18c>
    1f2c:	44 0f       	add	r20, r20
    1f2e:	55 1f       	adc	r21, r21
    1f30:	66 1f       	adc	r22, r22
    1f32:	77 1f       	adc	r23, r23
    1f34:	17 fd       	sbrc	r17, 7
    1f36:	41 60       	ori	r20, 0x01	; 1
    1f38:	ee 0c       	add	r14, r14
    1f3a:	ff 1c       	adc	r15, r15
    1f3c:	00 1f       	adc	r16, r16
    1f3e:	11 1f       	adc	r17, r17
    1f40:	21 50       	subi	r18, 0x01	; 1
    1f42:	30 40       	sbci	r19, 0x00	; 0
    1f44:	40 30       	cpi	r20, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	59 07       	cpc	r21, r25
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	69 07       	cpc	r22, r25
    1f4e:	90 e4       	ldi	r25, 0x40	; 64
    1f50:	79 07       	cpc	r23, r25
    1f52:	60 f3       	brcs	.-40     	; 0x1f2c <__mulsf3+0x174>
    1f54:	2b 8f       	std	Y+27, r18	; 0x1b
    1f56:	3c 8f       	std	Y+28, r19	; 0x1c
    1f58:	db 01       	movw	r26, r22
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	8f 77       	andi	r24, 0x7F	; 127
    1f5e:	90 70       	andi	r25, 0x00	; 0
    1f60:	a0 70       	andi	r26, 0x00	; 0
    1f62:	b0 70       	andi	r27, 0x00	; 0
    1f64:	80 34       	cpi	r24, 0x40	; 64
    1f66:	91 05       	cpc	r25, r1
    1f68:	a1 05       	cpc	r26, r1
    1f6a:	b1 05       	cpc	r27, r1
    1f6c:	61 f4       	brne	.+24     	; 0x1f86 <__mulsf3+0x1ce>
    1f6e:	47 fd       	sbrc	r20, 7
    1f70:	0a c0       	rjmp	.+20     	; 0x1f86 <__mulsf3+0x1ce>
    1f72:	e1 14       	cp	r14, r1
    1f74:	f1 04       	cpc	r15, r1
    1f76:	01 05       	cpc	r16, r1
    1f78:	11 05       	cpc	r17, r1
    1f7a:	29 f0       	breq	.+10     	; 0x1f86 <__mulsf3+0x1ce>
    1f7c:	40 5c       	subi	r20, 0xC0	; 192
    1f7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f80:	6f 4f       	sbci	r22, 0xFF	; 255
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	40 78       	andi	r20, 0x80	; 128
    1f86:	1a 8e       	std	Y+26, r1	; 0x1a
    1f88:	fe 17       	cp	r31, r30
    1f8a:	11 f0       	breq	.+4      	; 0x1f90 <__mulsf3+0x1d8>
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f90:	4d 8f       	std	Y+29, r20	; 0x1d
    1f92:	5e 8f       	std	Y+30, r21	; 0x1e
    1f94:	6f 8f       	std	Y+31, r22	; 0x1f
    1f96:	78 a3       	std	Y+32, r23	; 0x20
    1f98:	83 e0       	ldi	r24, 0x03	; 3
    1f9a:	89 8f       	std	Y+25, r24	; 0x19
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	49 96       	adiw	r24, 0x19	; 25
    1fa0:	0e 94 2c 12 	call	0x2458	; 0x2458 <__pack_f>
    1fa4:	a0 96       	adiw	r28, 0x20	; 32
    1fa6:	e2 e1       	ldi	r30, 0x12	; 18
    1fa8:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__>

00001fac <__divsf3>:
    1fac:	a8 e1       	ldi	r26, 0x18	; 24
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	ec ed       	ldi	r30, 0xDC	; 220
    1fb2:	ff e0       	ldi	r31, 0x0F	; 15
    1fb4:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__prologue_saves__+0x10>
    1fb8:	69 83       	std	Y+1, r22	; 0x01
    1fba:	7a 83       	std	Y+2, r23	; 0x02
    1fbc:	8b 83       	std	Y+3, r24	; 0x03
    1fbe:	9c 83       	std	Y+4, r25	; 0x04
    1fc0:	2d 83       	std	Y+5, r18	; 0x05
    1fc2:	3e 83       	std	Y+6, r19	; 0x06
    1fc4:	4f 83       	std	Y+7, r20	; 0x07
    1fc6:	58 87       	std	Y+8, r21	; 0x08
    1fc8:	b9 e0       	ldi	r27, 0x09	; 9
    1fca:	eb 2e       	mov	r14, r27
    1fcc:	f1 2c       	mov	r15, r1
    1fce:	ec 0e       	add	r14, r28
    1fd0:	fd 1e       	adc	r15, r29
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	b7 01       	movw	r22, r14
    1fd8:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    1fdc:	8e 01       	movw	r16, r28
    1fde:	0f 5e       	subi	r16, 0xEF	; 239
    1fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	05 96       	adiw	r24, 0x05	; 5
    1fe6:	b8 01       	movw	r22, r16
    1fe8:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    1fec:	29 85       	ldd	r18, Y+9	; 0x09
    1fee:	22 30       	cpi	r18, 0x02	; 2
    1ff0:	08 f4       	brcc	.+2      	; 0x1ff4 <__divsf3+0x48>
    1ff2:	7e c0       	rjmp	.+252    	; 0x20f0 <__divsf3+0x144>
    1ff4:	39 89       	ldd	r19, Y+17	; 0x11
    1ff6:	32 30       	cpi	r19, 0x02	; 2
    1ff8:	10 f4       	brcc	.+4      	; 0x1ffe <__divsf3+0x52>
    1ffa:	b8 01       	movw	r22, r16
    1ffc:	7c c0       	rjmp	.+248    	; 0x20f6 <__divsf3+0x14a>
    1ffe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2000:	9a 89       	ldd	r25, Y+18	; 0x12
    2002:	89 27       	eor	r24, r25
    2004:	8a 87       	std	Y+10, r24	; 0x0a
    2006:	24 30       	cpi	r18, 0x04	; 4
    2008:	11 f0       	breq	.+4      	; 0x200e <__divsf3+0x62>
    200a:	22 30       	cpi	r18, 0x02	; 2
    200c:	31 f4       	brne	.+12     	; 0x201a <__divsf3+0x6e>
    200e:	23 17       	cp	r18, r19
    2010:	09 f0       	breq	.+2      	; 0x2014 <__divsf3+0x68>
    2012:	6e c0       	rjmp	.+220    	; 0x20f0 <__divsf3+0x144>
    2014:	62 e0       	ldi	r22, 0x02	; 2
    2016:	72 e0       	ldi	r23, 0x02	; 2
    2018:	6e c0       	rjmp	.+220    	; 0x20f6 <__divsf3+0x14a>
    201a:	34 30       	cpi	r19, 0x04	; 4
    201c:	39 f4       	brne	.+14     	; 0x202c <__divsf3+0x80>
    201e:	1d 86       	std	Y+13, r1	; 0x0d
    2020:	1e 86       	std	Y+14, r1	; 0x0e
    2022:	1f 86       	std	Y+15, r1	; 0x0f
    2024:	18 8a       	std	Y+16, r1	; 0x10
    2026:	1c 86       	std	Y+12, r1	; 0x0c
    2028:	1b 86       	std	Y+11, r1	; 0x0b
    202a:	04 c0       	rjmp	.+8      	; 0x2034 <__divsf3+0x88>
    202c:	32 30       	cpi	r19, 0x02	; 2
    202e:	21 f4       	brne	.+8      	; 0x2038 <__divsf3+0x8c>
    2030:	84 e0       	ldi	r24, 0x04	; 4
    2032:	89 87       	std	Y+9, r24	; 0x09
    2034:	b7 01       	movw	r22, r14
    2036:	5f c0       	rjmp	.+190    	; 0x20f6 <__divsf3+0x14a>
    2038:	2b 85       	ldd	r18, Y+11	; 0x0b
    203a:	3c 85       	ldd	r19, Y+12	; 0x0c
    203c:	8b 89       	ldd	r24, Y+19	; 0x13
    203e:	9c 89       	ldd	r25, Y+20	; 0x14
    2040:	28 1b       	sub	r18, r24
    2042:	39 0b       	sbc	r19, r25
    2044:	3c 87       	std	Y+12, r19	; 0x0c
    2046:	2b 87       	std	Y+11, r18	; 0x0b
    2048:	ed 84       	ldd	r14, Y+13	; 0x0d
    204a:	fe 84       	ldd	r15, Y+14	; 0x0e
    204c:	0f 85       	ldd	r16, Y+15	; 0x0f
    204e:	18 89       	ldd	r17, Y+16	; 0x10
    2050:	ad 88       	ldd	r10, Y+21	; 0x15
    2052:	be 88       	ldd	r11, Y+22	; 0x16
    2054:	cf 88       	ldd	r12, Y+23	; 0x17
    2056:	d8 8c       	ldd	r13, Y+24	; 0x18
    2058:	ea 14       	cp	r14, r10
    205a:	fb 04       	cpc	r15, r11
    205c:	0c 05       	cpc	r16, r12
    205e:	1d 05       	cpc	r17, r13
    2060:	40 f4       	brcc	.+16     	; 0x2072 <__divsf3+0xc6>
    2062:	ee 0c       	add	r14, r14
    2064:	ff 1c       	adc	r15, r15
    2066:	00 1f       	adc	r16, r16
    2068:	11 1f       	adc	r17, r17
    206a:	21 50       	subi	r18, 0x01	; 1
    206c:	30 40       	sbci	r19, 0x00	; 0
    206e:	3c 87       	std	Y+12, r19	; 0x0c
    2070:	2b 87       	std	Y+11, r18	; 0x0b
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	a0 e0       	ldi	r26, 0x00	; 0
    2080:	b0 e4       	ldi	r27, 0x40	; 64
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	ea 14       	cp	r14, r10
    2088:	fb 04       	cpc	r15, r11
    208a:	0c 05       	cpc	r16, r12
    208c:	1d 05       	cpc	r17, r13
    208e:	40 f0       	brcs	.+16     	; 0x20a0 <__divsf3+0xf4>
    2090:	28 2b       	or	r18, r24
    2092:	39 2b       	or	r19, r25
    2094:	4a 2b       	or	r20, r26
    2096:	5b 2b       	or	r21, r27
    2098:	ea 18       	sub	r14, r10
    209a:	fb 08       	sbc	r15, r11
    209c:	0c 09       	sbc	r16, r12
    209e:	1d 09       	sbc	r17, r13
    20a0:	b6 95       	lsr	r27
    20a2:	a7 95       	ror	r26
    20a4:	97 95       	ror	r25
    20a6:	87 95       	ror	r24
    20a8:	ee 0c       	add	r14, r14
    20aa:	ff 1c       	adc	r15, r15
    20ac:	00 1f       	adc	r16, r16
    20ae:	11 1f       	adc	r17, r17
    20b0:	6f 5f       	subi	r22, 0xFF	; 255
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255
    20b4:	6f 31       	cpi	r22, 0x1F	; 31
    20b6:	71 05       	cpc	r23, r1
    20b8:	31 f7       	brne	.-52     	; 0x2086 <__divsf3+0xda>
    20ba:	da 01       	movw	r26, r20
    20bc:	c9 01       	movw	r24, r18
    20be:	8f 77       	andi	r24, 0x7F	; 127
    20c0:	90 70       	andi	r25, 0x00	; 0
    20c2:	a0 70       	andi	r26, 0x00	; 0
    20c4:	b0 70       	andi	r27, 0x00	; 0
    20c6:	80 34       	cpi	r24, 0x40	; 64
    20c8:	91 05       	cpc	r25, r1
    20ca:	a1 05       	cpc	r26, r1
    20cc:	b1 05       	cpc	r27, r1
    20ce:	61 f4       	brne	.+24     	; 0x20e8 <__divsf3+0x13c>
    20d0:	27 fd       	sbrc	r18, 7
    20d2:	0a c0       	rjmp	.+20     	; 0x20e8 <__divsf3+0x13c>
    20d4:	e1 14       	cp	r14, r1
    20d6:	f1 04       	cpc	r15, r1
    20d8:	01 05       	cpc	r16, r1
    20da:	11 05       	cpc	r17, r1
    20dc:	29 f0       	breq	.+10     	; 0x20e8 <__divsf3+0x13c>
    20de:	20 5c       	subi	r18, 0xC0	; 192
    20e0:	3f 4f       	sbci	r19, 0xFF	; 255
    20e2:	4f 4f       	sbci	r20, 0xFF	; 255
    20e4:	5f 4f       	sbci	r21, 0xFF	; 255
    20e6:	20 78       	andi	r18, 0x80	; 128
    20e8:	2d 87       	std	Y+13, r18	; 0x0d
    20ea:	3e 87       	std	Y+14, r19	; 0x0e
    20ec:	4f 87       	std	Y+15, r20	; 0x0f
    20ee:	58 8b       	std	Y+16, r21	; 0x10
    20f0:	be 01       	movw	r22, r28
    20f2:	67 5f       	subi	r22, 0xF7	; 247
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	cb 01       	movw	r24, r22
    20f8:	0e 94 2c 12 	call	0x2458	; 0x2458 <__pack_f>
    20fc:	68 96       	adiw	r28, 0x18	; 24
    20fe:	ea e0       	ldi	r30, 0x0A	; 10
    2100:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__epilogue_restores__+0x10>

00002104 <__gesf2>:
    2104:	a8 e1       	ldi	r26, 0x18	; 24
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e8 e8       	ldi	r30, 0x88	; 136
    210a:	f0 e1       	ldi	r31, 0x10	; 16
    210c:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__+0x18>
    2110:	69 83       	std	Y+1, r22	; 0x01
    2112:	7a 83       	std	Y+2, r23	; 0x02
    2114:	8b 83       	std	Y+3, r24	; 0x03
    2116:	9c 83       	std	Y+4, r25	; 0x04
    2118:	2d 83       	std	Y+5, r18	; 0x05
    211a:	3e 83       	std	Y+6, r19	; 0x06
    211c:	4f 83       	std	Y+7, r20	; 0x07
    211e:	58 87       	std	Y+8, r21	; 0x08
    2120:	89 e0       	ldi	r24, 0x09	; 9
    2122:	e8 2e       	mov	r14, r24
    2124:	f1 2c       	mov	r15, r1
    2126:	ec 0e       	add	r14, r28
    2128:	fd 1e       	adc	r15, r29
    212a:	ce 01       	movw	r24, r28
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	b7 01       	movw	r22, r14
    2130:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    2134:	8e 01       	movw	r16, r28
    2136:	0f 5e       	subi	r16, 0xEF	; 239
    2138:	1f 4f       	sbci	r17, 0xFF	; 255
    213a:	ce 01       	movw	r24, r28
    213c:	05 96       	adiw	r24, 0x05	; 5
    213e:	b8 01       	movw	r22, r16
    2140:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	82 30       	cpi	r24, 0x02	; 2
    2148:	40 f0       	brcs	.+16     	; 0x215a <__gesf2+0x56>
    214a:	89 89       	ldd	r24, Y+17	; 0x11
    214c:	82 30       	cpi	r24, 0x02	; 2
    214e:	28 f0       	brcs	.+10     	; 0x215a <__gesf2+0x56>
    2150:	c7 01       	movw	r24, r14
    2152:	b8 01       	movw	r22, r16
    2154:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__fpcmp_parts_f>
    2158:	01 c0       	rjmp	.+2      	; 0x215c <__gesf2+0x58>
    215a:	8f ef       	ldi	r24, 0xFF	; 255
    215c:	68 96       	adiw	r28, 0x18	; 24
    215e:	e6 e0       	ldi	r30, 0x06	; 6
    2160:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__+0x18>

00002164 <__floatsisf>:
    2164:	a8 e0       	ldi	r26, 0x08	; 8
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e8 eb       	ldi	r30, 0xB8	; 184
    216a:	f0 e1       	ldi	r31, 0x10	; 16
    216c:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x12>
    2170:	9b 01       	movw	r18, r22
    2172:	ac 01       	movw	r20, r24
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	da 01       	movw	r26, r20
    217a:	c9 01       	movw	r24, r18
    217c:	88 27       	eor	r24, r24
    217e:	b7 fd       	sbrc	r27, 7
    2180:	83 95       	inc	r24
    2182:	99 27       	eor	r25, r25
    2184:	aa 27       	eor	r26, r26
    2186:	bb 27       	eor	r27, r27
    2188:	b8 2e       	mov	r11, r24
    218a:	21 15       	cp	r18, r1
    218c:	31 05       	cpc	r19, r1
    218e:	41 05       	cpc	r20, r1
    2190:	51 05       	cpc	r21, r1
    2192:	19 f4       	brne	.+6      	; 0x219a <__floatsisf+0x36>
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	3a c0       	rjmp	.+116    	; 0x220e <__stack+0xf>
    219a:	88 23       	and	r24, r24
    219c:	a9 f0       	breq	.+42     	; 0x21c8 <__floatsisf+0x64>
    219e:	20 30       	cpi	r18, 0x00	; 0
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	38 07       	cpc	r19, r24
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	48 07       	cpc	r20, r24
    21a8:	80 e8       	ldi	r24, 0x80	; 128
    21aa:	58 07       	cpc	r21, r24
    21ac:	29 f4       	brne	.+10     	; 0x21b8 <__floatsisf+0x54>
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	9f ec       	ldi	r25, 0xCF	; 207
    21b6:	30 c0       	rjmp	.+96     	; 0x2218 <__stack+0x19>
    21b8:	ee 24       	eor	r14, r14
    21ba:	ff 24       	eor	r15, r15
    21bc:	87 01       	movw	r16, r14
    21be:	e2 1a       	sub	r14, r18
    21c0:	f3 0a       	sbc	r15, r19
    21c2:	04 0b       	sbc	r16, r20
    21c4:	15 0b       	sbc	r17, r21
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <__floatsisf+0x68>
    21c8:	79 01       	movw	r14, r18
    21ca:	8a 01       	movw	r16, r20
    21cc:	8e e1       	ldi	r24, 0x1E	; 30
    21ce:	c8 2e       	mov	r12, r24
    21d0:	d1 2c       	mov	r13, r1
    21d2:	dc 82       	std	Y+4, r13	; 0x04
    21d4:	cb 82       	std	Y+3, r12	; 0x03
    21d6:	ed 82       	std	Y+5, r14	; 0x05
    21d8:	fe 82       	std	Y+6, r15	; 0x06
    21da:	0f 83       	std	Y+7, r16	; 0x07
    21dc:	18 87       	std	Y+8, r17	; 0x08
    21de:	c8 01       	movw	r24, r16
    21e0:	b7 01       	movw	r22, r14
    21e2:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__clzsi2>
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	18 16       	cp	r1, r24
    21ea:	19 06       	cpc	r1, r25
    21ec:	84 f4       	brge	.+32     	; 0x220e <__stack+0xf>
    21ee:	08 2e       	mov	r0, r24
    21f0:	04 c0       	rjmp	.+8      	; 0x21fa <__floatsisf+0x96>
    21f2:	ee 0c       	add	r14, r14
    21f4:	ff 1c       	adc	r15, r15
    21f6:	00 1f       	adc	r16, r16
    21f8:	11 1f       	adc	r17, r17
    21fa:	0a 94       	dec	r0
    21fc:	d2 f7       	brpl	.-12     	; 0x21f2 <__floatsisf+0x8e>
    21fe:	ed 82       	std	Y+5, r14	; 0x05
    2200:	fe 82       	std	Y+6, r15	; 0x06
    2202:	0f 83       	std	Y+7, r16	; 0x07
    2204:	18 87       	std	Y+8, r17	; 0x08
    2206:	c8 1a       	sub	r12, r24
    2208:	d9 0a       	sbc	r13, r25
    220a:	dc 82       	std	Y+4, r13	; 0x04
    220c:	cb 82       	std	Y+3, r12	; 0x03
    220e:	ba 82       	std	Y+2, r11	; 0x02
    2210:	ce 01       	movw	r24, r28
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	0e 94 2c 12 	call	0x2458	; 0x2458 <__pack_f>
    2218:	28 96       	adiw	r28, 0x08	; 8
    221a:	e9 e0       	ldi	r30, 0x09	; 9
    221c:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x12>

00002220 <__fixsfsi>:
    2220:	ac e0       	ldi	r26, 0x0C	; 12
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e6 e1       	ldi	r30, 0x16	; 22
    2226:	f1 e1       	ldi	r31, 0x11	; 17
    2228:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__prologue_saves__+0x20>
    222c:	69 83       	std	Y+1, r22	; 0x01
    222e:	7a 83       	std	Y+2, r23	; 0x02
    2230:	8b 83       	std	Y+3, r24	; 0x03
    2232:	9c 83       	std	Y+4, r25	; 0x04
    2234:	ce 01       	movw	r24, r28
    2236:	01 96       	adiw	r24, 0x01	; 1
    2238:	be 01       	movw	r22, r28
    223a:	6b 5f       	subi	r22, 0xFB	; 251
    223c:	7f 4f       	sbci	r23, 0xFF	; 255
    223e:	0e 94 01 13 	call	0x2602	; 0x2602 <__unpack_f>
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	82 30       	cpi	r24, 0x02	; 2
    2246:	61 f1       	breq	.+88     	; 0x22a0 <__fixsfsi+0x80>
    2248:	82 30       	cpi	r24, 0x02	; 2
    224a:	50 f1       	brcs	.+84     	; 0x22a0 <__fixsfsi+0x80>
    224c:	84 30       	cpi	r24, 0x04	; 4
    224e:	21 f4       	brne	.+8      	; 0x2258 <__fixsfsi+0x38>
    2250:	8e 81       	ldd	r24, Y+6	; 0x06
    2252:	88 23       	and	r24, r24
    2254:	51 f1       	breq	.+84     	; 0x22aa <__fixsfsi+0x8a>
    2256:	2e c0       	rjmp	.+92     	; 0x22b4 <__fixsfsi+0x94>
    2258:	2f 81       	ldd	r18, Y+7	; 0x07
    225a:	38 85       	ldd	r19, Y+8	; 0x08
    225c:	37 fd       	sbrc	r19, 7
    225e:	20 c0       	rjmp	.+64     	; 0x22a0 <__fixsfsi+0x80>
    2260:	6e 81       	ldd	r22, Y+6	; 0x06
    2262:	2f 31       	cpi	r18, 0x1F	; 31
    2264:	31 05       	cpc	r19, r1
    2266:	1c f0       	brlt	.+6      	; 0x226e <__fixsfsi+0x4e>
    2268:	66 23       	and	r22, r22
    226a:	f9 f0       	breq	.+62     	; 0x22aa <__fixsfsi+0x8a>
    226c:	23 c0       	rjmp	.+70     	; 0x22b4 <__fixsfsi+0x94>
    226e:	8e e1       	ldi	r24, 0x1E	; 30
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	82 1b       	sub	r24, r18
    2274:	93 0b       	sbc	r25, r19
    2276:	29 85       	ldd	r18, Y+9	; 0x09
    2278:	3a 85       	ldd	r19, Y+10	; 0x0a
    227a:	4b 85       	ldd	r20, Y+11	; 0x0b
    227c:	5c 85       	ldd	r21, Y+12	; 0x0c
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <__fixsfsi+0x68>
    2280:	56 95       	lsr	r21
    2282:	47 95       	ror	r20
    2284:	37 95       	ror	r19
    2286:	27 95       	ror	r18
    2288:	8a 95       	dec	r24
    228a:	d2 f7       	brpl	.-12     	; 0x2280 <__fixsfsi+0x60>
    228c:	66 23       	and	r22, r22
    228e:	b1 f0       	breq	.+44     	; 0x22bc <__fixsfsi+0x9c>
    2290:	50 95       	com	r21
    2292:	40 95       	com	r20
    2294:	30 95       	com	r19
    2296:	21 95       	neg	r18
    2298:	3f 4f       	sbci	r19, 0xFF	; 255
    229a:	4f 4f       	sbci	r20, 0xFF	; 255
    229c:	5f 4f       	sbci	r21, 0xFF	; 255
    229e:	0e c0       	rjmp	.+28     	; 0x22bc <__fixsfsi+0x9c>
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	09 c0       	rjmp	.+18     	; 0x22bc <__fixsfsi+0x9c>
    22aa:	2f ef       	ldi	r18, 0xFF	; 255
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f ef       	ldi	r20, 0xFF	; 255
    22b0:	5f e7       	ldi	r21, 0x7F	; 127
    22b2:	04 c0       	rjmp	.+8      	; 0x22bc <__fixsfsi+0x9c>
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	50 e8       	ldi	r21, 0x80	; 128
    22bc:	b9 01       	movw	r22, r18
    22be:	ca 01       	movw	r24, r20
    22c0:	2c 96       	adiw	r28, 0x0c	; 12
    22c2:	e2 e0       	ldi	r30, 0x02	; 2
    22c4:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__epilogue_restores__+0x20>

000022c8 <__floatunsisf>:
    22c8:	a8 e0       	ldi	r26, 0x08	; 8
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ea e6       	ldi	r30, 0x6A	; 106
    22ce:	f1 e1       	ldi	r31, 0x11	; 17
    22d0:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__prologue_saves__+0x10>
    22d4:	7b 01       	movw	r14, r22
    22d6:	8c 01       	movw	r16, r24
    22d8:	61 15       	cp	r22, r1
    22da:	71 05       	cpc	r23, r1
    22dc:	81 05       	cpc	r24, r1
    22de:	91 05       	cpc	r25, r1
    22e0:	19 f4       	brne	.+6      	; 0x22e8 <__floatunsisf+0x20>
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	60 c0       	rjmp	.+192    	; 0x23a8 <__floatunsisf+0xe0>
    22e8:	83 e0       	ldi	r24, 0x03	; 3
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	8e e1       	ldi	r24, 0x1E	; 30
    22ee:	c8 2e       	mov	r12, r24
    22f0:	d1 2c       	mov	r13, r1
    22f2:	dc 82       	std	Y+4, r13	; 0x04
    22f4:	cb 82       	std	Y+3, r12	; 0x03
    22f6:	ed 82       	std	Y+5, r14	; 0x05
    22f8:	fe 82       	std	Y+6, r15	; 0x06
    22fa:	0f 83       	std	Y+7, r16	; 0x07
    22fc:	18 87       	std	Y+8, r17	; 0x08
    22fe:	c8 01       	movw	r24, r16
    2300:	b7 01       	movw	r22, r14
    2302:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__clzsi2>
    2306:	fc 01       	movw	r30, r24
    2308:	31 97       	sbiw	r30, 0x01	; 1
    230a:	f7 ff       	sbrs	r31, 7
    230c:	3b c0       	rjmp	.+118    	; 0x2384 <__floatunsisf+0xbc>
    230e:	22 27       	eor	r18, r18
    2310:	33 27       	eor	r19, r19
    2312:	2e 1b       	sub	r18, r30
    2314:	3f 0b       	sbc	r19, r31
    2316:	57 01       	movw	r10, r14
    2318:	68 01       	movw	r12, r16
    231a:	02 2e       	mov	r0, r18
    231c:	04 c0       	rjmp	.+8      	; 0x2326 <__floatunsisf+0x5e>
    231e:	d6 94       	lsr	r13
    2320:	c7 94       	ror	r12
    2322:	b7 94       	ror	r11
    2324:	a7 94       	ror	r10
    2326:	0a 94       	dec	r0
    2328:	d2 f7       	brpl	.-12     	; 0x231e <__floatunsisf+0x56>
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	50 e0       	ldi	r21, 0x00	; 0
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	a0 e0       	ldi	r26, 0x00	; 0
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	04 c0       	rjmp	.+8      	; 0x2344 <__floatunsisf+0x7c>
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	aa 1f       	adc	r26, r26
    2342:	bb 1f       	adc	r27, r27
    2344:	2a 95       	dec	r18
    2346:	d2 f7       	brpl	.-12     	; 0x233c <__floatunsisf+0x74>
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	a1 09       	sbc	r26, r1
    234c:	b1 09       	sbc	r27, r1
    234e:	8e 21       	and	r24, r14
    2350:	9f 21       	and	r25, r15
    2352:	a0 23       	and	r26, r16
    2354:	b1 23       	and	r27, r17
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	a1 05       	cpc	r26, r1
    235a:	b1 05       	cpc	r27, r1
    235c:	21 f0       	breq	.+8      	; 0x2366 <__floatunsisf+0x9e>
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	70 e0       	ldi	r23, 0x00	; 0
    2366:	4a 29       	or	r20, r10
    2368:	5b 29       	or	r21, r11
    236a:	6c 29       	or	r22, r12
    236c:	7d 29       	or	r23, r13
    236e:	4d 83       	std	Y+5, r20	; 0x05
    2370:	5e 83       	std	Y+6, r21	; 0x06
    2372:	6f 83       	std	Y+7, r22	; 0x07
    2374:	78 87       	std	Y+8, r23	; 0x08
    2376:	8e e1       	ldi	r24, 0x1E	; 30
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	8e 1b       	sub	r24, r30
    237c:	9f 0b       	sbc	r25, r31
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	8b 83       	std	Y+3, r24	; 0x03
    2382:	12 c0       	rjmp	.+36     	; 0x23a8 <__floatunsisf+0xe0>
    2384:	30 97       	sbiw	r30, 0x00	; 0
    2386:	81 f0       	breq	.+32     	; 0x23a8 <__floatunsisf+0xe0>
    2388:	0e 2e       	mov	r0, r30
    238a:	04 c0       	rjmp	.+8      	; 0x2394 <__floatunsisf+0xcc>
    238c:	ee 0c       	add	r14, r14
    238e:	ff 1c       	adc	r15, r15
    2390:	00 1f       	adc	r16, r16
    2392:	11 1f       	adc	r17, r17
    2394:	0a 94       	dec	r0
    2396:	d2 f7       	brpl	.-12     	; 0x238c <__floatunsisf+0xc4>
    2398:	ed 82       	std	Y+5, r14	; 0x05
    239a:	fe 82       	std	Y+6, r15	; 0x06
    239c:	0f 83       	std	Y+7, r16	; 0x07
    239e:	18 87       	std	Y+8, r17	; 0x08
    23a0:	ce 1a       	sub	r12, r30
    23a2:	df 0a       	sbc	r13, r31
    23a4:	dc 82       	std	Y+4, r13	; 0x04
    23a6:	cb 82       	std	Y+3, r12	; 0x03
    23a8:	1a 82       	std	Y+2, r1	; 0x02
    23aa:	ce 01       	movw	r24, r28
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	0e 94 2c 12 	call	0x2458	; 0x2458 <__pack_f>
    23b2:	28 96       	adiw	r28, 0x08	; 8
    23b4:	ea e0       	ldi	r30, 0x0A	; 10
    23b6:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__epilogue_restores__+0x10>

000023ba <__clzsi2>:
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	7b 01       	movw	r14, r22
    23c4:	8c 01       	movw	r16, r24
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	e8 16       	cp	r14, r24
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	f8 06       	cpc	r15, r24
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	08 07       	cpc	r16, r24
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	18 07       	cpc	r17, r24
    23d6:	88 f4       	brcc	.+34     	; 0x23fa <__clzsi2+0x40>
    23d8:	8f ef       	ldi	r24, 0xFF	; 255
    23da:	e8 16       	cp	r14, r24
    23dc:	f1 04       	cpc	r15, r1
    23de:	01 05       	cpc	r16, r1
    23e0:	11 05       	cpc	r17, r1
    23e2:	31 f0       	breq	.+12     	; 0x23f0 <__clzsi2+0x36>
    23e4:	28 f0       	brcs	.+10     	; 0x23f0 <__clzsi2+0x36>
    23e6:	88 e0       	ldi	r24, 0x08	; 8
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a0 e0       	ldi	r26, 0x00	; 0
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	17 c0       	rjmp	.+46     	; 0x241e <__clzsi2+0x64>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e0       	ldi	r26, 0x00	; 0
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	12 c0       	rjmp	.+36     	; 0x241e <__clzsi2+0x64>
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	e8 16       	cp	r14, r24
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	f8 06       	cpc	r15, r24
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	08 07       	cpc	r16, r24
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	18 07       	cpc	r17, r24
    240a:	28 f0       	brcs	.+10     	; 0x2416 <__clzsi2+0x5c>
    240c:	88 e1       	ldi	r24, 0x18	; 24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	a0 e0       	ldi	r26, 0x00	; 0
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	04 c0       	rjmp	.+8      	; 0x241e <__clzsi2+0x64>
    2416:	80 e1       	ldi	r24, 0x10	; 16
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 e0       	ldi	r26, 0x00	; 0
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	20 e2       	ldi	r18, 0x20	; 32
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	28 1b       	sub	r18, r24
    2428:	39 0b       	sbc	r19, r25
    242a:	4a 0b       	sbc	r20, r26
    242c:	5b 0b       	sbc	r21, r27
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <__clzsi2+0x7e>
    2430:	16 95       	lsr	r17
    2432:	07 95       	ror	r16
    2434:	f7 94       	ror	r15
    2436:	e7 94       	ror	r14
    2438:	8a 95       	dec	r24
    243a:	d2 f7       	brpl	.-12     	; 0x2430 <__clzsi2+0x76>
    243c:	f7 01       	movw	r30, r14
    243e:	e6 5f       	subi	r30, 0xF6	; 246
    2440:	fd 4f       	sbci	r31, 0xFD	; 253
    2442:	80 81       	ld	r24, Z
    2444:	28 1b       	sub	r18, r24
    2446:	31 09       	sbc	r19, r1
    2448:	41 09       	sbc	r20, r1
    244a:	51 09       	sbc	r21, r1
    244c:	c9 01       	movw	r24, r18
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	08 95       	ret

00002458 <__pack_f>:
    2458:	df 92       	push	r13
    245a:	ef 92       	push	r14
    245c:	ff 92       	push	r15
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	fc 01       	movw	r30, r24
    2464:	e4 80       	ldd	r14, Z+4	; 0x04
    2466:	f5 80       	ldd	r15, Z+5	; 0x05
    2468:	06 81       	ldd	r16, Z+6	; 0x06
    246a:	17 81       	ldd	r17, Z+7	; 0x07
    246c:	d1 80       	ldd	r13, Z+1	; 0x01
    246e:	80 81       	ld	r24, Z
    2470:	82 30       	cpi	r24, 0x02	; 2
    2472:	48 f4       	brcc	.+18     	; 0x2486 <__pack_f+0x2e>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e1       	ldi	r26, 0x10	; 16
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e8 2a       	or	r14, r24
    247e:	f9 2a       	or	r15, r25
    2480:	0a 2b       	or	r16, r26
    2482:	1b 2b       	or	r17, r27
    2484:	a5 c0       	rjmp	.+330    	; 0x25d0 <__pack_f+0x178>
    2486:	84 30       	cpi	r24, 0x04	; 4
    2488:	09 f4       	brne	.+2      	; 0x248c <__pack_f+0x34>
    248a:	9f c0       	rjmp	.+318    	; 0x25ca <__pack_f+0x172>
    248c:	82 30       	cpi	r24, 0x02	; 2
    248e:	21 f4       	brne	.+8      	; 0x2498 <__pack_f+0x40>
    2490:	ee 24       	eor	r14, r14
    2492:	ff 24       	eor	r15, r15
    2494:	87 01       	movw	r16, r14
    2496:	05 c0       	rjmp	.+10     	; 0x24a2 <__pack_f+0x4a>
    2498:	e1 14       	cp	r14, r1
    249a:	f1 04       	cpc	r15, r1
    249c:	01 05       	cpc	r16, r1
    249e:	11 05       	cpc	r17, r1
    24a0:	19 f4       	brne	.+6      	; 0x24a8 <__pack_f+0x50>
    24a2:	e0 e0       	ldi	r30, 0x00	; 0
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	96 c0       	rjmp	.+300    	; 0x25d4 <__pack_f+0x17c>
    24a8:	62 81       	ldd	r22, Z+2	; 0x02
    24aa:	73 81       	ldd	r23, Z+3	; 0x03
    24ac:	9f ef       	ldi	r25, 0xFF	; 255
    24ae:	62 38       	cpi	r22, 0x82	; 130
    24b0:	79 07       	cpc	r23, r25
    24b2:	0c f0       	brlt	.+2      	; 0x24b6 <__pack_f+0x5e>
    24b4:	5b c0       	rjmp	.+182    	; 0x256c <__pack_f+0x114>
    24b6:	22 e8       	ldi	r18, 0x82	; 130
    24b8:	3f ef       	ldi	r19, 0xFF	; 255
    24ba:	26 1b       	sub	r18, r22
    24bc:	37 0b       	sbc	r19, r23
    24be:	2a 31       	cpi	r18, 0x1A	; 26
    24c0:	31 05       	cpc	r19, r1
    24c2:	2c f0       	brlt	.+10     	; 0x24ce <__pack_f+0x76>
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	2a c0       	rjmp	.+84     	; 0x2522 <__pack_f+0xca>
    24ce:	b8 01       	movw	r22, r16
    24d0:	a7 01       	movw	r20, r14
    24d2:	02 2e       	mov	r0, r18
    24d4:	04 c0       	rjmp	.+8      	; 0x24de <__pack_f+0x86>
    24d6:	76 95       	lsr	r23
    24d8:	67 95       	ror	r22
    24da:	57 95       	ror	r21
    24dc:	47 95       	ror	r20
    24de:	0a 94       	dec	r0
    24e0:	d2 f7       	brpl	.-12     	; 0x24d6 <__pack_f+0x7e>
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	a0 e0       	ldi	r26, 0x00	; 0
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <__pack_f+0x9c>
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	aa 1f       	adc	r26, r26
    24f2:	bb 1f       	adc	r27, r27
    24f4:	2a 95       	dec	r18
    24f6:	d2 f7       	brpl	.-12     	; 0x24ec <__pack_f+0x94>
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	a1 09       	sbc	r26, r1
    24fc:	b1 09       	sbc	r27, r1
    24fe:	8e 21       	and	r24, r14
    2500:	9f 21       	and	r25, r15
    2502:	a0 23       	and	r26, r16
    2504:	b1 23       	and	r27, r17
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	a1 05       	cpc	r26, r1
    250a:	b1 05       	cpc	r27, r1
    250c:	21 f0       	breq	.+8      	; 0x2516 <__pack_f+0xbe>
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	9a 01       	movw	r18, r20
    2518:	ab 01       	movw	r20, r22
    251a:	28 2b       	or	r18, r24
    251c:	39 2b       	or	r19, r25
    251e:	4a 2b       	or	r20, r26
    2520:	5b 2b       	or	r21, r27
    2522:	da 01       	movw	r26, r20
    2524:	c9 01       	movw	r24, r18
    2526:	8f 77       	andi	r24, 0x7F	; 127
    2528:	90 70       	andi	r25, 0x00	; 0
    252a:	a0 70       	andi	r26, 0x00	; 0
    252c:	b0 70       	andi	r27, 0x00	; 0
    252e:	80 34       	cpi	r24, 0x40	; 64
    2530:	91 05       	cpc	r25, r1
    2532:	a1 05       	cpc	r26, r1
    2534:	b1 05       	cpc	r27, r1
    2536:	39 f4       	brne	.+14     	; 0x2546 <__pack_f+0xee>
    2538:	27 ff       	sbrs	r18, 7
    253a:	09 c0       	rjmp	.+18     	; 0x254e <__pack_f+0xf6>
    253c:	20 5c       	subi	r18, 0xC0	; 192
    253e:	3f 4f       	sbci	r19, 0xFF	; 255
    2540:	4f 4f       	sbci	r20, 0xFF	; 255
    2542:	5f 4f       	sbci	r21, 0xFF	; 255
    2544:	04 c0       	rjmp	.+8      	; 0x254e <__pack_f+0xf6>
    2546:	21 5c       	subi	r18, 0xC1	; 193
    2548:	3f 4f       	sbci	r19, 0xFF	; 255
    254a:	4f 4f       	sbci	r20, 0xFF	; 255
    254c:	5f 4f       	sbci	r21, 0xFF	; 255
    254e:	e0 e0       	ldi	r30, 0x00	; 0
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	20 30       	cpi	r18, 0x00	; 0
    2554:	a0 e0       	ldi	r26, 0x00	; 0
    2556:	3a 07       	cpc	r19, r26
    2558:	a0 e0       	ldi	r26, 0x00	; 0
    255a:	4a 07       	cpc	r20, r26
    255c:	a0 e4       	ldi	r26, 0x40	; 64
    255e:	5a 07       	cpc	r21, r26
    2560:	10 f0       	brcs	.+4      	; 0x2566 <__pack_f+0x10e>
    2562:	e1 e0       	ldi	r30, 0x01	; 1
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	79 01       	movw	r14, r18
    2568:	8a 01       	movw	r16, r20
    256a:	27 c0       	rjmp	.+78     	; 0x25ba <__pack_f+0x162>
    256c:	60 38       	cpi	r22, 0x80	; 128
    256e:	71 05       	cpc	r23, r1
    2570:	64 f5       	brge	.+88     	; 0x25ca <__pack_f+0x172>
    2572:	fb 01       	movw	r30, r22
    2574:	e1 58       	subi	r30, 0x81	; 129
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	d8 01       	movw	r26, r16
    257a:	c7 01       	movw	r24, r14
    257c:	8f 77       	andi	r24, 0x7F	; 127
    257e:	90 70       	andi	r25, 0x00	; 0
    2580:	a0 70       	andi	r26, 0x00	; 0
    2582:	b0 70       	andi	r27, 0x00	; 0
    2584:	80 34       	cpi	r24, 0x40	; 64
    2586:	91 05       	cpc	r25, r1
    2588:	a1 05       	cpc	r26, r1
    258a:	b1 05       	cpc	r27, r1
    258c:	39 f4       	brne	.+14     	; 0x259c <__pack_f+0x144>
    258e:	e7 fe       	sbrs	r14, 7
    2590:	0d c0       	rjmp	.+26     	; 0x25ac <__pack_f+0x154>
    2592:	80 e4       	ldi	r24, 0x40	; 64
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e0       	ldi	r26, 0x00	; 0
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <__pack_f+0x14c>
    259c:	8f e3       	ldi	r24, 0x3F	; 63
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a0 e0       	ldi	r26, 0x00	; 0
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e8 0e       	add	r14, r24
    25a6:	f9 1e       	adc	r15, r25
    25a8:	0a 1f       	adc	r16, r26
    25aa:	1b 1f       	adc	r17, r27
    25ac:	17 ff       	sbrs	r17, 7
    25ae:	05 c0       	rjmp	.+10     	; 0x25ba <__pack_f+0x162>
    25b0:	16 95       	lsr	r17
    25b2:	07 95       	ror	r16
    25b4:	f7 94       	ror	r15
    25b6:	e7 94       	ror	r14
    25b8:	31 96       	adiw	r30, 0x01	; 1
    25ba:	87 e0       	ldi	r24, 0x07	; 7
    25bc:	16 95       	lsr	r17
    25be:	07 95       	ror	r16
    25c0:	f7 94       	ror	r15
    25c2:	e7 94       	ror	r14
    25c4:	8a 95       	dec	r24
    25c6:	d1 f7       	brne	.-12     	; 0x25bc <__pack_f+0x164>
    25c8:	05 c0       	rjmp	.+10     	; 0x25d4 <__pack_f+0x17c>
    25ca:	ee 24       	eor	r14, r14
    25cc:	ff 24       	eor	r15, r15
    25ce:	87 01       	movw	r16, r14
    25d0:	ef ef       	ldi	r30, 0xFF	; 255
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	6e 2f       	mov	r22, r30
    25d6:	67 95       	ror	r22
    25d8:	66 27       	eor	r22, r22
    25da:	67 95       	ror	r22
    25dc:	90 2f       	mov	r25, r16
    25de:	9f 77       	andi	r25, 0x7F	; 127
    25e0:	d7 94       	ror	r13
    25e2:	dd 24       	eor	r13, r13
    25e4:	d7 94       	ror	r13
    25e6:	8e 2f       	mov	r24, r30
    25e8:	86 95       	lsr	r24
    25ea:	49 2f       	mov	r20, r25
    25ec:	46 2b       	or	r20, r22
    25ee:	58 2f       	mov	r21, r24
    25f0:	5d 29       	or	r21, r13
    25f2:	b7 01       	movw	r22, r14
    25f4:	ca 01       	movw	r24, r20
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	ff 90       	pop	r15
    25fc:	ef 90       	pop	r14
    25fe:	df 90       	pop	r13
    2600:	08 95       	ret

00002602 <__unpack_f>:
    2602:	fc 01       	movw	r30, r24
    2604:	db 01       	movw	r26, r22
    2606:	40 81       	ld	r20, Z
    2608:	51 81       	ldd	r21, Z+1	; 0x01
    260a:	22 81       	ldd	r18, Z+2	; 0x02
    260c:	62 2f       	mov	r22, r18
    260e:	6f 77       	andi	r22, 0x7F	; 127
    2610:	70 e0       	ldi	r23, 0x00	; 0
    2612:	22 1f       	adc	r18, r18
    2614:	22 27       	eor	r18, r18
    2616:	22 1f       	adc	r18, r18
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	89 2f       	mov	r24, r25
    261c:	88 0f       	add	r24, r24
    261e:	82 2b       	or	r24, r18
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	99 1f       	adc	r25, r25
    2626:	99 27       	eor	r25, r25
    2628:	99 1f       	adc	r25, r25
    262a:	11 96       	adiw	r26, 0x01	; 1
    262c:	9c 93       	st	X, r25
    262e:	11 97       	sbiw	r26, 0x01	; 1
    2630:	21 15       	cp	r18, r1
    2632:	31 05       	cpc	r19, r1
    2634:	a9 f5       	brne	.+106    	; 0x26a0 <__unpack_f+0x9e>
    2636:	41 15       	cp	r20, r1
    2638:	51 05       	cpc	r21, r1
    263a:	61 05       	cpc	r22, r1
    263c:	71 05       	cpc	r23, r1
    263e:	11 f4       	brne	.+4      	; 0x2644 <__unpack_f+0x42>
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	37 c0       	rjmp	.+110    	; 0x26b2 <__unpack_f+0xb0>
    2644:	82 e8       	ldi	r24, 0x82	; 130
    2646:	9f ef       	ldi	r25, 0xFF	; 255
    2648:	13 96       	adiw	r26, 0x03	; 3
    264a:	9c 93       	st	X, r25
    264c:	8e 93       	st	-X, r24
    264e:	12 97       	sbiw	r26, 0x02	; 2
    2650:	9a 01       	movw	r18, r20
    2652:	ab 01       	movw	r20, r22
    2654:	67 e0       	ldi	r22, 0x07	; 7
    2656:	22 0f       	add	r18, r18
    2658:	33 1f       	adc	r19, r19
    265a:	44 1f       	adc	r20, r20
    265c:	55 1f       	adc	r21, r21
    265e:	6a 95       	dec	r22
    2660:	d1 f7       	brne	.-12     	; 0x2656 <__unpack_f+0x54>
    2662:	83 e0       	ldi	r24, 0x03	; 3
    2664:	8c 93       	st	X, r24
    2666:	0d c0       	rjmp	.+26     	; 0x2682 <__unpack_f+0x80>
    2668:	22 0f       	add	r18, r18
    266a:	33 1f       	adc	r19, r19
    266c:	44 1f       	adc	r20, r20
    266e:	55 1f       	adc	r21, r21
    2670:	12 96       	adiw	r26, 0x02	; 2
    2672:	8d 91       	ld	r24, X+
    2674:	9c 91       	ld	r25, X
    2676:	13 97       	sbiw	r26, 0x03	; 3
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	13 96       	adiw	r26, 0x03	; 3
    267c:	9c 93       	st	X, r25
    267e:	8e 93       	st	-X, r24
    2680:	12 97       	sbiw	r26, 0x02	; 2
    2682:	20 30       	cpi	r18, 0x00	; 0
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	38 07       	cpc	r19, r24
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	48 07       	cpc	r20, r24
    268c:	80 e4       	ldi	r24, 0x40	; 64
    268e:	58 07       	cpc	r21, r24
    2690:	58 f3       	brcs	.-42     	; 0x2668 <__unpack_f+0x66>
    2692:	14 96       	adiw	r26, 0x04	; 4
    2694:	2d 93       	st	X+, r18
    2696:	3d 93       	st	X+, r19
    2698:	4d 93       	st	X+, r20
    269a:	5c 93       	st	X, r21
    269c:	17 97       	sbiw	r26, 0x07	; 7
    269e:	08 95       	ret
    26a0:	2f 3f       	cpi	r18, 0xFF	; 255
    26a2:	31 05       	cpc	r19, r1
    26a4:	79 f4       	brne	.+30     	; 0x26c4 <__unpack_f+0xc2>
    26a6:	41 15       	cp	r20, r1
    26a8:	51 05       	cpc	r21, r1
    26aa:	61 05       	cpc	r22, r1
    26ac:	71 05       	cpc	r23, r1
    26ae:	19 f4       	brne	.+6      	; 0x26b6 <__unpack_f+0xb4>
    26b0:	84 e0       	ldi	r24, 0x04	; 4
    26b2:	8c 93       	st	X, r24
    26b4:	08 95       	ret
    26b6:	64 ff       	sbrs	r22, 4
    26b8:	03 c0       	rjmp	.+6      	; 0x26c0 <__unpack_f+0xbe>
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	8c 93       	st	X, r24
    26be:	12 c0       	rjmp	.+36     	; 0x26e4 <__unpack_f+0xe2>
    26c0:	1c 92       	st	X, r1
    26c2:	10 c0       	rjmp	.+32     	; 0x26e4 <__unpack_f+0xe2>
    26c4:	2f 57       	subi	r18, 0x7F	; 127
    26c6:	30 40       	sbci	r19, 0x00	; 0
    26c8:	13 96       	adiw	r26, 0x03	; 3
    26ca:	3c 93       	st	X, r19
    26cc:	2e 93       	st	-X, r18
    26ce:	12 97       	sbiw	r26, 0x02	; 2
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	8c 93       	st	X, r24
    26d4:	87 e0       	ldi	r24, 0x07	; 7
    26d6:	44 0f       	add	r20, r20
    26d8:	55 1f       	adc	r21, r21
    26da:	66 1f       	adc	r22, r22
    26dc:	77 1f       	adc	r23, r23
    26de:	8a 95       	dec	r24
    26e0:	d1 f7       	brne	.-12     	; 0x26d6 <__unpack_f+0xd4>
    26e2:	70 64       	ori	r23, 0x40	; 64
    26e4:	14 96       	adiw	r26, 0x04	; 4
    26e6:	4d 93       	st	X+, r20
    26e8:	5d 93       	st	X+, r21
    26ea:	6d 93       	st	X+, r22
    26ec:	7c 93       	st	X, r23
    26ee:	17 97       	sbiw	r26, 0x07	; 7
    26f0:	08 95       	ret

000026f2 <__fpcmp_parts_f>:
    26f2:	1f 93       	push	r17
    26f4:	dc 01       	movw	r26, r24
    26f6:	fb 01       	movw	r30, r22
    26f8:	9c 91       	ld	r25, X
    26fa:	92 30       	cpi	r25, 0x02	; 2
    26fc:	08 f4       	brcc	.+2      	; 0x2700 <__fpcmp_parts_f+0xe>
    26fe:	47 c0       	rjmp	.+142    	; 0x278e <__fpcmp_parts_f+0x9c>
    2700:	80 81       	ld	r24, Z
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	08 f4       	brcc	.+2      	; 0x2708 <__fpcmp_parts_f+0x16>
    2706:	43 c0       	rjmp	.+134    	; 0x278e <__fpcmp_parts_f+0x9c>
    2708:	94 30       	cpi	r25, 0x04	; 4
    270a:	51 f4       	brne	.+20     	; 0x2720 <__fpcmp_parts_f+0x2e>
    270c:	11 96       	adiw	r26, 0x01	; 1
    270e:	1c 91       	ld	r17, X
    2710:	84 30       	cpi	r24, 0x04	; 4
    2712:	99 f5       	brne	.+102    	; 0x277a <__fpcmp_parts_f+0x88>
    2714:	81 81       	ldd	r24, Z+1	; 0x01
    2716:	68 2f       	mov	r22, r24
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	61 1b       	sub	r22, r17
    271c:	71 09       	sbc	r23, r1
    271e:	3f c0       	rjmp	.+126    	; 0x279e <__fpcmp_parts_f+0xac>
    2720:	84 30       	cpi	r24, 0x04	; 4
    2722:	21 f0       	breq	.+8      	; 0x272c <__fpcmp_parts_f+0x3a>
    2724:	92 30       	cpi	r25, 0x02	; 2
    2726:	31 f4       	brne	.+12     	; 0x2734 <__fpcmp_parts_f+0x42>
    2728:	82 30       	cpi	r24, 0x02	; 2
    272a:	b9 f1       	breq	.+110    	; 0x279a <__fpcmp_parts_f+0xa8>
    272c:	81 81       	ldd	r24, Z+1	; 0x01
    272e:	88 23       	and	r24, r24
    2730:	89 f1       	breq	.+98     	; 0x2794 <__fpcmp_parts_f+0xa2>
    2732:	2d c0       	rjmp	.+90     	; 0x278e <__fpcmp_parts_f+0x9c>
    2734:	11 96       	adiw	r26, 0x01	; 1
    2736:	1c 91       	ld	r17, X
    2738:	11 97       	sbiw	r26, 0x01	; 1
    273a:	82 30       	cpi	r24, 0x02	; 2
    273c:	f1 f0       	breq	.+60     	; 0x277a <__fpcmp_parts_f+0x88>
    273e:	81 81       	ldd	r24, Z+1	; 0x01
    2740:	18 17       	cp	r17, r24
    2742:	d9 f4       	brne	.+54     	; 0x277a <__fpcmp_parts_f+0x88>
    2744:	12 96       	adiw	r26, 0x02	; 2
    2746:	2d 91       	ld	r18, X+
    2748:	3c 91       	ld	r19, X
    274a:	13 97       	sbiw	r26, 0x03	; 3
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	82 17       	cp	r24, r18
    2752:	93 07       	cpc	r25, r19
    2754:	94 f0       	brlt	.+36     	; 0x277a <__fpcmp_parts_f+0x88>
    2756:	28 17       	cp	r18, r24
    2758:	39 07       	cpc	r19, r25
    275a:	bc f0       	brlt	.+46     	; 0x278a <__fpcmp_parts_f+0x98>
    275c:	14 96       	adiw	r26, 0x04	; 4
    275e:	8d 91       	ld	r24, X+
    2760:	9d 91       	ld	r25, X+
    2762:	0d 90       	ld	r0, X+
    2764:	bc 91       	ld	r27, X
    2766:	a0 2d       	mov	r26, r0
    2768:	24 81       	ldd	r18, Z+4	; 0x04
    276a:	35 81       	ldd	r19, Z+5	; 0x05
    276c:	46 81       	ldd	r20, Z+6	; 0x06
    276e:	57 81       	ldd	r21, Z+7	; 0x07
    2770:	28 17       	cp	r18, r24
    2772:	39 07       	cpc	r19, r25
    2774:	4a 07       	cpc	r20, r26
    2776:	5b 07       	cpc	r21, r27
    2778:	18 f4       	brcc	.+6      	; 0x2780 <__fpcmp_parts_f+0x8e>
    277a:	11 23       	and	r17, r17
    277c:	41 f0       	breq	.+16     	; 0x278e <__fpcmp_parts_f+0x9c>
    277e:	0a c0       	rjmp	.+20     	; 0x2794 <__fpcmp_parts_f+0xa2>
    2780:	82 17       	cp	r24, r18
    2782:	93 07       	cpc	r25, r19
    2784:	a4 07       	cpc	r26, r20
    2786:	b5 07       	cpc	r27, r21
    2788:	40 f4       	brcc	.+16     	; 0x279a <__fpcmp_parts_f+0xa8>
    278a:	11 23       	and	r17, r17
    278c:	19 f0       	breq	.+6      	; 0x2794 <__fpcmp_parts_f+0xa2>
    278e:	61 e0       	ldi	r22, 0x01	; 1
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	05 c0       	rjmp	.+10     	; 0x279e <__fpcmp_parts_f+0xac>
    2794:	6f ef       	ldi	r22, 0xFF	; 255
    2796:	7f ef       	ldi	r23, 0xFF	; 255
    2798:	02 c0       	rjmp	.+4      	; 0x279e <__fpcmp_parts_f+0xac>
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	cb 01       	movw	r24, r22
    27a0:	1f 91       	pop	r17
    27a2:	08 95       	ret

000027a4 <__udivmodhi4>:
    27a4:	aa 1b       	sub	r26, r26
    27a6:	bb 1b       	sub	r27, r27
    27a8:	51 e1       	ldi	r21, 0x11	; 17
    27aa:	07 c0       	rjmp	.+14     	; 0x27ba <__udivmodhi4_ep>

000027ac <__udivmodhi4_loop>:
    27ac:	aa 1f       	adc	r26, r26
    27ae:	bb 1f       	adc	r27, r27
    27b0:	a6 17       	cp	r26, r22
    27b2:	b7 07       	cpc	r27, r23
    27b4:	10 f0       	brcs	.+4      	; 0x27ba <__udivmodhi4_ep>
    27b6:	a6 1b       	sub	r26, r22
    27b8:	b7 0b       	sbc	r27, r23

000027ba <__udivmodhi4_ep>:
    27ba:	88 1f       	adc	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	5a 95       	dec	r21
    27c0:	a9 f7       	brne	.-22     	; 0x27ac <__udivmodhi4_loop>
    27c2:	80 95       	com	r24
    27c4:	90 95       	com	r25
    27c6:	bc 01       	movw	r22, r24
    27c8:	cd 01       	movw	r24, r26
    27ca:	08 95       	ret

000027cc <__prologue_saves__>:
    27cc:	2f 92       	push	r2
    27ce:	3f 92       	push	r3
    27d0:	4f 92       	push	r4
    27d2:	5f 92       	push	r5
    27d4:	6f 92       	push	r6
    27d6:	7f 92       	push	r7
    27d8:	8f 92       	push	r8
    27da:	9f 92       	push	r9
    27dc:	af 92       	push	r10
    27de:	bf 92       	push	r11
    27e0:	cf 92       	push	r12
    27e2:	df 92       	push	r13
    27e4:	ef 92       	push	r14
    27e6:	ff 92       	push	r15
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	ca 1b       	sub	r28, r26
    27f6:	db 0b       	sbc	r29, r27
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	19 94       	eijmp

00002804 <__epilogue_restores__>:
    2804:	2a 88       	ldd	r2, Y+18	; 0x12
    2806:	39 88       	ldd	r3, Y+17	; 0x11
    2808:	48 88       	ldd	r4, Y+16	; 0x10
    280a:	5f 84       	ldd	r5, Y+15	; 0x0f
    280c:	6e 84       	ldd	r6, Y+14	; 0x0e
    280e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2810:	8c 84       	ldd	r8, Y+12	; 0x0c
    2812:	9b 84       	ldd	r9, Y+11	; 0x0b
    2814:	aa 84       	ldd	r10, Y+10	; 0x0a
    2816:	b9 84       	ldd	r11, Y+9	; 0x09
    2818:	c8 84       	ldd	r12, Y+8	; 0x08
    281a:	df 80       	ldd	r13, Y+7	; 0x07
    281c:	ee 80       	ldd	r14, Y+6	; 0x06
    281e:	fd 80       	ldd	r15, Y+5	; 0x05
    2820:	0c 81       	ldd	r16, Y+4	; 0x04
    2822:	1b 81       	ldd	r17, Y+3	; 0x03
    2824:	aa 81       	ldd	r26, Y+2	; 0x02
    2826:	b9 81       	ldd	r27, Y+1	; 0x01
    2828:	ce 0f       	add	r28, r30
    282a:	d1 1d       	adc	r29, r1
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	ed 01       	movw	r28, r26
    2838:	08 95       	ret

0000283a <pow>:
    283a:	fa 01       	movw	r30, r20
    283c:	ee 0f       	add	r30, r30
    283e:	ff 1f       	adc	r31, r31
    2840:	30 96       	adiw	r30, 0x00	; 0
    2842:	21 05       	cpc	r18, r1
    2844:	31 05       	cpc	r19, r1
    2846:	99 f1       	breq	.+102    	; 0x28ae <pow+0x74>
    2848:	61 15       	cp	r22, r1
    284a:	71 05       	cpc	r23, r1
    284c:	61 f4       	brne	.+24     	; 0x2866 <pow+0x2c>
    284e:	80 38       	cpi	r24, 0x80	; 128
    2850:	bf e3       	ldi	r27, 0x3F	; 63
    2852:	9b 07       	cpc	r25, r27
    2854:	49 f1       	breq	.+82     	; 0x28a8 <pow+0x6e>
    2856:	68 94       	set
    2858:	90 38       	cpi	r25, 0x80	; 128
    285a:	81 05       	cpc	r24, r1
    285c:	61 f0       	breq	.+24     	; 0x2876 <pow+0x3c>
    285e:	80 38       	cpi	r24, 0x80	; 128
    2860:	bf ef       	ldi	r27, 0xFF	; 255
    2862:	9b 07       	cpc	r25, r27
    2864:	41 f0       	breq	.+16     	; 0x2876 <pow+0x3c>
    2866:	99 23       	and	r25, r25
    2868:	42 f5       	brpl	.+80     	; 0x28ba <pow+0x80>
    286a:	ff 3f       	cpi	r31, 0xFF	; 255
    286c:	e1 05       	cpc	r30, r1
    286e:	31 05       	cpc	r19, r1
    2870:	21 05       	cpc	r18, r1
    2872:	11 f1       	breq	.+68     	; 0x28b8 <pow+0x7e>
    2874:	e8 94       	clt
    2876:	08 94       	sec
    2878:	e7 95       	ror	r30
    287a:	d9 01       	movw	r26, r18
    287c:	aa 23       	and	r26, r26
    287e:	29 f4       	brne	.+10     	; 0x288a <pow+0x50>
    2880:	ab 2f       	mov	r26, r27
    2882:	be 2f       	mov	r27, r30
    2884:	f8 5f       	subi	r31, 0xF8	; 248
    2886:	d0 f3       	brcs	.-12     	; 0x287c <pow+0x42>
    2888:	10 c0       	rjmp	.+32     	; 0x28aa <pow+0x70>
    288a:	ff 5f       	subi	r31, 0xFF	; 255
    288c:	70 f4       	brcc	.+28     	; 0x28aa <pow+0x70>
    288e:	a6 95       	lsr	r26
    2890:	e0 f7       	brcc	.-8      	; 0x288a <pow+0x50>
    2892:	f7 39       	cpi	r31, 0x97	; 151
    2894:	50 f0       	brcs	.+20     	; 0x28aa <pow+0x70>
    2896:	19 f0       	breq	.+6      	; 0x289e <pow+0x64>
    2898:	ff 3a       	cpi	r31, 0xAF	; 175
    289a:	38 f4       	brcc	.+14     	; 0x28aa <pow+0x70>
    289c:	9f 77       	andi	r25, 0x7F	; 127
    289e:	9f 93       	push	r25
    28a0:	0c d0       	rcall	.+24     	; 0x28ba <pow+0x80>
    28a2:	0f 90       	pop	r0
    28a4:	07 fc       	sbrc	r0, 7
    28a6:	90 58       	subi	r25, 0x80	; 128
    28a8:	08 95       	ret
    28aa:	3e f0       	brts	.+14     	; 0x28ba <pow+0x80>
    28ac:	49 c0       	rjmp	.+146    	; 0x2940 <__fp_nan>
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	70 e0       	ldi	r23, 0x00	; 0
    28b2:	80 e8       	ldi	r24, 0x80	; 128
    28b4:	9f e3       	ldi	r25, 0x3F	; 63
    28b6:	08 95       	ret
    28b8:	4f e7       	ldi	r20, 0x7F	; 127
    28ba:	9f 77       	andi	r25, 0x7F	; 127
    28bc:	5f 93       	push	r21
    28be:	4f 93       	push	r20
    28c0:	3f 93       	push	r19
    28c2:	2f 93       	push	r18
    28c4:	d0 d0       	rcall	.+416    	; 0x2a66 <log>
    28c6:	2f 91       	pop	r18
    28c8:	3f 91       	pop	r19
    28ca:	4f 91       	pop	r20
    28cc:	5f 91       	pop	r21
    28ce:	74 da       	rcall	.-2840   	; 0x1db8 <__mulsf3>
    28d0:	05 c0       	rjmp	.+10     	; 0x28dc <exp>
    28d2:	19 f4       	brne	.+6      	; 0x28da <pow+0xa0>
    28d4:	0e f0       	brts	.+2      	; 0x28d8 <pow+0x9e>
    28d6:	2e c0       	rjmp	.+92     	; 0x2934 <__fp_inf>
    28d8:	7d c0       	rjmp	.+250    	; 0x29d4 <__fp_zero>
    28da:	32 c0       	rjmp	.+100    	; 0x2940 <__fp_nan>

000028dc <exp>:
    28dc:	61 d0       	rcall	.+194    	; 0x29a0 <__fp_splitA>
    28de:	c8 f3       	brcs	.-14     	; 0x28d2 <pow+0x98>
    28e0:	96 38       	cpi	r25, 0x86	; 134
    28e2:	c0 f7       	brcc	.-16     	; 0x28d4 <pow+0x9a>
    28e4:	07 f8       	bld	r0, 7
    28e6:	0f 92       	push	r0
    28e8:	e8 94       	clt
    28ea:	2b e3       	ldi	r18, 0x3B	; 59
    28ec:	3a ea       	ldi	r19, 0xAA	; 170
    28ee:	48 eb       	ldi	r20, 0xB8	; 184
    28f0:	5f e7       	ldi	r21, 0x7F	; 127
    28f2:	38 d1       	rcall	.+624    	; 0x2b64 <__mulsf3_pse>
    28f4:	0f 92       	push	r0
    28f6:	0f 92       	push	r0
    28f8:	0f 92       	push	r0
    28fa:	4d b7       	in	r20, 0x3d	; 61
    28fc:	5e b7       	in	r21, 0x3e	; 62
    28fe:	0f 92       	push	r0
    2900:	f2 d0       	rcall	.+484    	; 0x2ae6 <modf>
    2902:	e4 ee       	ldi	r30, 0xE4	; 228
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	1f d0       	rcall	.+62     	; 0x2946 <__fp_powser>
    2908:	4f 91       	pop	r20
    290a:	5f 91       	pop	r21
    290c:	ef 91       	pop	r30
    290e:	ff 91       	pop	r31
    2910:	e5 95       	asr	r30
    2912:	ee 1f       	adc	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	49 f0       	breq	.+18     	; 0x292a <exp+0x4e>
    2918:	fe 57       	subi	r31, 0x7E	; 126
    291a:	e0 68       	ori	r30, 0x80	; 128
    291c:	44 27       	eor	r20, r20
    291e:	ee 0f       	add	r30, r30
    2920:	44 1f       	adc	r20, r20
    2922:	fa 95       	dec	r31
    2924:	e1 f7       	brne	.-8      	; 0x291e <exp+0x42>
    2926:	41 95       	neg	r20
    2928:	55 0b       	sbc	r21, r21
    292a:	64 d0       	rcall	.+200    	; 0x29f4 <ldexp>
    292c:	0f 90       	pop	r0
    292e:	07 fe       	sbrs	r0, 7
    2930:	58 c0       	rjmp	.+176    	; 0x29e2 <inverse>
    2932:	08 95       	ret

00002934 <__fp_inf>:
    2934:	97 f9       	bld	r25, 7
    2936:	9f 67       	ori	r25, 0x7F	; 127
    2938:	80 e8       	ldi	r24, 0x80	; 128
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	60 e0       	ldi	r22, 0x00	; 0
    293e:	08 95       	ret

00002940 <__fp_nan>:
    2940:	9f ef       	ldi	r25, 0xFF	; 255
    2942:	80 ec       	ldi	r24, 0xC0	; 192
    2944:	08 95       	ret

00002946 <__fp_powser>:
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	1f 93       	push	r17
    294c:	0f 93       	push	r16
    294e:	ff 92       	push	r15
    2950:	ef 92       	push	r14
    2952:	df 92       	push	r13
    2954:	7b 01       	movw	r14, r22
    2956:	8c 01       	movw	r16, r24
    2958:	68 94       	set
    295a:	05 c0       	rjmp	.+10     	; 0x2966 <__fp_powser+0x20>
    295c:	da 2e       	mov	r13, r26
    295e:	ef 01       	movw	r28, r30
    2960:	ff d0       	rcall	.+510    	; 0x2b60 <__mulsf3x>
    2962:	fe 01       	movw	r30, r28
    2964:	e8 94       	clt
    2966:	a5 91       	lpm	r26, Z+
    2968:	25 91       	lpm	r18, Z+
    296a:	35 91       	lpm	r19, Z+
    296c:	45 91       	lpm	r20, Z+
    296e:	55 91       	lpm	r21, Z+
    2970:	ae f3       	brts	.-22     	; 0x295c <__fp_powser+0x16>
    2972:	ef 01       	movw	r28, r30
    2974:	59 d1       	rcall	.+690    	; 0x2c28 <__addsf3x>
    2976:	fe 01       	movw	r30, r28
    2978:	97 01       	movw	r18, r14
    297a:	a8 01       	movw	r20, r16
    297c:	da 94       	dec	r13
    297e:	79 f7       	brne	.-34     	; 0x295e <__fp_powser+0x18>
    2980:	df 90       	pop	r13
    2982:	ef 90       	pop	r14
    2984:	ff 90       	pop	r15
    2986:	0f 91       	pop	r16
    2988:	1f 91       	pop	r17
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <__fp_split3>:
    2990:	57 fd       	sbrc	r21, 7
    2992:	90 58       	subi	r25, 0x80	; 128
    2994:	44 0f       	add	r20, r20
    2996:	55 1f       	adc	r21, r21
    2998:	59 f0       	breq	.+22     	; 0x29b0 <__fp_splitA+0x10>
    299a:	5f 3f       	cpi	r21, 0xFF	; 255
    299c:	71 f0       	breq	.+28     	; 0x29ba <__fp_splitA+0x1a>
    299e:	47 95       	ror	r20

000029a0 <__fp_splitA>:
    29a0:	88 0f       	add	r24, r24
    29a2:	97 fb       	bst	r25, 7
    29a4:	99 1f       	adc	r25, r25
    29a6:	61 f0       	breq	.+24     	; 0x29c0 <__fp_splitA+0x20>
    29a8:	9f 3f       	cpi	r25, 0xFF	; 255
    29aa:	79 f0       	breq	.+30     	; 0x29ca <__fp_splitA+0x2a>
    29ac:	87 95       	ror	r24
    29ae:	08 95       	ret
    29b0:	12 16       	cp	r1, r18
    29b2:	13 06       	cpc	r1, r19
    29b4:	14 06       	cpc	r1, r20
    29b6:	55 1f       	adc	r21, r21
    29b8:	f2 cf       	rjmp	.-28     	; 0x299e <__fp_split3+0xe>
    29ba:	46 95       	lsr	r20
    29bc:	f1 df       	rcall	.-30     	; 0x29a0 <__fp_splitA>
    29be:	08 c0       	rjmp	.+16     	; 0x29d0 <__fp_splitA+0x30>
    29c0:	16 16       	cp	r1, r22
    29c2:	17 06       	cpc	r1, r23
    29c4:	18 06       	cpc	r1, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	f1 cf       	rjmp	.-30     	; 0x29ac <__fp_splitA+0xc>
    29ca:	86 95       	lsr	r24
    29cc:	71 05       	cpc	r23, r1
    29ce:	61 05       	cpc	r22, r1
    29d0:	08 94       	sec
    29d2:	08 95       	ret

000029d4 <__fp_zero>:
    29d4:	e8 94       	clt

000029d6 <__fp_szero>:
    29d6:	bb 27       	eor	r27, r27
    29d8:	66 27       	eor	r22, r22
    29da:	77 27       	eor	r23, r23
    29dc:	cb 01       	movw	r24, r22
    29de:	97 f9       	bld	r25, 7
    29e0:	08 95       	ret

000029e2 <inverse>:
    29e2:	9b 01       	movw	r18, r22
    29e4:	ac 01       	movw	r20, r24
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	80 e8       	ldi	r24, 0x80	; 128
    29ec:	9f e3       	ldi	r25, 0x3F	; 63
    29ee:	de ca       	rjmp	.-2628   	; 0x1fac <__divsf3>
    29f0:	a1 cf       	rjmp	.-190    	; 0x2934 <__fp_inf>
    29f2:	6d c1       	rjmp	.+730    	; 0x2cce <__fp_mpack>

000029f4 <ldexp>:
    29f4:	d5 df       	rcall	.-86     	; 0x29a0 <__fp_splitA>
    29f6:	e8 f3       	brcs	.-6      	; 0x29f2 <inverse+0x10>
    29f8:	99 23       	and	r25, r25
    29fa:	d9 f3       	breq	.-10     	; 0x29f2 <inverse+0x10>
    29fc:	94 0f       	add	r25, r20
    29fe:	51 1d       	adc	r21, r1
    2a00:	bb f3       	brvs	.-18     	; 0x29f0 <inverse+0xe>
    2a02:	91 50       	subi	r25, 0x01	; 1
    2a04:	50 40       	sbci	r21, 0x00	; 0
    2a06:	94 f0       	brlt	.+36     	; 0x2a2c <ldexp+0x38>
    2a08:	59 f0       	breq	.+22     	; 0x2a20 <ldexp+0x2c>
    2a0a:	88 23       	and	r24, r24
    2a0c:	32 f0       	brmi	.+12     	; 0x2a1a <ldexp+0x26>
    2a0e:	66 0f       	add	r22, r22
    2a10:	77 1f       	adc	r23, r23
    2a12:	88 1f       	adc	r24, r24
    2a14:	91 50       	subi	r25, 0x01	; 1
    2a16:	50 40       	sbci	r21, 0x00	; 0
    2a18:	c1 f7       	brne	.-16     	; 0x2a0a <ldexp+0x16>
    2a1a:	9e 3f       	cpi	r25, 0xFE	; 254
    2a1c:	51 05       	cpc	r21, r1
    2a1e:	44 f7       	brge	.-48     	; 0x29f0 <inverse+0xe>
    2a20:	88 0f       	add	r24, r24
    2a22:	91 1d       	adc	r25, r1
    2a24:	96 95       	lsr	r25
    2a26:	87 95       	ror	r24
    2a28:	97 f9       	bld	r25, 7
    2a2a:	08 95       	ret
    2a2c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a2e:	ac f0       	brlt	.+42     	; 0x2a5a <ldexp+0x66>
    2a30:	98 3e       	cpi	r25, 0xE8	; 232
    2a32:	9c f0       	brlt	.+38     	; 0x2a5a <ldexp+0x66>
    2a34:	bb 27       	eor	r27, r27
    2a36:	86 95       	lsr	r24
    2a38:	77 95       	ror	r23
    2a3a:	67 95       	ror	r22
    2a3c:	b7 95       	ror	r27
    2a3e:	08 f4       	brcc	.+2      	; 0x2a42 <ldexp+0x4e>
    2a40:	b1 60       	ori	r27, 0x01	; 1
    2a42:	93 95       	inc	r25
    2a44:	c1 f7       	brne	.-16     	; 0x2a36 <ldexp+0x42>
    2a46:	bb 0f       	add	r27, r27
    2a48:	58 f7       	brcc	.-42     	; 0x2a20 <ldexp+0x2c>
    2a4a:	11 f4       	brne	.+4      	; 0x2a50 <ldexp+0x5c>
    2a4c:	60 ff       	sbrs	r22, 0
    2a4e:	e8 cf       	rjmp	.-48     	; 0x2a20 <ldexp+0x2c>
    2a50:	6f 5f       	subi	r22, 0xFF	; 255
    2a52:	7f 4f       	sbci	r23, 0xFF	; 255
    2a54:	8f 4f       	sbci	r24, 0xFF	; 255
    2a56:	9f 4f       	sbci	r25, 0xFF	; 255
    2a58:	e3 cf       	rjmp	.-58     	; 0x2a20 <ldexp+0x2c>
    2a5a:	bd cf       	rjmp	.-134    	; 0x29d6 <__fp_szero>
    2a5c:	0e f0       	brts	.+2      	; 0x2a60 <ldexp+0x6c>
    2a5e:	37 c1       	rjmp	.+622    	; 0x2cce <__fp_mpack>
    2a60:	6f cf       	rjmp	.-290    	; 0x2940 <__fp_nan>
    2a62:	68 94       	set
    2a64:	67 cf       	rjmp	.-306    	; 0x2934 <__fp_inf>

00002a66 <log>:
    2a66:	9c df       	rcall	.-200    	; 0x29a0 <__fp_splitA>
    2a68:	c8 f3       	brcs	.-14     	; 0x2a5c <ldexp+0x68>
    2a6a:	99 23       	and	r25, r25
    2a6c:	d1 f3       	breq	.-12     	; 0x2a62 <ldexp+0x6e>
    2a6e:	c6 f3       	brts	.-16     	; 0x2a60 <ldexp+0x6c>
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	1f 93       	push	r17
    2a76:	0f 93       	push	r16
    2a78:	ff 92       	push	r15
    2a7a:	c9 2f       	mov	r28, r25
    2a7c:	dd 27       	eor	r29, r29
    2a7e:	88 23       	and	r24, r24
    2a80:	2a f0       	brmi	.+10     	; 0x2a8c <log+0x26>
    2a82:	21 97       	sbiw	r28, 0x01	; 1
    2a84:	66 0f       	add	r22, r22
    2a86:	77 1f       	adc	r23, r23
    2a88:	88 1f       	adc	r24, r24
    2a8a:	da f7       	brpl	.-10     	; 0x2a82 <log+0x1c>
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	5f eb       	ldi	r21, 0xBF	; 191
    2a94:	9f e3       	ldi	r25, 0x3F	; 63
    2a96:	88 39       	cpi	r24, 0x98	; 152
    2a98:	20 f0       	brcs	.+8      	; 0x2aa2 <log+0x3c>
    2a9a:	80 3e       	cpi	r24, 0xE0	; 224
    2a9c:	30 f0       	brcs	.+12     	; 0x2aaa <log+0x44>
    2a9e:	21 96       	adiw	r28, 0x01	; 1
    2aa0:	8f 77       	andi	r24, 0x7F	; 127
    2aa2:	5d d9       	rcall	.-3398   	; 0x1d5e <__addsf3>
    2aa4:	ec e0       	ldi	r30, 0x0C	; 12
    2aa6:	f1 e0       	ldi	r31, 0x01	; 1
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <log+0x4a>
    2aaa:	59 d9       	rcall	.-3406   	; 0x1d5e <__addsf3>
    2aac:	e9 e3       	ldi	r30, 0x39	; 57
    2aae:	f1 e0       	ldi	r31, 0x01	; 1
    2ab0:	4a df       	rcall	.-364    	; 0x2946 <__fp_powser>
    2ab2:	8b 01       	movw	r16, r22
    2ab4:	be 01       	movw	r22, r28
    2ab6:	ec 01       	movw	r28, r24
    2ab8:	fb 2e       	mov	r15, r27
    2aba:	6f 57       	subi	r22, 0x7F	; 127
    2abc:	71 09       	sbc	r23, r1
    2abe:	75 95       	asr	r23
    2ac0:	77 1f       	adc	r23, r23
    2ac2:	88 0b       	sbc	r24, r24
    2ac4:	99 0b       	sbc	r25, r25
    2ac6:	4e db       	rcall	.-2404   	; 0x2164 <__floatsisf>
    2ac8:	28 e1       	ldi	r18, 0x18	; 24
    2aca:	32 e7       	ldi	r19, 0x72	; 114
    2acc:	41 e3       	ldi	r20, 0x31	; 49
    2ace:	5f e3       	ldi	r21, 0x3F	; 63
    2ad0:	47 d0       	rcall	.+142    	; 0x2b60 <__mulsf3x>
    2ad2:	af 2d       	mov	r26, r15
    2ad4:	98 01       	movw	r18, r16
    2ad6:	ae 01       	movw	r20, r28
    2ad8:	ff 90       	pop	r15
    2ada:	0f 91       	pop	r16
    2adc:	1f 91       	pop	r17
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	a2 d0       	rcall	.+324    	; 0x2c28 <__addsf3x>
    2ae4:	10 c1       	rjmp	.+544    	; 0x2d06 <__fp_round>

00002ae6 <modf>:
    2ae6:	fa 01       	movw	r30, r20
    2ae8:	dc 01       	movw	r26, r24
    2aea:	aa 0f       	add	r26, r26
    2aec:	bb 1f       	adc	r27, r27
    2aee:	9b 01       	movw	r18, r22
    2af0:	ac 01       	movw	r20, r24
    2af2:	bf 57       	subi	r27, 0x7F	; 127
    2af4:	28 f4       	brcc	.+10     	; 0x2b00 <modf+0x1a>
    2af6:	22 27       	eor	r18, r18
    2af8:	33 27       	eor	r19, r19
    2afa:	44 27       	eor	r20, r20
    2afc:	50 78       	andi	r21, 0x80	; 128
    2afe:	1f c0       	rjmp	.+62     	; 0x2b3e <modf+0x58>
    2b00:	b7 51       	subi	r27, 0x17	; 23
    2b02:	88 f4       	brcc	.+34     	; 0x2b26 <modf+0x40>
    2b04:	ab 2f       	mov	r26, r27
    2b06:	00 24       	eor	r0, r0
    2b08:	46 95       	lsr	r20
    2b0a:	37 95       	ror	r19
    2b0c:	27 95       	ror	r18
    2b0e:	01 1c       	adc	r0, r1
    2b10:	a3 95       	inc	r26
    2b12:	d2 f3       	brmi	.-12     	; 0x2b08 <modf+0x22>
    2b14:	00 20       	and	r0, r0
    2b16:	69 f0       	breq	.+26     	; 0x2b32 <modf+0x4c>
    2b18:	22 0f       	add	r18, r18
    2b1a:	33 1f       	adc	r19, r19
    2b1c:	44 1f       	adc	r20, r20
    2b1e:	b3 95       	inc	r27
    2b20:	da f3       	brmi	.-10     	; 0x2b18 <modf+0x32>
    2b22:	0d d0       	rcall	.+26     	; 0x2b3e <modf+0x58>
    2b24:	eb c8       	rjmp	.-3626   	; 0x1cfc <__subsf3>
    2b26:	61 30       	cpi	r22, 0x01	; 1
    2b28:	71 05       	cpc	r23, r1
    2b2a:	a0 e8       	ldi	r26, 0x80	; 128
    2b2c:	8a 07       	cpc	r24, r26
    2b2e:	b9 46       	sbci	r27, 0x69	; 105
    2b30:	30 f4       	brcc	.+12     	; 0x2b3e <modf+0x58>
    2b32:	9b 01       	movw	r18, r22
    2b34:	ac 01       	movw	r20, r24
    2b36:	66 27       	eor	r22, r22
    2b38:	77 27       	eor	r23, r23
    2b3a:	88 27       	eor	r24, r24
    2b3c:	90 78       	andi	r25, 0x80	; 128
    2b3e:	30 96       	adiw	r30, 0x00	; 0
    2b40:	21 f0       	breq	.+8      	; 0x2b4a <modf+0x64>
    2b42:	20 83       	st	Z, r18
    2b44:	31 83       	std	Z+1, r19	; 0x01
    2b46:	42 83       	std	Z+2, r20	; 0x02
    2b48:	53 83       	std	Z+3, r21	; 0x03
    2b4a:	08 95       	ret
    2b4c:	ce d0       	rcall	.+412    	; 0x2cea <__fp_pscA>
    2b4e:	28 f0       	brcs	.+10     	; 0x2b5a <modf+0x74>
    2b50:	d3 d0       	rcall	.+422    	; 0x2cf8 <__fp_pscB>
    2b52:	18 f0       	brcs	.+6      	; 0x2b5a <modf+0x74>
    2b54:	95 23       	and	r25, r21
    2b56:	09 f0       	breq	.+2      	; 0x2b5a <modf+0x74>
    2b58:	ed ce       	rjmp	.-550    	; 0x2934 <__fp_inf>
    2b5a:	f2 ce       	rjmp	.-540    	; 0x2940 <__fp_nan>
    2b5c:	11 24       	eor	r1, r1
    2b5e:	3b cf       	rjmp	.-394    	; 0x29d6 <__fp_szero>

00002b60 <__mulsf3x>:
    2b60:	17 df       	rcall	.-466    	; 0x2990 <__fp_split3>
    2b62:	a0 f3       	brcs	.-24     	; 0x2b4c <modf+0x66>

00002b64 <__mulsf3_pse>:
    2b64:	95 9f       	mul	r25, r21
    2b66:	d1 f3       	breq	.-12     	; 0x2b5c <modf+0x76>
    2b68:	95 0f       	add	r25, r21
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	55 1f       	adc	r21, r21
    2b6e:	62 9f       	mul	r22, r18
    2b70:	f0 01       	movw	r30, r0
    2b72:	72 9f       	mul	r23, r18
    2b74:	bb 27       	eor	r27, r27
    2b76:	f0 0d       	add	r31, r0
    2b78:	b1 1d       	adc	r27, r1
    2b7a:	63 9f       	mul	r22, r19
    2b7c:	aa 27       	eor	r26, r26
    2b7e:	f0 0d       	add	r31, r0
    2b80:	b1 1d       	adc	r27, r1
    2b82:	aa 1f       	adc	r26, r26
    2b84:	64 9f       	mul	r22, r20
    2b86:	66 27       	eor	r22, r22
    2b88:	b0 0d       	add	r27, r0
    2b8a:	a1 1d       	adc	r26, r1
    2b8c:	66 1f       	adc	r22, r22
    2b8e:	82 9f       	mul	r24, r18
    2b90:	22 27       	eor	r18, r18
    2b92:	b0 0d       	add	r27, r0
    2b94:	a1 1d       	adc	r26, r1
    2b96:	62 1f       	adc	r22, r18
    2b98:	73 9f       	mul	r23, r19
    2b9a:	b0 0d       	add	r27, r0
    2b9c:	a1 1d       	adc	r26, r1
    2b9e:	62 1f       	adc	r22, r18
    2ba0:	83 9f       	mul	r24, r19
    2ba2:	a0 0d       	add	r26, r0
    2ba4:	61 1d       	adc	r22, r1
    2ba6:	22 1f       	adc	r18, r18
    2ba8:	74 9f       	mul	r23, r20
    2baa:	33 27       	eor	r19, r19
    2bac:	a0 0d       	add	r26, r0
    2bae:	61 1d       	adc	r22, r1
    2bb0:	23 1f       	adc	r18, r19
    2bb2:	84 9f       	mul	r24, r20
    2bb4:	60 0d       	add	r22, r0
    2bb6:	21 1d       	adc	r18, r1
    2bb8:	82 2f       	mov	r24, r18
    2bba:	76 2f       	mov	r23, r22
    2bbc:	6a 2f       	mov	r22, r26
    2bbe:	11 24       	eor	r1, r1
    2bc0:	9f 57       	subi	r25, 0x7F	; 127
    2bc2:	50 40       	sbci	r21, 0x00	; 0
    2bc4:	8a f0       	brmi	.+34     	; 0x2be8 <__mulsf3_pse+0x84>
    2bc6:	e1 f0       	breq	.+56     	; 0x2c00 <__mulsf3_pse+0x9c>
    2bc8:	88 23       	and	r24, r24
    2bca:	4a f0       	brmi	.+18     	; 0x2bde <__mulsf3_pse+0x7a>
    2bcc:	ee 0f       	add	r30, r30
    2bce:	ff 1f       	adc	r31, r31
    2bd0:	bb 1f       	adc	r27, r27
    2bd2:	66 1f       	adc	r22, r22
    2bd4:	77 1f       	adc	r23, r23
    2bd6:	88 1f       	adc	r24, r24
    2bd8:	91 50       	subi	r25, 0x01	; 1
    2bda:	50 40       	sbci	r21, 0x00	; 0
    2bdc:	a9 f7       	brne	.-22     	; 0x2bc8 <__mulsf3_pse+0x64>
    2bde:	9e 3f       	cpi	r25, 0xFE	; 254
    2be0:	51 05       	cpc	r21, r1
    2be2:	70 f0       	brcs	.+28     	; 0x2c00 <__mulsf3_pse+0x9c>
    2be4:	a7 ce       	rjmp	.-690    	; 0x2934 <__fp_inf>
    2be6:	f7 ce       	rjmp	.-530    	; 0x29d6 <__fp_szero>
    2be8:	5f 3f       	cpi	r21, 0xFF	; 255
    2bea:	ec f3       	brlt	.-6      	; 0x2be6 <__mulsf3_pse+0x82>
    2bec:	98 3e       	cpi	r25, 0xE8	; 232
    2bee:	dc f3       	brlt	.-10     	; 0x2be6 <__mulsf3_pse+0x82>
    2bf0:	86 95       	lsr	r24
    2bf2:	77 95       	ror	r23
    2bf4:	67 95       	ror	r22
    2bf6:	b7 95       	ror	r27
    2bf8:	f7 95       	ror	r31
    2bfa:	e7 95       	ror	r30
    2bfc:	9f 5f       	subi	r25, 0xFF	; 255
    2bfe:	c1 f7       	brne	.-16     	; 0x2bf0 <__mulsf3_pse+0x8c>
    2c00:	fe 2b       	or	r31, r30
    2c02:	88 0f       	add	r24, r24
    2c04:	91 1d       	adc	r25, r1
    2c06:	96 95       	lsr	r25
    2c08:	87 95       	ror	r24
    2c0a:	97 f9       	bld	r25, 7
    2c0c:	08 95       	ret
    2c0e:	6d d0       	rcall	.+218    	; 0x2cea <__fp_pscA>
    2c10:	30 f0       	brcs	.+12     	; 0x2c1e <__mulsf3_pse+0xba>
    2c12:	72 d0       	rcall	.+228    	; 0x2cf8 <__fp_pscB>
    2c14:	20 f0       	brcs	.+8      	; 0x2c1e <__mulsf3_pse+0xba>
    2c16:	31 f4       	brne	.+12     	; 0x2c24 <__mulsf3_pse+0xc0>
    2c18:	9f 3f       	cpi	r25, 0xFF	; 255
    2c1a:	11 f4       	brne	.+4      	; 0x2c20 <__mulsf3_pse+0xbc>
    2c1c:	1e f4       	brtc	.+6      	; 0x2c24 <__mulsf3_pse+0xc0>
    2c1e:	90 ce       	rjmp	.-736    	; 0x2940 <__fp_nan>
    2c20:	0e f4       	brtc	.+2      	; 0x2c24 <__mulsf3_pse+0xc0>
    2c22:	e0 95       	com	r30
    2c24:	e7 fb       	bst	r30, 7
    2c26:	86 ce       	rjmp	.-756    	; 0x2934 <__fp_inf>

00002c28 <__addsf3x>:
    2c28:	e9 2f       	mov	r30, r25
    2c2a:	b2 de       	rcall	.-668    	; 0x2990 <__fp_split3>
    2c2c:	80 f3       	brcs	.-32     	; 0x2c0e <__mulsf3_pse+0xaa>
    2c2e:	ba 17       	cp	r27, r26
    2c30:	62 07       	cpc	r22, r18
    2c32:	73 07       	cpc	r23, r19
    2c34:	84 07       	cpc	r24, r20
    2c36:	95 07       	cpc	r25, r21
    2c38:	18 f0       	brcs	.+6      	; 0x2c40 <__addsf3x+0x18>
    2c3a:	71 f4       	brne	.+28     	; 0x2c58 <__addsf3x+0x30>
    2c3c:	9e f5       	brtc	.+102    	; 0x2ca4 <__addsf3x+0x7c>
    2c3e:	ca ce       	rjmp	.-620    	; 0x29d4 <__fp_zero>
    2c40:	0e f4       	brtc	.+2      	; 0x2c44 <__addsf3x+0x1c>
    2c42:	e0 95       	com	r30
    2c44:	0b 2e       	mov	r0, r27
    2c46:	ba 2f       	mov	r27, r26
    2c48:	a0 2d       	mov	r26, r0
    2c4a:	0b 01       	movw	r0, r22
    2c4c:	b9 01       	movw	r22, r18
    2c4e:	90 01       	movw	r18, r0
    2c50:	0c 01       	movw	r0, r24
    2c52:	ca 01       	movw	r24, r20
    2c54:	a0 01       	movw	r20, r0
    2c56:	11 24       	eor	r1, r1
    2c58:	ff 27       	eor	r31, r31
    2c5a:	59 1b       	sub	r21, r25
    2c5c:	99 f0       	breq	.+38     	; 0x2c84 <__addsf3x+0x5c>
    2c5e:	59 3f       	cpi	r21, 0xF9	; 249
    2c60:	50 f4       	brcc	.+20     	; 0x2c76 <__addsf3x+0x4e>
    2c62:	50 3e       	cpi	r21, 0xE0	; 224
    2c64:	68 f1       	brcs	.+90     	; 0x2cc0 <__addsf3x+0x98>
    2c66:	1a 16       	cp	r1, r26
    2c68:	f0 40       	sbci	r31, 0x00	; 0
    2c6a:	a2 2f       	mov	r26, r18
    2c6c:	23 2f       	mov	r18, r19
    2c6e:	34 2f       	mov	r19, r20
    2c70:	44 27       	eor	r20, r20
    2c72:	58 5f       	subi	r21, 0xF8	; 248
    2c74:	f3 cf       	rjmp	.-26     	; 0x2c5c <__addsf3x+0x34>
    2c76:	46 95       	lsr	r20
    2c78:	37 95       	ror	r19
    2c7a:	27 95       	ror	r18
    2c7c:	a7 95       	ror	r26
    2c7e:	f0 40       	sbci	r31, 0x00	; 0
    2c80:	53 95       	inc	r21
    2c82:	c9 f7       	brne	.-14     	; 0x2c76 <__addsf3x+0x4e>
    2c84:	7e f4       	brtc	.+30     	; 0x2ca4 <__addsf3x+0x7c>
    2c86:	1f 16       	cp	r1, r31
    2c88:	ba 0b       	sbc	r27, r26
    2c8a:	62 0b       	sbc	r22, r18
    2c8c:	73 0b       	sbc	r23, r19
    2c8e:	84 0b       	sbc	r24, r20
    2c90:	ba f0       	brmi	.+46     	; 0x2cc0 <__addsf3x+0x98>
    2c92:	91 50       	subi	r25, 0x01	; 1
    2c94:	a1 f0       	breq	.+40     	; 0x2cbe <__addsf3x+0x96>
    2c96:	ff 0f       	add	r31, r31
    2c98:	bb 1f       	adc	r27, r27
    2c9a:	66 1f       	adc	r22, r22
    2c9c:	77 1f       	adc	r23, r23
    2c9e:	88 1f       	adc	r24, r24
    2ca0:	c2 f7       	brpl	.-16     	; 0x2c92 <__addsf3x+0x6a>
    2ca2:	0e c0       	rjmp	.+28     	; 0x2cc0 <__addsf3x+0x98>
    2ca4:	ba 0f       	add	r27, r26
    2ca6:	62 1f       	adc	r22, r18
    2ca8:	73 1f       	adc	r23, r19
    2caa:	84 1f       	adc	r24, r20
    2cac:	48 f4       	brcc	.+18     	; 0x2cc0 <__addsf3x+0x98>
    2cae:	87 95       	ror	r24
    2cb0:	77 95       	ror	r23
    2cb2:	67 95       	ror	r22
    2cb4:	b7 95       	ror	r27
    2cb6:	f7 95       	ror	r31
    2cb8:	9e 3f       	cpi	r25, 0xFE	; 254
    2cba:	08 f0       	brcs	.+2      	; 0x2cbe <__addsf3x+0x96>
    2cbc:	b3 cf       	rjmp	.-154    	; 0x2c24 <__mulsf3_pse+0xc0>
    2cbe:	93 95       	inc	r25
    2cc0:	88 0f       	add	r24, r24
    2cc2:	08 f0       	brcs	.+2      	; 0x2cc6 <__addsf3x+0x9e>
    2cc4:	99 27       	eor	r25, r25
    2cc6:	ee 0f       	add	r30, r30
    2cc8:	97 95       	ror	r25
    2cca:	87 95       	ror	r24
    2ccc:	08 95       	ret

00002cce <__fp_mpack>:
    2cce:	9f 3f       	cpi	r25, 0xFF	; 255
    2cd0:	31 f0       	breq	.+12     	; 0x2cde <__fp_mpack_finite+0xc>

00002cd2 <__fp_mpack_finite>:
    2cd2:	91 50       	subi	r25, 0x01	; 1
    2cd4:	20 f4       	brcc	.+8      	; 0x2cde <__fp_mpack_finite+0xc>
    2cd6:	87 95       	ror	r24
    2cd8:	77 95       	ror	r23
    2cda:	67 95       	ror	r22
    2cdc:	b7 95       	ror	r27
    2cde:	88 0f       	add	r24, r24
    2ce0:	91 1d       	adc	r25, r1
    2ce2:	96 95       	lsr	r25
    2ce4:	87 95       	ror	r24
    2ce6:	97 f9       	bld	r25, 7
    2ce8:	08 95       	ret

00002cea <__fp_pscA>:
    2cea:	00 24       	eor	r0, r0
    2cec:	0a 94       	dec	r0
    2cee:	16 16       	cp	r1, r22
    2cf0:	17 06       	cpc	r1, r23
    2cf2:	18 06       	cpc	r1, r24
    2cf4:	09 06       	cpc	r0, r25
    2cf6:	08 95       	ret

00002cf8 <__fp_pscB>:
    2cf8:	00 24       	eor	r0, r0
    2cfa:	0a 94       	dec	r0
    2cfc:	12 16       	cp	r1, r18
    2cfe:	13 06       	cpc	r1, r19
    2d00:	14 06       	cpc	r1, r20
    2d02:	05 06       	cpc	r0, r21
    2d04:	08 95       	ret

00002d06 <__fp_round>:
    2d06:	09 2e       	mov	r0, r25
    2d08:	03 94       	inc	r0
    2d0a:	00 0c       	add	r0, r0
    2d0c:	11 f4       	brne	.+4      	; 0x2d12 <__fp_round+0xc>
    2d0e:	88 23       	and	r24, r24
    2d10:	52 f0       	brmi	.+20     	; 0x2d26 <__fp_round+0x20>
    2d12:	bb 0f       	add	r27, r27
    2d14:	40 f4       	brcc	.+16     	; 0x2d26 <__fp_round+0x20>
    2d16:	bf 2b       	or	r27, r31
    2d18:	11 f4       	brne	.+4      	; 0x2d1e <__fp_round+0x18>
    2d1a:	60 ff       	sbrs	r22, 0
    2d1c:	04 c0       	rjmp	.+8      	; 0x2d26 <__fp_round+0x20>
    2d1e:	6f 5f       	subi	r22, 0xFF	; 255
    2d20:	7f 4f       	sbci	r23, 0xFF	; 255
    2d22:	8f 4f       	sbci	r24, 0xFF	; 255
    2d24:	9f 4f       	sbci	r25, 0xFF	; 255
    2d26:	08 95       	ret

00002d28 <_exit>:
    2d28:	f8 94       	cli

00002d2a <__stop_program>:
    2d2a:	ff cf       	rjmp	.-2      	; 0x2d2a <__stop_program>
